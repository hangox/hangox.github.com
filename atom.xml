<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>47Log</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.47log.com/"/>
  <updated>2018-06-09T08:29:52.937Z</updated>
  <id>http://blog.47log.com/</id>
  
  <author>
    <name>HangoX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 与 SpringBoot 开发配置流程(简单版）</title>
    <link href="http://blog.47log.com/2018/06/09/2018-06-09-08:19/"/>
    <id>http://blog.47log.com/2018/06/09/2018-06-09-08:19/</id>
    <published>2018-06-09T08:19:29.000Z</published>
    <updated>2018-06-09T08:29:52.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-配置"><a href="#react-配置" class="headerlink" title="react 配置"></a>react 配置</h2><h3 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h3><p>打包js让react可以直接被浏览器运行</p><h3 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h3><p>因为使用的是JSX和ES6，低版本的浏览器可能会无法运行，需要这个开发插件翻译</p><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p>因为配置 Webpack 打包原本的 react 开发功能无法使用，需要手动配置 webpack 的热更新</p><h3 id="浏览器跨域问题"><a href="#浏览器跨域问题" class="headerlink" title="浏览器跨域问题"></a>浏览器跨域问题</h3><p>react 需要运行在独立的服务器上才能运转，也就是和 SpringBoot 不在同一个服务器上。这样会导致浏览器跨域请求问题，需要做个代理。代理SpringBoot的服务器到 react 上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react-配置&quot;&gt;&lt;a href=&quot;#react-配置&quot; class=&quot;headerlink&quot; title=&quot;react 配置&quot;&gt;&lt;/a&gt;react 配置&lt;/h2&gt;&lt;h3 id=&quot;安装-webpack&quot;&gt;&lt;a href=&quot;#安装-webpack&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="react" scheme="http://blog.47log.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ObejextBox 记录</title>
    <link href="http://blog.47log.com/2018/06/03/2018-06-03-00:14/"/>
    <id>http://blog.47log.com/2018/06/03/2018-06-03-00:14/</id>
    <published>2018-06-03T00:14:51.000Z</published>
    <updated>2018-06-08T16:38:09.038Z</updated>
    
    <content type="html"><![CDATA[<p>ObjextBox 其实是可以用于桌面Java客户端的<br>这个<a href="http://objectbox.io/documentation/embedded-db-for-java-desktop-apps/" target="_blank" rel="noopener">网页</a>就是教你如何集成的。<br>而且这个是支持三大桌面操作系统的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ObjextBox 其实是可以用于桌面Java客户端的&lt;br&gt;这个&lt;a href=&quot;http://objectbox.io/documentation/embedded-db-for-java-desktop-apps/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.47log.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Rect 学习之路</title>
    <link href="http://blog.47log.com/2018/05/07/2018-05-07-01:35/"/>
    <id>http://blog.47log.com/2018/05/07/2018-05-07-01:35/</id>
    <published>2018-05-07T01:35:48.000Z</published>
    <updated>2018-06-03T12:18:59.965Z</updated>
    
    <content type="html"><![CDATA[<p>引用<a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md" target="_blank" rel="noopener">如何学习React</a></p><p>以下只是提醒我的路线，实际上作者的内容非常丰富，建议阅读原文</p><h2 id="如何踏入-React-生态圈"><a href="#如何踏入-React-生态圈" class="headerlink" title="如何踏入 React 生态圈"></a>如何踏入 React 生态圈</h2><p>所有的软件都是建立在某个技术栈之上的, 你需要对整个技术栈有足够深入的理解, 才能建造你的应用. 为什么 React 生态圈的工具似乎总让人感觉压力山大呢, 因为它总是以错误的顺序被解释:</p><p>你应该按照以下的顺序进行学习, <strong>而不是跳着学或者同时学习</strong>:</p><ul><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-react-%E6%9C%AC%E8%BA%AB" target="_blank" rel="noopener">React</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-npm" target="_blank" rel="noopener"><code>npm</code></a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-javascript-%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">JavaScript “打包工具”</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-es6" target="_blank" rel="noopener">ES6</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%94%B1-routing" target="_blank" rel="noopener">Routing</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-flux" target="_blank" rel="noopener">Flux</a></li></ul><p><strong>你不需要把这些都学完才去使用 React.</strong> 只需要在你遇到问题需要解决的时候, 才进入下一步的学习.</p><p>另外, 在 React 社区中, 有一些前沿主题是经常被提及到的, 以下的这些主题很有意思, 但也很难弄懂, 所以它们远没有上面的主题流行, <strong>大多数应用也不需要用到这些.</strong></p><ul><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F" target="_blank" rel="noopener">内联样式</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">服务器端渲染</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-immutablejs" target="_blank" rel="noopener">Immutable.js</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-relay-falcor-%E7%AD%89" target="_blank" rel="noopener">Relay, Falcor 等</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用&lt;a href=&quot;https://github.com/petehunt/react-howto/blob/master/README-zh.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何学习React&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下只是提醒我的
      
    
    </summary>
    
    
      <category term="react" scheme="http://blog.47log.com/tags/react/"/>
    
      <category term="js" scheme="http://blog.47log.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>List and Keys (列表与关键词）</title>
    <link href="http://blog.47log.com/2018/05/06/2018-05-06-13:47/"/>
    <id>http://blog.47log.com/2018/05/06/2018-05-06-13:47/</id>
    <published>2018-05-06T13:47:09.000Z</published>
    <updated>2018-06-03T12:19:00.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这章主要说明怎么正确的设置列表中元素的key,作为<code>key</code>最好有具有局部唯一确定性<br>一般有两个选择，内容的id作为key，其次用次序作为key</p><h2 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h2><h3 id="渲染多个组件"><a href="#渲染多个组件" class="headerlink" title="渲染多个组件"></a>渲染多个组件</h3><p><em>例</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  &lt;li&gt;&#123;number&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/渲染</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用数据下标做key"><a href="#使用数据下标做key" class="headerlink" title="使用数据下标做key"></a>使用数据下标做key</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">      &#123;number&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="使用-Keys-展开一堆组件"><a href="#使用-Keys-展开一堆组件" class="headerlink" title="使用 Keys 展开一堆组件"></a>使用 Keys 展开一堆组件</h3><p>应该把key设置在循环的组件上，而不是组件的实际渲染上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Correct! There is no need to specify the key here:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// Correct! Key should be specified inside the array.</span></span><br><span class="line">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">              value=&#123;number&#125; /&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="key-必须在-list-中唯一"><a href="#key-必须在-list-中唯一" class="headerlink" title="key 必须在 list 中唯一"></a>key 必须在 list 中唯一</h3><p>这个不用多说，唯一不用说了才能在 list 找到</p><h3 id="在JSX中嵌入-map-表达式"><a href="#在JSX中嵌入-map-表达式" class="headerlink" title="在JSX中嵌入 map 表达式"></a>在JSX中嵌入 map 表达式</h3><p><em>例1</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">              value=&#123;number&#125; /&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>JSF 允许所有的东西写在{}中<br><em>例2</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">        &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">                  value=&#123;number&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;这章主要说明怎么正确的设置列表中元素的key,作为&lt;code&gt;key&lt;/code&gt;最好有具有局部唯一确定性&lt;br&gt;一般有两个选择，内容的id作为key，其次用次序作为key&lt;/p&gt;
&lt;h2 id=&quot;章节&quot;&gt;&lt;a href=&quot;#章节&quot; class=&quot;headerlink&quot; title=&quot;章节&quot;&gt;&lt;/a&gt;章节&lt;/h2&gt;&lt;h3 id=&quot;渲染多个组件&quot;&gt;&lt;a href=&quot;#渲染多个组件&quot; class=&quot;headerlink&quot; title=&quot;渲染多个组件&quot;&gt;&lt;/a&gt;渲染多个组件&lt;/h3&gt;&lt;p&gt;&lt;em&gt;例&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; listItems = numbers.map(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;number&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;li&amp;gt;&amp;#123;number&amp;#125;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/渲染&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;ReactDOM.render(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;lt;ul&amp;gt;&amp;#123;listItems&amp;#125;&amp;lt;/u&lt;/span&gt;l&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.47log.com/tags/react/"/>
    
      <category term="js" scheme="http://blog.47log.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Handle Event （处理事件）</title>
    <link href="http://blog.47log.com/2018/05/05/2018-05-05-15:47/"/>
    <id>http://blog.47log.com/2018/05/05/2018-05-05-15:47/</id>
    <published>2018-05-05T15:47:58.000Z</published>
    <updated>2018-06-03T12:19:00.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React与js事件处理的同与不同"><a href="#React与js事件处理的同与不同" class="headerlink" title="React与js事件处理的同与不同"></a>React与js事件处理的同与不同</h2><ul><li>React事件使用camelCase命名，而不是小写。</li><li>使用JSX，您将传递方法引用作为事件处理函数，而不是字符串。</li></ul><p><strong>例</strong></p><p><strong>HTML</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"start()"</span>&gt;</span></span><br><span class="line">    开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>React</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&#123;this.start&#125;</span>&gt;</span></span><br><span class="line">    开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="React中的默认行为处理方式与JS不同"><a href="#React中的默认行为处理方式与JS不同" class="headerlink" title="React中的默认行为处理方式与JS不同"></a>React中的默认行为处理方式与JS不同</h1><p>无法返回false以防止React中的默认行为</p><p><strong>例</strong></p><p><em>HTML</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"console.log('The link was clicked.'); return false"</span>&gt;</span></span><br><span class="line">  Click me</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>react</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The link was clicked.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="事件绑定问题"><a href="#事件绑定问题" class="headerlink" title="事件绑定问题"></a>事件绑定问题</h2><p>事件是需要绑定才能生效的，当你把 <code>handleClick</code> 设置给<code>onClick</code> 的时候，需要思考是否已经绑定到<br><code>this</code>上</p><blockquote><p>官方说这是这是<code>js</code>的特性，为什么是这样，我也不太清楚</p></blockquote><p><em>例</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">lass Toggle extends React.Component &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      isToggleOn: !prevState.isToggleOn</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.isToggleOn ? <span class="string">'ON'</span> : <span class="string">'OFF'</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Toggle /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果你不喜欢每次都要调用bind,你可以把方法变成成员变量，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class="line">  <span class="comment">// Warning: this is *experimental* syntax.</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>其实就是创建了一<code>handleClick</code> 的成员变量，然后创建了一个方法赋值给<code>handleClick</code></p><p>还有一种办法，创建匿名内部类方法<br><em>例</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// This syntax ensures `this` is bound within handleClick</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这种问题就是每次渲染的时候都会创建不同匿名内部类，会带来一定的性能消耗问题</p><blockquote><p>官方推荐使用 <em>bind</em> 和 <em>class fields syntax</em> 两种方式</p></blockquote><h3 id="将参数传递给事件处理"><a href="#将参数传递给事件处理" class="headerlink" title="将参数传递给事件处理"></a>将参数传递给事件处理</h3><p>在列表中经常会传递id 给点击方法，需要传递参数，以下是传递参数的两种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React与js事件处理的同与不同&quot;&gt;&lt;a href=&quot;#React与js事件处理的同与不同&quot; class=&quot;headerlink&quot; title=&quot;React与js事件处理的同与不同&quot;&gt;&lt;/a&gt;React与js事件处理的同与不同&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;React事件使用camelCase命名，而不是小写。&lt;/li&gt;
&lt;li&gt;使用JSX，您将传递方法引用作为事件处理函数，而不是字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;start()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.start&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.47log.com/tags/react/"/>
    
      <category term="js" scheme="http://blog.47log.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Conditional Rendering(有条件渲染)</title>
    <link href="http://blog.47log.com/2018/05/05/2018-05-05-09:44/"/>
    <id>http://blog.47log.com/2018/05/05/2018-05-05-09:44/</id>
    <published>2018-05-05T09:44:10.000Z</published>
    <updated>2018-06-03T12:19:00.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>讲述 React 可以通过各种传统和简写判断方式控制元素选择显示或者不显示</p><h2 id="主要章节"><a href="#主要章节" class="headerlink" title="主要章节"></a>主要章节</h2><ol><li>通过判断返回不同的元素</li><li>不想展示某个元素可以返回null</li><li>内联逻辑&amp;&amp;运算符判断返回元素</li></ol><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="通过元素变量控制显示"><a href="#通过元素变量控制显示" class="headerlink" title="通过元素变量控制显示"></a>通过元素变量控制显示</h3><p>讲的其实就是通过变量控制渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> button = isLoggedIn ? (</span><br><span class="line">      &lt;LogoutButton onClick=&#123;<span class="keyword">this</span>.handleLogoutClick&#125; /&gt;</span><br><span class="line">    ) : (</span><br><span class="line">      &lt;LoginButton onClick=&#123;<span class="keyword">this</span>.handleLoginClick&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class="line">        &#123;button&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="内联-if-逻辑-amp-amp-操作符"><a href="#内联-if-逻辑-amp-amp-操作符" class="headerlink" title="内联 if 逻辑 &amp;&amp; 操作符"></a>内联 if 逻辑 &amp;&amp; 操作符</h3><p>其实就是将一个 判断语句&amp;&amp;组合，true输出&amp;&amp; 部分，false直接忽略</p><p><strong>模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    express &amp;&amp; </span><br><span class="line">    <span class="comment">//true 需要输出的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mailbox</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> unreadMessages = props.unreadMessages;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      &#123;unreadMessages.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">          You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class="line">        &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p><strong>模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? <span class="literal">true</span> : <span class="literal">false</span>.</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      The user is &lt;b&gt;&#123;isLoggedIn ? <span class="string">'currently'</span> : <span class="string">'not'</span>&#125;&lt;<span class="regexp">/b&gt; logged in.</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止组件出现"><a href="#阻止组件出现" class="headerlink" title="阻止组件出现"></a>阻止组件出现</h3><p>其实就是如果不想这个组件渲染，直接返回<code>null</code>就可以了。但是这个组件的<br><code>componentWillUpdate</code> 和 <code>componentDidUpdate</code> 还是会被调用的</p><p><strong>模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">if</span>(不出现）&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (正常组件)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.warn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"warning"</span>&gt;</span><br><span class="line">      Warning!</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h2&gt;&lt;p&gt;讲述 React 可以通过各种传统和简写判断方式控制元素选择显示或者不显示&lt;/p&gt;
&lt;h2 id=&quot;主要章节&quot;&gt;&lt;a href=&quot;#主要章节&quot; class=&quot;headerlink&quot; title=&quot;主要章节&quot;&gt;&lt;/a&gt;主要章节&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;通过判断返回不同的元素&lt;/li&gt;
&lt;li&gt;不想展示某个元素可以返回null&lt;/li&gt;
&lt;li&gt;内联逻辑&amp;amp;&amp;amp;运算符判断返回元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;详解&quot;&gt;&lt;a href=&quot;#详解&quot; class=&quot;headerlink&quot; title=&quot;详解&quot;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;h3 id=&quot;通过元素变量控制显示&quot;&gt;&lt;a href=&quot;#通过元素变量控制显示&quot; class=&quot;headerlink&quot; title=&quot;通过元素变量控制显示&quot;&gt;&lt;/a&gt;通过元素变量控制显示&lt;/h3&gt;&lt;p&gt;讲的其实就是通过变量控制渲染&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; isLoggedIn = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.isLoggedIn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; button = isLoggedIn ? (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;LogoutButton onClick=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleLogoutClick&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ) : (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;LoginButton onClick=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleLoginClick&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Greeting isLoggedIn=&amp;#123;isLoggedIn&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;button&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.47log.com/tags/react/"/>
    
      <category term="js" scheme="http://blog.47log.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>State and LifeCycle</title>
    <link href="http://blog.47log.com/2018/05/01/2018-05-01-07:55/"/>
    <id>http://blog.47log.com/2018/05/01/2018-05-01-07:55/</id>
    <published>2018-05-01T07:55:29.000Z</published>
    <updated>2018-06-03T12:19:00.090Z</updated>
    
    <content type="html"><![CDATA[<p>这章主要是讲状态和生命周期</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>可以在组件定义一个这样的东西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">                name: <span class="string">"test"</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>state</code> 就是一个结构体，但是有且只有在构造方法中定义这个 state 的结构体。</p><h3 id="这个结构体是可以修改的"><a href="#这个结构体是可以修改的" class="headerlink" title="这个结构体是可以修改的"></a>这个结构体是可以修改的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意必须调用<code>setState</code> 方法的修改，修改的值才能响应到界面<br><a id="more"></a></p><h3 id="自动合并"><a href="#自动合并" class="headerlink" title="自动合并"></a>自动合并</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是设置了 <code>date</code> 数据，会自动和 <code>name</code> 数据合并</p><h3 id="setState-方法可能是异步的"><a href="#setState-方法可能是异步的" class="headerlink" title="setState 方法可能是异步的"></a><code>setState</code> 方法可能是异步的</h3><p>所以这样的写法是错误的，执行的时候可能拿到是后面的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>把值传入闭包中计算可以保证是当前的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="LifeCycle-（生命周期）"><a href="#LifeCycle-（生命周期）" class="headerlink" title="LifeCycle （生命周期）"></a>LifeCycle （生命周期）</h2><p>文中介绍了两个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件加载的时候调用</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件将要离开的时候调用</span></span><br><span class="line">componentWillUnmount() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="数据流是向下"><a href="#数据流是向下" class="headerlink" title="数据流是向下"></a>数据流是向下</h2><p>数据可以设置给子组件，组件之间互相不知道各自的状态</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这章主要是讲状态和生命周期&lt;/p&gt;
&lt;h2 id=&quot;State&quot;&gt;&lt;a href=&quot;#State&quot; class=&quot;headerlink&quot; title=&quot;State&quot;&gt;&lt;/a&gt;State&lt;/h2&gt;&lt;p&gt;可以在组件定义一个这样的东西&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                date: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; 就是一个结构体，但是有且只有在构造方法中定义这个 state 的结构体。&lt;/p&gt;
&lt;h3 id=&quot;这个结构体是可以修改的&quot;&gt;&lt;a href=&quot;#这个结构体是可以修改的&quot; class=&quot;headerlink&quot; title=&quot;这个结构体是可以修改的&quot;&gt;&lt;/a&gt;这个结构体是可以修改的&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tick() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            date: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意必须调用&lt;code&gt;setState&lt;/code&gt; 方法的修改，修改的值才能响应到界面&lt;br&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://blog.47log.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="react" scheme="http://blog.47log.com/tags/react/"/>
    
      <category term="js" scheme="http://blog.47log.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Components and Props （组件与属性）</title>
    <link href="http://blog.47log.com/2018/05/01/2018-05-01-07:27/"/>
    <id>http://blog.47log.com/2018/05/01/2018-05-01-07:27/</id>
    <published>2018-05-01T07:27:38.000Z</published>
    <updated>2018-06-03T12:19:00.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Functional-and-Class-Components"><a href="#Functional-and-Class-Components" class="headerlink" title="Functional and Class Components"></a>Functional and Class Components</h2><h3 id="创建一个组件"><a href="#创建一个组件" class="headerlink" title="创建一个组件"></a>创建一个组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过设定名字显示不同的名字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weclome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello ,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//把以下内容渲染到一个叫 "Root" 的元素上</span></span><br><span class="line"><span class="xml">ReactDOM.render(</span></span><br><span class="line"><span class="xml">  element,</span></span><br><span class="line"><span class="xml">  document.getElementById('root')</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Cahal"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Edite"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="要善于提取组件"><a href="#要善于提取组件" class="headerlink" title="要善于提取组件"></a>要善于提取组件</h3><p><strong> 显示一个用户评论 </strong></p><h4 id="提取前"><a href="#提取前" class="headerlink" title="提取前"></a>提取前</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"Comment"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"UserInfo"</span>&gt;</span><br><span class="line">        &lt;img className=<span class="string">"Avatar"</span></span><br><span class="line">          src=&#123;props.author.avatarUrl&#125;</span><br><span class="line">          alt=&#123;props.author.name&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;div className=<span class="string">"UserInfo-name"</span>&gt;</span><br><span class="line">          &#123;props.author.name&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div className=<span class="string">"Comment-text"</span>&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="Comment-date"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="提取后"><a href="#提取后" class="headerlink" title="提取后"></a>提取后</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化信息</span></span><br><span class="line"><span class="comment"> * @param date</span></span><br><span class="line"><span class="comment"> * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date.toLocaleDateString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示头像</span></span><br><span class="line"><span class="comment"> * @param props</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avatar</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#123;</span>"<span class="attr">Avatar</span>"&#125;</span></span></span><br><span class="line"><span class="xml">                src=&#123;props.user.avatarUrl&#125;</span></span><br><span class="line"><span class="xml">                alt=&#123;props.user.name&#125;</span></span><br><span class="line"><span class="xml">    /&gt;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 用户信息</span></span><br><span class="line"><span class="xml"> * @param props</span></span><br><span class="line"><span class="xml"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="xml"> * @constructor</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function UserInfo(props) &#123;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">        &lt;div className=&#123;"UserInfo"&#125;&gt;</span><br><span class="line">            &lt;Avatar user=&#123;props.user&#125;/&gt;</span><br><span class="line">            &lt;div className=&#123;"UserInfo-name"&#125;&gt;</span><br><span class="line">                &#123;props.user.name&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 评论</span><br><span class="line"> * @param props</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function Comment(props) &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&#123;"Comment"&#125;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;UserInfo user=&#123;props.author&#125;/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div className=&#123;"Comment-text"&#125;&gt;</span><br><span class="line">                &#123;props.text&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div className=&#123;"Comment-date"&#125;&gt;</span><br><span class="line">                &#123;formatDate(props.date)&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评论会变得清晰很多</p><h2 id="所有的-props-都是只读的"><a href="#所有的-props-都是只读的" class="headerlink" title="所有的 props 都是只读的"></a>所有的 <code>props</code> 都是只读的</h2><p>以下的方法是会报错<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserInfo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    props.name = <span class="string">"10086"</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=&#123;<span class="string">"UserInfo"</span>&#125;&gt;</span><br><span class="line">            &lt;Avatar user=&#123;props.user&#125;/&gt;</span><br><span class="line">            &lt;div className=&#123;<span class="string">"UserInfo-name"</span>&#125;&gt;</span><br><span class="line">                &#123;props.user.name&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Functional-and-Class-Components&quot;&gt;&lt;a href=&quot;#Functional-and-Class-Components&quot; class=&quot;headerlink&quot; title=&quot;Functional and Class Components&quot;&gt;&lt;/a&gt;Functional and Class Components&lt;/h2&gt;&lt;h3 id=&quot;创建一个组件&quot;&gt;&lt;a href=&quot;#创建一个组件&quot; class=&quot;headerlink&quot; title=&quot;创建一个组件&quot;&gt;&lt;/a&gt;创建一个组件&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过设定名字显示不同的名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Weclome&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;hello ,&amp;#123;this.props.name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;渲染组件&quot;&gt;&lt;a href=&quot;#渲染组件&quot; class=&quot;headerlink&quot; title=&quot;渲染组件&quot;&gt;&lt;/a&gt;渲染组件&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Sara&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;//把以下内容渲染到一个叫 &quot;Root&quot; 的元素上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;ReactDOM.render(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;  element,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;  document.getElementById(&#39;root&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;完整示例&quot;&gt;&lt;a href=&quot;#完整示例&quot; class=&quot;headerlink&quot; title=&quot;完整示例&quot;&gt;&lt;/a&gt;完整示例&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Welcome&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, &amp;#123;props.name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Welcome name=&lt;span class=&quot;string&quot;&gt;&quot;Sara&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Welcome name=&lt;span class=&quot;string&quot;&gt;&quot;Cahal&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Welcome name=&lt;span class=&quot;string&quot;&gt;&quot;Edite&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;ReactDOM.render(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;lt;App /&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://blog.47log.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="react" scheme="http://blog.47log.com/tags/react/"/>
    
      <category term="js" scheme="http://blog.47log.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>添加 Linux 公钥原理</title>
    <link href="http://blog.47log.com/2018/04/29/2018-04-29-03:13/"/>
    <id>http://blog.47log.com/2018/04/29/2018-04-29-03:13/</id>
    <published>2018-04-29T03:13:28.000Z</published>
    <updated>2018-06-03T12:19:00.415Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>~/.ssh/</code> 目录下，有个 <code>authorized_keys</code> 文件，这个东西就是保存着可以登录的这个服务器的public key , 只要把你的public key 添加到authorized_keys 里面就可以了。</p><p>具体操作方法可以使用 vi 打开直接粘贴上去。</p><p>如果文件原本不存在，是自己创建的，需要注意权限问题，只要和sshkey 有关的都是 600 权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p><p>最后restart ssh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service restart sshd</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 &lt;code&gt;~/.ssh/&lt;/code&gt; 目录下，有个 &lt;code&gt;authorized_keys&lt;/code&gt; 文件，这个东西就是保存着可以登录的这个服务器的public key , 只要把你的public key 添加到authorized_keys 里面就可以了。
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.47log.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>找到了当年作为产品狗的证据🤣</title>
    <link href="http://blog.47log.com/2017/11/14/2017-11-14-14:15/"/>
    <id>http://blog.47log.com/2017/11/14/2017-11-14-14:15/</id>
    <published>2017-11-14T14:15:29.000Z</published>
    <updated>2018-06-03T12:19:00.413Z</updated>
    
    <content type="html"><![CDATA[<p>整理文档的时候偶尔发现了这样一份文档</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-14-15106690074451.jpg" alt=""></p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-14-15106690232836.jpg" alt=""></p><p>这是当年我参与设计和研发的应用啊！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理文档的时候偶尔发现了这样一份文档&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-14-15106690074451.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://
      
    
    </summary>
    
    
      <category term="往事" scheme="http://blog.47log.com/tags/%E5%BE%80%E4%BA%8B/"/>
    
      <category term="产品狗" scheme="http://blog.47log.com/tags/%E4%BA%A7%E5%93%81%E7%8B%97/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之禅——6大设计原则</title>
    <link href="http://blog.47log.com/2017/11/08/2017-11-08-08:59/"/>
    <id>http://blog.47log.com/2017/11/08/2017-11-08-08:59/</id>
    <published>2017-11-08T08:59:34.000Z</published>
    <updated>2018-06-03T12:19:00.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6个原则"><a href="#6个原则" class="headerlink" title="6个原则"></a>6个原则</h2><ul><li>单一职责：有且仅有一个原因引起类的变更</li><li>里氏替换：所有使用基类的地方都能无缝的使用其子类</li><li>依赖倒置：所有依赖都应该依赖于抽象，细节依赖于抽象，抽象依赖于抽象，面向契约编程就是它的实现</li><li>最少知识：一个对象应该对其他对象有最少了解,又名迪米特法则</li><li>接口隔离：客户端不应该依赖他不需要的接口</li><li>开闭原则：应该对修改关闭，对扩展开放</li></ul><a id="more"></a><h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><h3 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h3><p>单一职责的定义是 &gt;= 并且&lt;= 一个原则引起类的变更，也就是多于一个职责不行，少于一个职责也不行。</p><h3 id="我的例子"><a href="#我的例子" class="headerlink" title="我的例子"></a>我的例子</h3><p>以前为了方便，我总是把Model和Gson 的解析的模板类写在一起，比如，要解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"lisa"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="string">"sex"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我会定义一个这样的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">    </span><br><span class="line">    ...Getter Setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便，我会同时把这个类当做SQLite的一个Model保存数据。因为大部分时候他们两个是一致的。</p><p>这时候，<code>User</code> 这个类就会有两个职责，解析Json模板和保存数据的Model。<br>这样做就会带来问题，例如，我往Json数据中加入一个<code>token</code>的字段，但是这个字段是不需要保存下来的，这样你就需要加入一个判断使<code>token</code>不保存下来，会无端端导致这个类变得复杂，复杂就容易出错，同时因为Json的变动，导致Model那边的测试也要重新跑一边，这是一个典型的反例了。</p><p>正确的做法应该是把两个分开，分别负责不同的职能。</p><h2 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h2><h3 id="我的看法-1"><a href="#我的看法-1" class="headerlink" title="我的看法"></a>我的看法</h3><p>就是子类中必须完全并且正确实现父类的方法，对，少了也不行，改了意思也不行。</p><h3 id="我的例子-1"><a href="#我的例子-1" class="headerlink" title="我的例子"></a>我的例子</h3><p>一时没想到好例子，继续沿用书中的栗子吧。<br>书中讲述的是一个枪的父类，具体调用流程如下</p><p><img src="media/15101315748986/15103055896529.jpg" alt=""></p><p>重点看枪这个父类，如果我要实现一个玩具枪的时候应该怎么办？玩具枪也是枪，是不是直接继承枪这个父类就可以了？我以前的做法会是直接继承<code>AbstractGun</code>，然后把<code>shoot</code>方法置空，也就是变成如下这样</p><p><img src="media/15101315748986/15103058000292.jpg" alt=""></p><p>但是这样做是不对的，毕竟这里的枪是用来杀人的，当<code>ToyGun</code>继承于<code>AbstractGun</code>的时候，就是表示他是一只杀人的枪，当实际上它并不是，所以应该声明一个玩具枪的父类，让玩具枪基于这个父类去实现，这样就不会导致士兵拿到这个枪去杀人。</p><p>里氏替换要求子类必须忠实的实现父类的功能，不能少，不能改。毕竟，在Java中，能使用父类的地方就能替换成任意一个子类，如果子类没有父类的功能，调用者就会出错。</p><p>总的来说就是，<strong>子类必须在忠实的实现父类的功能后这个前提下享有自己的个人</strong>。</p><h2 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h2><h3 id="我的看法-2"><a href="#我的看法-2" class="headerlink" title="我的看法"></a>我的看法</h3><p>基于抽象编程，基于契约编程。Java中有个很出名的做法，不管干啥，先定义接口，使用的都是抽象的类或者接口，具体实现不管，就是基于接口编程。这样做好处是很明显的，抽象只是定义了一种行为模式，表示我可以做这个事情，具体你怎么做不管，这样给了实现者很大的空间。比如排序这个事情，我定义了排序这个功能，你只管把排序好的数据给我，具体实现我不管。当你发现一个更好的排序算法的时候，你就可以通过替换具体实例轻松完成升级。</p><h3 id="我的例子-2"><a href="#我的例子-2" class="headerlink" title="我的例子"></a>我的例子</h3><p>我在项目GaiaLibrary 曾经定义了一个通道<code>GLink</code>，如下图<br><img src="media/15101315748986/15103880445691.jpg" alt=""><br>有一个写入接口，负责把数据写入。调用者是<code>GRequestDispatcher</code></p><p>本来实现类只有一个<code>GBLELink</code>,也就是BLE通道，但是某一天，上头要求支持传统蓝牙通道，这时候基于抽象编程的优越性就发挥出来了，调用的代码不需要改动一行，我只需要继承<code>GLink</code>，实现一个基于传统蓝牙<code>GTranditionLink</code>就可以了。对于调用者来说，这个完全是无缝的。</p><h2 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h2><h3 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h3><p>接口隔离其实就是要求接口要尽可能小，接口代表的是一种能力，能够完成完整的描述一种能力就足够了。</p><h3 id="我的例子-3"><a href="#我的例子-3" class="headerlink" title="我的例子"></a>我的例子</h3><p>我曾经对Volley 的网络请求进行封装，我对网络请求的回掉并不是像一般的网络请求那样直接封装成一个，而是三个，如图</p><p><img src="media/15101315748986/15103901889836.jpg" alt=""></p><p>这样做有什么好处呢，很多网络请求回掉其实是有共性的，比如，错误之后，根据不同的指令码，弹出不同的提示。再比如，成功的时候固定获取某部分数据，或者存入到数据库中。当我把这几个接口全部分开的时候，可以轻松的通过不同的组合来达到各种各样的目的，提高了代码的复用性。但是缺点也是有的，这是接口分细之后共有的缺点，就是会更麻烦，如果是一个回掉接口，就可以通过一次设定就可以完成了。这个需要设定三次。</p><h2 id="最少知识"><a href="#最少知识" class="headerlink" title="最少知识"></a>最少知识</h2><h3 id="定义解析"><a href="#定义解析" class="headerlink" title="定义解析"></a>定义解析</h3><p>这个定义其实有两个方面内容，我对你了解最少，还有我让你了解我最少。<br>我对你了解最少，其实就是，调用其他类的属性和方法越少越好，这样就算其他类有更改，你内部的更改风险也能降到最低。<br>我让你了解最少，就是公开的属性和方法最少，这样就能保证修改内部实现的时候没有更多的束缚，毕竟私有的都是别人不能调用的。</p><h3 id="我的例子-4"><a href="#我的例子-4" class="headerlink" title="我的例子"></a>我的例子</h3><p>这个在SpringMVC中有个很好的东西就是为了解决知道类怎么构建这个问题的。就是<strong>注入</strong>,我在安卓中的使用Dagger，一个依赖注入框架。为什么说依赖注入框架是遵循最少知识原则，因为本来创建一个对象，就必须调用构造方法，调用构造方法就是在了解这个类，把这个过程省去了，就减少了需要对这个类的了解了。</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><h3 id="定义解析-1"><a href="#定义解析-1" class="headerlink" title="定义解析"></a>定义解析</h3><p>开闭原则可以提高以下几点，测试效率，提高复用，高维护性。测试效率，不需要重新测试修改过的代码，已经引用了这段修改过代码的代码，只需要测试配置是否正确即可。提高复用，使用已有功能通过配置达到目的。</p><h3 id="个人案例"><a href="#个人案例" class="headerlink" title="个人案例"></a>个人案例</h3><p>在安卓开发中，在网络回调中以前我是这样写的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">int</span> result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(result)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        .... doSomething</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        .... doSomething</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做有个很大的坏处，因为如果后台增加了一个码，你又需要重新加多一个<code>case</code>，假设这里有50个case，添加一个case，这个功能代码就需要所有测试重新再跑一趟，因为你修改了这个方法里的代码，正确的做法应该使用一种配置的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CodeCallback</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;Integer,CodeCallback&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加callback到 map中</span></span><br><span class="line">map.put(<span class="number">200</span>,callback200);</span><br><span class="line">map.put(<span class="number">400</span>,callback400);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">int</span> result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(map.contains(result))&#123;</span><br><span class="line">        map.get(result).execute();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方法，很好的符合开闭原则，当有新的code时候，只需要重新实现一个<code>CodeCallback</code>,然后添加map中就可以了，对于测试来说，只需要测试新的<code>CodeCallback</code>就可以了，无需重新跑一次所有的测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>单一职责</p><p>  当一个类遵守单一职责的时候，对比多职责，涉及到的功能肯定比较少。实现起来容易，代码清晰，也更容易维护。职责的减少，导致类的调用也变少，使用到地方也相应的减少，对应修改这个类的时候涉及到的范围也减少了。</p></li><li><p>里氏替换</p><p>  当一个类遵守里氏替换原则的时候，我就可以放心的使用父类，而不管子类是怎么实现的，毕竟功能肯定是实现了父类功能的。也不用一个个看子类的实现，毕竟你只要继承了这个类，你就应该有这个类的功能。关心的底层越少，编程越轻松。</p></li><li><p>依赖倒置</p><p>  所有都依赖于抽象，抽象这个词其实不好理解。我们换一个词，契约，依赖于契约编程。契约这个东西在生活中很常见，比如，上淘宝买一公斤大米，你不需要知道大米是怎么生产的，怎么到商家手中的，你只需要你要的是一公斤大米，大米就会送上门，买一公斤大米的时候就定义了一个契约，契约让你不需要关心任何细节，只要得到结果就可以了。依赖倒置带来的也是这样的效果，契约其实定义你需要的结果，不要去关心细节的实现。</p></li><li><p>最少知识</p><p>  最少知识在生活中其实是处处体现的，比如，我知道用这个菜刀可以切菜就行了，我不需要了解这个菜刀是怎么锻造的，用的是什么材料，我只需要知道这个菜刀可以切菜就够了。在类中的提现就是，我只需要调用这个类的公有方法去实现我需要的功能就可以了。对于功能提供类来说，我只需要把我需要提供的功能暴露出去就可以了，不需要把怎么实现也让第三方知道，毕竟，菜刀只需要让用户知道我真的切菜很好用就好，不需要告诉用户我是怎么锻造的。</p></li><li><p>接口隔离</p><p>  接口，在现实生活中的其实就是代表着功能的意思。想象一下你在买一款微波炉，你只需要微波功能，但是因为微波炉没有做好接口隔离，都是带烧烤功能的，你不得不为了买个微波炉，多付了烧烤功能的费用。编程也是这样，接口实现是有成本的，无端依赖不需要的接口，之后造成实现成本的攀高。</p></li><li><p>开闭原则</p><p>  为什么支持对扩展开放和对修改关闭呢？想象一下你有一台电脑，某一天你需要一个摄像头进行视频聊天，如果是对扩展关闭对修改开放的话，你的电脑估计要回厂，然后让厂商加一个摄像头了。但是对扩展开放就不一样了，直接淘宝买个USB摄像头，插上就能用。在编程中的体现就是，提供接口去获得新的功能。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;6个原则&quot;&gt;&lt;a href=&quot;#6个原则&quot; class=&quot;headerlink&quot; title=&quot;6个原则&quot;&gt;&lt;/a&gt;6个原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单一职责：有且仅有一个原因引起类的变更&lt;/li&gt;
&lt;li&gt;里氏替换：所有使用基类的地方都能无缝的使用其子类&lt;/li&gt;
&lt;li&gt;依赖倒置：所有依赖都应该依赖于抽象，细节依赖于抽象，抽象依赖于抽象，面向契约编程就是它的实现&lt;/li&gt;
&lt;li&gt;最少知识：一个对象应该对其他对象有最少了解,又名迪米特法则&lt;/li&gt;
&lt;li&gt;接口隔离：客户端不应该依赖他不需要的接口&lt;/li&gt;
&lt;li&gt;开闭原则：应该对修改关闭，对扩展开放&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://blog.47log.com/tags/java/"/>
    
      <category term="设计原则" scheme="http://blog.47log.com/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>setElevation 无效</title>
    <link href="http://blog.47log.com/2017/11/05/2017-11-05-15:14/"/>
    <id>http://blog.47log.com/2017/11/05/2017-11-05-15:14/</id>
    <published>2017-11-05T15:14:29.000Z</published>
    <updated>2018-06-03T12:19:00.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查父布局是否开启clipChildren"><a href="#检查父布局是否开启clipChildren" class="headerlink" title="检查父布局是否开启clipChildren"></a>检查父布局是否开启clipChildren</h2><p>阴影需要把东西绘制到子布局空间以外，不开启这个无法绘制</p><h2 id="检查background是否为透明"><a href="#检查background是否为透明" class="headerlink" title="检查background是否为透明"></a>检查background是否为透明</h2><p>透明的background 哪里来的阴影不是吗</p><blockquote><p>note:以下的xml表示是一个透明的布局，因为mask表示只有点击的时候才出现这个drawable</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"#FF666666"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/bg_item_click_normal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;检查父布局是否开启clipChildren&quot;&gt;&lt;a href=&quot;#检查父布局是否开启clipChildren&quot; class=&quot;headerlink&quot; title=&quot;检查父布局是否开启clipChildren&quot;&gt;&lt;/a&gt;检查父布局是否开启clipChildren&lt;/
      
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.47log.com/tags/Android/"/>
    
      <category term="坑" scheme="http://blog.47log.com/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>Firebase 的新功能（2017）</title>
    <link href="http://blog.47log.com/2017/11/02/2017-11-02-02:45/"/>
    <id>http://blog.47log.com/2017/11/02/2017-11-02-02:45/</id>
    <published>2017-11-02T02:45:25.000Z</published>
    <updated>2018-06-03T12:19:00.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Firebase-的两个主要目标"><a href="#Firebase-的两个主要目标" class="headerlink" title="Firebase 的两个主要目标"></a>Firebase 的两个主要目标</h2><p>分别是,帮助App开发和App增长</p><p>App 开发下包括</p><ul><li>Realtime Database </li><li>Hosting</li><li>Authentication</li><li>Cloud Functions</li><li>Cloud Storage </li><li>Crash Reporting</li><li>Test Lab</li><li>Performance</li></ul><p>App增长包括</p><ul><li>Analytics</li><li>Cloud Message</li><li>Dynamic Links</li><li>Remote Config</li><li>Invites</li><li>App Indexing</li><li>AdMob</li><li>AdWords</li></ul><a id="more"></a><h2 id="Firebase-目前支持的平台"><a href="#Firebase-目前支持的平台" class="headerlink" title="Firebase 目前支持的平台"></a>Firebase 目前支持的平台</h2><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-03-15096303328484.jpg" alt=""></p><h2 id="Firebase-的改变"><a href="#Firebase-的改变" class="headerlink" title="Firebase 的改变"></a>Firebase 的改变</h2><h2 id="与Fabrice-合作"><a href="#与Fabrice-合作" class="headerlink" title="与Fabrice 合作"></a>与Fabrice 合作</h2><h3 id="Crashlytics"><a href="#Crashlytics" class="headerlink" title="Crashlytics"></a>Crashlytics</h3><p> Firebase 与 Fabric 合作，为Firebase 带来Crashlytics 分析工具</p><h3 id="Firebase-Auth"><a href="#Firebase-Auth" class="headerlink" title="Firebase Auth"></a>Firebase Auth</h3><ul><li>由Digitls 发展过来，不需要迁移</li><li>支持第三方email</li><li>支持Google sign</li><li>支持电话短信认证</li><li>支持完全的定制化，也就是提供API可以自己定制UI</li><li>10000次每个月的验证</li></ul><blockquote><p>如果用户已经在别的应用上使用过这个SDK验证，这里将不用再重新验证</p></blockquote><h2 id="更快，更容易的构建"><a href="#更快，更容易的构建" class="headerlink" title="更快，更容易的构建"></a>更快，更容易的构建</h2><h3 id="Cloud-Function"><a href="#Cloud-Function" class="headerlink" title="Cloud Function"></a>Cloud Function</h3><p>使用Javascript方法编写方法，可以通过URL直接访问方法，也能通过Firebase event 事件触发方法。例如，用户上传了图片，可以通过触发function 进行压缩</p><h3 id="Hosting"><a href="#Hosting" class="headerlink" title="Hosting"></a>Hosting</h3><p>一个静态网页托管地方（我又想到了博客。。。），自带CDN。当然可以使用Function 功能构建web App</p><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>就是Google Cloud Storage 。 搬过来之后之后选存储地点</p><h3 id="Realtime-Database"><a href="#Realtime-Database" class="headerlink" title="Realtime Database"></a>Realtime Database</h3><p>实时数据库</p><h2 id="提高应用质量"><a href="#提高应用质量" class="headerlink" title="提高应用质量"></a>提高应用质量</h2><h3 id="Crash-Reporting"><a href="#Crash-Reporting" class="headerlink" title="Crash Reporting"></a>Crash Reporting</h3><h3 id="Test-Lab"><a href="#Test-Lab" class="headerlink" title="Test Lab"></a>Test Lab</h3><p>支持实际设备和虚拟设备，仅仅需要上传自己的App上去，会有机器人自动帮你点击。完事之后会发送错误logs,同时还有视频录像帮助你定位问题。新支持设备 三星 Galaxy s7 和 Pixel</p><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>Performance 监视器支持现实响应时间，payload 大小，下载时间</p><h2 id="增长和吸引更多用户"><a href="#增长和吸引更多用户" class="headerlink" title="增长和吸引更多用户"></a>增长和吸引更多用户</h2><h3 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h3><p>可以对你的用户进行分类，并对用户打上标签，并且针对这一类用户进行发送不同的信息。</p><h4 id="StreamView"><a href="#StreamView" class="headerlink" title="StreamView"></a>StreamView</h4><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-03-15096910073609.jpg" alt=""></p><p>提供实时用户数据，并且显示到 地图上</p><h4 id="DebugView"><a href="#DebugView" class="headerlink" title="DebugView"></a>DebugView</h4><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-03-15096911688880.jpg" alt=""></p><h3 id="BigQuery"><a href="#BigQuery" class="headerlink" title="BigQuery"></a>BigQuery</h3><p>让你有能力可以使用一种类似SQL的语言导出和投出数据到各种不一样的方法</p><h3 id="Firebase-Cloud-Message"><a href="#Firebase-Cloud-Message" class="headerlink" title="Firebase Cloud Message"></a>Firebase Cloud Message</h3><p>支持三个平台， iOS ，Android 和 Web</p><h3 id="Remote-Config"><a href="#Remote-Config" class="headerlink" title="Remote Config"></a>Remote Config</h3><p>就像文字上说的那样，提供一个远程配置的功能，就是通过key，value的方式获取数据。例如，你可以制造一个开关，只是对一部分人群开始来测试。</p><h3 id="Fastline"><a href="#Fastline" class="headerlink" title="Fastline "></a><a href="https://fastlane.tools/" target="_blank" rel="noopener">Fastline </a></h3><p>一个自动帮你搞掂发布的的工具，包括帮你截图。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Firebase-的两个主要目标&quot;&gt;&lt;a href=&quot;#Firebase-的两个主要目标&quot; class=&quot;headerlink&quot; title=&quot;Firebase 的两个主要目标&quot;&gt;&lt;/a&gt;Firebase 的两个主要目标&lt;/h2&gt;&lt;p&gt;分别是,帮助App开发和App增长&lt;/p&gt;
&lt;p&gt;App 开发下包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Realtime Database &lt;/li&gt;
&lt;li&gt;Hosting&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Cloud Functions&lt;/li&gt;
&lt;li&gt;Cloud Storage &lt;/li&gt;
&lt;li&gt;Crash Reporting&lt;/li&gt;
&lt;li&gt;Test Lab&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;App增长包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analytics&lt;/li&gt;
&lt;li&gt;Cloud Message&lt;/li&gt;
&lt;li&gt;Dynamic Links&lt;/li&gt;
&lt;li&gt;Remote Config&lt;/li&gt;
&lt;li&gt;Invites&lt;/li&gt;
&lt;li&gt;App Indexing&lt;/li&gt;
&lt;li&gt;AdMob&lt;/li&gt;
&lt;li&gt;AdWords&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.47log.com/tags/Android/"/>
    
      <category term="firebase" scheme="http://blog.47log.com/tags/firebase/"/>
    
      <category term="googleio" scheme="http://blog.47log.com/tags/googleio/"/>
    
      <category term="2017" scheme="http://blog.47log.com/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>提速Android Gradle 构建</title>
    <link href="http://blog.47log.com/2017/10/31/2017-10-31-04:38/"/>
    <id>http://blog.47log.com/2017/10/31/2017-10-31-04:38/</id>
    <published>2017-10-31T04:38:48.000Z</published>
    <updated>2018-06-03T12:19:00.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提速法则一览"><a href="#提速法则一览" class="headerlink" title="提速法则一览"></a>提速法则一览</h2><table><thead><tr><th>手段</th><th>全量构建</th><th>Java增量构建</th><th>资源增量构建</th></tr></thead><tbody><tr><td>升级 android gradle tools 到3.0</td><td>-15s(-25%)</td><td>-10(-38%)</td><td>-2.5(-16%)</td></tr><tr><td>避免使用遗留的Multidex</td><td>-5.5s(-12%)</td><td>-8(53%)</td><td>same</td></tr><tr><td>debug 环境关闭multi-APK</td><td>-4.8s(-12%)</td><td>-0.5s(-6%)</td><td>-3s(-26%)</td></tr><tr><td>设置包含最少的资源</td><td>-6s(-17%)</td><td>-1.5s(-24%)</td><td>-2s(21%)</td></tr><tr><td>关闭 png crunching</td><td>-9s(-33%)</td><td>same</td><td>same</td></tr><tr><td>使用Instance Run</td><td>+7s(+37%)</td><td>-3s(-54%)</td><td>-3s(-42%)</td></tr><tr><td>避免不注意的改变</td><td>-</td><td>-</td><td>-</td></tr><tr><td>不要使用动态版本号</td><td>-</td><td>-</td><td>-</td></tr><tr><td>注意分配 gradle 内存</td><td>-</td><td>-</td><td>-</td></tr><tr><td>开启 Gradle Caching</td><td>-7s(-25%)</td><td>same</td><td>+0.5s(+12%)</td></tr><tr><td>使用<code>implementation</code> 或者 <code>api</code> 代替 <code>compile</code></td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>以上优化方案基于android gradle tools 3.0-alpha</p><blockquote><p>关于<a href="https://github.com/google/santa-tracker-android" target="_blank" rel="noopener">Santa Tracker Project</a></p></blockquote><blockquote><ul><li>9 个模块，包括Wear</li><li>500 多个Java文件</li><li>1700 个XML 文件，3500张PNG</li><li>Multi-dex</li><li>没有 annotation processors</li><li>APK大小接近60MB</li></ul></blockquote><p>这个项目可以在Google Github 帐号中找到</p><a id="more"></a><h2 id="优化方案详解"><a href="#优化方案详解" class="headerlink" title="优化方案详解"></a>优化方案详解</h2><h4 id="避免使用遗留的MultiDex"><a href="#避免使用遗留的MultiDex" class="headerlink" title="避免使用遗留的MultiDex"></a>避免使用遗留的MultiDex</h4><ul><li>遗留的multidex是指使用了MultiDex 并且minSDkVersion &lt; 21</li><li>遗留的multidex会导致构建的时候签名速度变慢</li><li>使用Android Studio 2.3+ IDE构建的时候，会自动避免这样的状况</li></ul><p>也就是说，使用点击AS运行的按钮，这个不需要配置。</p><h4 id="关闭-multi-APK"><a href="#关闭-multi-APK" class="headerlink" title="关闭 multi-APK"></a>关闭 multi-APK</h4><p>multi-apk 是为了根据配置生成不同的APK，以达到减少APK体积大小的问题。但是这个配置没有必要在开发的时候开启。</p><h5 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h5><ol><li>设置监测到flag 就关闭代码</li></ol><pre><code><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    android&#123;</span><br><span class="line">        <span class="keyword">if</span>(project.hasProperty(<span class="string">'devBuild'</span>))&#123;</span><br><span class="line">            splits.abi.enable = <span class="literal">false</span></span><br><span class="line">            splits.density.enable = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在AS设定中加入flag</span><br><span class="line">    ![](<span class="string">http:</span><span class="comment">//7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094320380595.jpg)</span></span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 或者使用gradlew 构建</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    ./gradlew <span class="string">app:</span>assembleDebug -PdevBuild</span><br></pre></td></tr></table></figure></code></pre><h4 id="包含最少的资源"><a href="#包含最少的资源" class="headerlink" title="包含最少的资源"></a>包含最少的资源</h4><p>如果你的app是包含多资源的，比如多语言的和多分辨率。但是在开发的时候，大部分时间都是只用一种资源，所以其他资源就会无用，导致拖慢构建速度。</p><p>以下是固定使用某种资源的办法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">productFlavors&#123;</span><br><span class="line">    development&#123;</span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        resConfigs (<span class="string">"en"</span>,<span class="string">"xxhdpi"</span>)</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭-png-压缩"><a href="#关闭-png-压缩" class="headerlink" title="关闭 png 压缩"></a>关闭 png 压缩</h4><p>png 在 android build tools 里面是默认开启的。这个功能可以使你构建更小的apk，但是在debug构建中，我们并不需要这个功能，所以，应该在debug构建的时候禁止。</p><p>禁止方法就是使用关闭multi-APK 一样的标记</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">       <span class="keyword">if</span>(project.hasProperty(<span class="string">'devBuild'</span>))&#123;</span><br><span class="line">           splits.abi.enable = <span class="literal">false</span></span><br><span class="line">           splits.density.enable = <span class="literal">false</span></span><br><span class="line">           aaptOptions.cruncherEnabled = <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>添加标记的方法同关闭 multi-APK 的一样</p><blockquote><p>当然你可以把图片转换到webp , 如果你的PNG已经压缩过的也可以完全关闭这个功能</p></blockquote><h4 id="使用-Instant-Run"><a href="#使用-Instant-Run" class="headerlink" title="使用 Instant Run"></a>使用 Instant Run</h4><p>Instant Run 已经要求最低API 为21 ，各方面的兼容性都好了很多，推荐使用。<br>当然完整编译是需要更长的时间的</p><h4 id="避免不注意的改变"><a href="#避免不注意的改变" class="headerlink" title="避免不注意的改变"></a>避免不注意的改变</h4><p><strong>栗子</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> buildDateTime = <span class="keyword">new</span> Date().format(<span class="string">'yyMMddHHmm'</span>).toInteger()</span><br><span class="line">android&#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        versionCode buildDateTime</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个操作看起来很合理，每次构建的时候都可以获得唯一的versionCode，这样每次测试就能根据versionCode 来告诉你问题所在。但是，对于debug构建来说，这不是一个好的设置。这个设置会导致 AndroidManifest 改变 , AndroidManifest 改变会导致增量编译的时间增加。</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094385826761.jpg" alt="Manifest 改变对于编译的影响"></p><h5 id="Crashlytics"><a href="#Crashlytics" class="headerlink" title="Crashlytics"></a>Crashlytics</h5><p>Crashlytics 是个很好的开发工具，如果你使用得正确的话。Crashlytics 每次构建的时候都会生成唯一的ID，关掉这个ID可以加快构建速度。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.fabric'</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        debug&#123;</span><br><span class="line">            ext.alwaysUpdateBuildId = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不要使用动态版本号"><a href="#不要使用动态版本号" class="headerlink" title="不要使用动态版本号"></a>不要使用动态版本号</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    dependencies&#123;</span><br><span class="line">        compile <span class="string">'com.android.suport:appcompat-v7:+'</span>        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的依赖使用了动态版本号来设置使用最新的版本号。但是这样会导致gradle每24小时就要联网检查最新的版本，增加了构建的时间。同时，这样使用会导致你的构建不稳定，可能今天还能构建成功，但是明天就失败了</p><h4 id="注意分配-Gradle-内存"><a href="#注意分配-Gradle-内存" class="headerlink" title="注意分配 Gradle 内存"></a>注意分配 Gradle 内存</h4><p>在新建一个项目的时候，默认在 gradle.properties 中设置了 gradle 使用的内存为1.5G，这可能是个好的值，也可能不是,取决你你项目的大小，越大的项目需要越大的内存</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094404747010.jpg" style="width: 100%"></p><h4 id="开启-Gradle-缓存"><a href="#开启-Gradle-缓存" class="headerlink" title="开启 Gradle 缓存"></a>开启 Gradle 缓存</h4><p>这是 Gradle 3.5的新特性 ,和 2.3 build chache 是不一样的，可以接受任何系之前的构建，任何的地点的构建。<br>开启代码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.caching = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="使用implementation-或者-api-代替-compile"><a href="#使用implementation-或者-api-代替-compile" class="headerlink" title="使用implementation 或者 api 代替 compile"></a>使用<code>implementation</code> 或者 <code>api</code> 代替 <code>compile</code></h4><p>假设你有如图这几个项目<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094467796965.jpg" style="width : 100%"></p><p>app 依赖与lib1,lib1依赖于 lib2，但是，app只使用了lib1提供的公共api。如果使用<code>compile</code> 关键字，当你更改lib2的时候，app,lib1 都要重新编译。但是，如果app 是使用<code>implementtation</code>依赖lib1的时候，lib2 就算发生更改，app也不需要重新编译。</p><blockquote><p>所以我们在编写库的时候，如果库依赖的库不想曝光给使用者，建议使用<code>implementation</code>,如果你想把自己使用的库曝光给使用者，请使用 <code>api</code> 关键字</p></blockquote><h2 id="额外提及"><a href="#额外提及" class="headerlink" title="额外提及"></a>额外提及</h2><h3 id="模块化好处"><a href="#模块化好处" class="headerlink" title="模块化好处"></a>模块化好处</h3><ul><li>Gradle 可以构建平行的构建模块</li><li>缺乏增量任务的变通方法</li><li>多模块代表着多任务,多任务代表着可以平行执行</li><li>Some parallelism within a task is provided but limited（自己看吧，我也看不懂）</li></ul><h3 id="如何调试缓慢构建"><a href="#如何调试缓慢构建" class="headerlink" title="如何调试缓慢构建"></a>如何调试缓慢构建</h3><p>Gradle 提供了工具去帮助知道哪里花了大部分时间</p><ul><li>–dry-run</li><li>–info</li><li>–profile</li><li>Gradle profile </li></ul><h5 id="–dry-run"><a href="#–dry-run" class="headerlink" title="–dry-run"></a>–dry-run</h5><p>可以让你知道花费了多少时间在 <code>configuration</code> 上,10s以内是最好的，如果配置的时间过长，你的方法gradle 已经出了问题了。</p><p>使用方法：<code>gradle yourtask --dry-run</code></p><h5 id="–info"><a href="#–info" class="headerlink" title="–info"></a>–info</h5><p>这个参数可以告诉你，当前任务执行的详细信息，包括在执行什么，还有为什么执行。</p><p>使用方法：<code>gradle yourtask --info</code></p><h5 id="–profile"><a href="#–profile" class="headerlink" title="–profile"></a>–profile</h5><p>这个参数会在 <code>you-project/build/reports/profile、</code> 中生成一个html文件，详细告诉你哪个任务花了多少时间，是个非常有用的debug工具</p><p>使用方法：<code>gradle build --profile</code></p><h5 id="Gradle-Profiler"><a href="#Gradle-Profiler" class="headerlink" title="Gradle Profiler"></a>Gradle Profiler</h5><p><a href="https://github.com/gradle/gradle-profiler" target="_blank" rel="noopener">Gradle Profiler</a> 是 Gradle 官方用于自动收集Gradle构建的分析和基准测试信息的工具。具体的使用办法在 github 上有，以后有必要再出个专题吧。这个工具是当上面的办法都无效的时候才推荐使用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提速法则一览&quot;&gt;&lt;a href=&quot;#提速法则一览&quot; class=&quot;headerlink&quot; title=&quot;提速法则一览&quot;&gt;&lt;/a&gt;提速法则一览&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;手段&lt;/th&gt;
&lt;th&gt;全量构建&lt;/th&gt;
&lt;th&gt;Java增量构建&lt;/th&gt;
&lt;th&gt;资源增量构建&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;升级 android gradle tools 到3.0&lt;/td&gt;
&lt;td&gt;-15s(-25%)&lt;/td&gt;
&lt;td&gt;-10(-38%)&lt;/td&gt;
&lt;td&gt;-2.5(-16%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;避免使用遗留的Multidex&lt;/td&gt;
&lt;td&gt;-5.5s(-12%)&lt;/td&gt;
&lt;td&gt;-8(53%)&lt;/td&gt;
&lt;td&gt;same&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;debug 环境关闭multi-APK&lt;/td&gt;
&lt;td&gt;-4.8s(-12%)&lt;/td&gt;
&lt;td&gt;-0.5s(-6%)&lt;/td&gt;
&lt;td&gt;-3s(-26%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设置包含最少的资源&lt;/td&gt;
&lt;td&gt;-6s(-17%)&lt;/td&gt;
&lt;td&gt;-1.5s(-24%)&lt;/td&gt;
&lt;td&gt;-2s(21%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;关闭 png crunching&lt;/td&gt;
&lt;td&gt;-9s(-33%)&lt;/td&gt;
&lt;td&gt;same&lt;/td&gt;
&lt;td&gt;same&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用Instance Run&lt;/td&gt;
&lt;td&gt;+7s(+37%)&lt;/td&gt;
&lt;td&gt;-3s(-54%)&lt;/td&gt;
&lt;td&gt;-3s(-42%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;避免不注意的改变&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不要使用动态版本号&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;注意分配 gradle 内存&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开启 Gradle Caching&lt;/td&gt;
&lt;td&gt;-7s(-25%)&lt;/td&gt;
&lt;td&gt;same&lt;/td&gt;
&lt;td&gt;+0.5s(+12%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用&lt;code&gt;implementation&lt;/code&gt; 或者 &lt;code&gt;api&lt;/code&gt; 代替 &lt;code&gt;compile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上优化方案基于android gradle tools 3.0-alpha&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于&lt;a href=&quot;https://github.com/google/santa-tracker-android&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Santa Tracker Project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;9 个模块，包括Wear&lt;/li&gt;
&lt;li&gt;500 多个Java文件&lt;/li&gt;
&lt;li&gt;1700 个XML 文件，3500张PNG&lt;/li&gt;
&lt;li&gt;Multi-dex&lt;/li&gt;
&lt;li&gt;没有 annotation processors&lt;/li&gt;
&lt;li&gt;APK大小接近60MB&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个项目可以在Google Github 帐号中找到&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.47log.com/tags/Android/"/>
    
      <category term="googleio" scheme="http://blog.47log.com/tags/googleio/"/>
    
      <category term="2017" scheme="http://blog.47log.com/tags/2017/"/>
    
      <category term="gradle" scheme="http://blog.47log.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Activity 启动模式</title>
    <link href="http://blog.47log.com/2017/10/25/2017-10-25-15:04/"/>
    <id>http://blog.47log.com/2017/10/25/2017-10-25-15:04/</id>
    <published>2017-10-25T15:04:51.000Z</published>
    <updated>2018-06-03T12:19:00.387Z</updated>
    
    <content type="html"><![CDATA[<p>启动模式分为4种，分别为</p><ol><li>Standrad </li><li>SingleTop</li><li>SingleTask</li><li>SingleIntance </li></ol><h3 id="Standrad"><a href="#Standrad" class="headerlink" title="Standrad"></a>Standrad</h3><p>就是默认的模式，启动多少个就是多少个</p><h3 id="SingleTop"><a href="#SingleTop" class="headerlink" title="SingleTop"></a>SingleTop</h3><p>SingleTop 需要这样理解，SingleOnTop,当栈顶是我的时候，就不再创建新的实例。<br>例如，ABCD，启动D，还是ABCD。如果是ABDC，启动D，最后就变成ABDCD。</p><h3 id="SingleTask"><a href="#SingleTask" class="headerlink" title="SingleTask"></a>SingleTask</h3><p>SingleOnTask的意思，我在这个任务栈是唯一的。需要注意的是，这货启动是默认自带clearTop效果的，也就是会把在它之后的Activity都清楚掉。<br>例如，任务栈中有ABDC，启动D，将会变成ABD，C将会被自动推出。</p><h3 id="SingleIntance"><a href="#SingleIntance" class="headerlink" title="SingleIntance"></a>SingleIntance</h3><p>这个可以看做是SingleTask加强版，使用这个属性的Activity，将会被单独放在一个任务栈中，然后这个Activity在进程中都是唯一个的</p><a id="more"></a><h2 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h2><p> A 属于栈1,BC 属于栈2,A 为<code>standard</code> 模式,BC都是为<code>singleTask</code>模式。启动方式为这样 A-&gt;B-&gt;C-&gt;A-&gt;B。这样启动的时候，用户按下返回键就是桌面了。问题主要是在最后启动的B上，singleTask 自带clearTop 属性，将会把CA清除出去，A 和 B 又不是在相同的任务栈上，所以就回到桌面了。</p><h2 id="启动Activity的一些常用的FLAG"><a href="#启动Activity的一些常用的FLAG" class="headerlink" title="启动Activity的一些常用的FLAG"></a>启动Activity的一些常用的FLAG</h2><h4 id="FLAG-ACTIVITY-NEW-TASK"><a href="#FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="FLAG_ACTIVITY_NEW_TASK"></a>FLAG_ACTIVITY_NEW_TASK</h4><p> 其实就是<code>SingleTask</code> 模式</p><h4 id="FLAG-ACTIVITY-SINGLE-TOP"><a href="#FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP"></a>FLAG_ACTIVITY_SINGLE_TOP</h4><p>就是<code>singletop</code></p><h4 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h4><p>清除在他最子上的活动，配合<code>NEW_TASK</code>使用</p><h4 id="FLAG-ACTIVITY-EXECULE-FROM-RECENTS"><a href="#FLAG-ACTIVITY-EXECULE-FROM-RECENTS" class="headerlink" title="FLAG_ACTIVITY_EXECULE_FROM_RECENTS"></a>FLAG_ACTIVITY_EXECULE_FROM_RECENTS</h4><p>不出现在最近应用列表中</p><h2 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h2><p><code>singleTop</code>的Activity，用<code>startActivityForResult</code> 启动的时候是立刻返回值的，但是是错误的result</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;启动模式分为4种，分别为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Standrad &lt;/li&gt;
&lt;li&gt;SingleTop&lt;/li&gt;
&lt;li&gt;SingleTask&lt;/li&gt;
&lt;li&gt;SingleIntance &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Standrad&quot;&gt;&lt;a href=&quot;#Standrad&quot; class=&quot;headerlink&quot; title=&quot;Standrad&quot;&gt;&lt;/a&gt;Standrad&lt;/h3&gt;&lt;p&gt;就是默认的模式，启动多少个就是多少个&lt;/p&gt;
&lt;h3 id=&quot;SingleTop&quot;&gt;&lt;a href=&quot;#SingleTop&quot; class=&quot;headerlink&quot; title=&quot;SingleTop&quot;&gt;&lt;/a&gt;SingleTop&lt;/h3&gt;&lt;p&gt;SingleTop 需要这样理解，SingleOnTop,当栈顶是我的时候，就不再创建新的实例。&lt;br&gt;例如，ABCD，启动D，还是ABCD。如果是ABDC，启动D，最后就变成ABDCD。&lt;/p&gt;
&lt;h3 id=&quot;SingleTask&quot;&gt;&lt;a href=&quot;#SingleTask&quot; class=&quot;headerlink&quot; title=&quot;SingleTask&quot;&gt;&lt;/a&gt;SingleTask&lt;/h3&gt;&lt;p&gt;SingleOnTask的意思，我在这个任务栈是唯一的。需要注意的是，这货启动是默认自带clearTop效果的，也就是会把在它之后的Activity都清楚掉。&lt;br&gt;例如，任务栈中有ABDC，启动D，将会变成ABD，C将会被自动推出。&lt;/p&gt;
&lt;h3 id=&quot;SingleIntance&quot;&gt;&lt;a href=&quot;#SingleIntance&quot; class=&quot;headerlink&quot; title=&quot;SingleIntance&quot;&gt;&lt;/a&gt;SingleIntance&lt;/h3&gt;&lt;p&gt;这个可以看做是SingleTask加强版，使用这个属性的Activity，将会被单独放在一个任务栈中，然后这个Activity在进程中都是唯一个的&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://blog.47log.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Bitmap.Config 一些理解</title>
    <link href="http://blog.47log.com/2017/10/25/2017-10-25-14:12/"/>
    <id>http://blog.47log.com/2017/10/25/2017-10-25-14:12/</id>
    <published>2017-10-25T14:12:36.000Z</published>
    <updated>2018-06-03T12:18:59.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bitmap-Config-解析"><a href="#Bitmap-Config-解析" class="headerlink" title="Bitmap Config 解析"></a>Bitmap Config 解析</h2><table><thead><tr><th style="text-align:left"><a href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html" target="_blank" rel="noopener">Bitmap.Config</a></th><th></th></tr></thead><tbody><tr><td style="text-align:left"><code>ALPHA_8</code></td><td>每个像素存储为单透明（alpha）通道。其实就是保存透明度而已</td></tr><tr><td style="text-align:left"><code>ARGB_4444</code></td><td>已经废弃的格式,推荐使用<code>ARGB_8888</code></td></tr><tr><td style="text-align:left"><code>ARGB_8888</code></td><td>每个像素存储在4个Byte上,其实就是ARGB分别占用8bit的意思</td></tr><tr><td style="text-align:left"><code>HARDWARE</code></td><td>特殊配置，当位图只存储在图形内存中。</td></tr><tr><td style="text-align:left"><code>RGBA_F16</code></td><td>每个像素存储在8个Byte上，这个我不太看得懂，就是RGBA 格式保存，每一个占用16bit,F并不知道是什么意思</td></tr><tr><td style="text-align:left"><code>RGBA_F16</code></td><td>每个像素存储在8个Byte上，这个我不太看得懂，就是RGBA 格式保存，每一个占用16bit,F并不知道是什么意思</td></tr><tr><td style="text-align:left"><code>RGB_565</code></td><td>每个像素存储在2个Byte上，只有RGB通道被编码：红色以5位精度（32个可能值）存储，绿色以6位精度存储（64个可能值），蓝色存储5位精确。</td></tr></tbody></table><h2 id="位图占用内存计算"><a href="#位图占用内存计算" class="headerlink" title="位图占用内存计算"></a>位图占用内存计算</h2><p>例：<br>选择的是<code>ARGB_8888</code> 分辨率为 <strong>100*100</strong> 的位图。<br>占用的内存应该是</p><pre><code>100 * 100 * 4 = 40000 Byte = 39kB</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只要记住符号上表示的是bit就很容易计算Bitmap在内存中占用的大小了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Bitmap-Config-解析&quot;&gt;&lt;a href=&quot;#Bitmap-Config-解析&quot; class=&quot;headerlink&quot; title=&quot;Bitmap Config 解析&quot;&gt;&lt;/a&gt;Bitmap Config 解析&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.47log.com/tags/Android/"/>
    
      <category term="Bitmap" scheme="http://blog.47log.com/tags/Bitmap/"/>
    
  </entry>
  
  <entry>
    <title>快速配置shadowsocks主机</title>
    <link href="http://blog.47log.com/2017/10/23/2017-10-23-02:03/"/>
    <id>http://blog.47log.com/2017/10/23/2017-10-23-02:03/</id>
    <published>2017-10-23T02:03:57.000Z</published>
    <updated>2018-06-03T12:19:00.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分为步骤"><a href="#分为步骤" class="headerlink" title="分为步骤"></a>分为步骤</h2><ol><li>选择系统为centos7</li><li>更新kernel 为4.1 以上</li><li>开启bbr</li><li>安装docker-ce环境</li><li>使用shadowsock-docker部署ss</li></ol><h3 id="系统选择"><a href="#系统选择" class="headerlink" title="系统选择"></a>系统选择</h3><p>各大主机提供商不太一样，这段靠自己吧</p><h3 id="更新kernel"><a href="#更新kernel" class="headerlink" title="更新kernel"></a>更新kernel</h3><p>执行以下bash</p><script src="https://gist.github.com/hangox/a9b977a9c026629101c38d5e6a2b4e76.js"></script><p>或者直接在命令行上敲</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://gist.githubusercontent.com/hangox/a9b977a9c026629101c38d5e6a2b4e76/raw/d97e16123218c068c024a12019e1a403ef47981f/update-kernel-for-centos7.sh | bash</span><br></pre></td></tr></table></figure><p>执行完成脚本之后将会重启系统，耐心等候重启就好了</p><a id="more"></a><h2 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h2><p>开启google 家的bbr会有很大提速效果，而且访问网络会更稳定</p><h3 id="脚本如下"><a href="#脚本如下" class="headerlink" title="脚本如下"></a>脚本如下</h3><script src="https://gist.github.com/hangox/1b7c6b1e675cba36e654e5d9f546085d.js"></script><h3 id="直接执行脚本"><a href="#直接执行脚本" class="headerlink" title="直接执行脚本"></a>直接执行脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://gist.githubusercontent.com/hangox/1b7c6b1e675cba36e654e5d9f546085d/raw/4e416c709187f914a919e6f6a9ba22fcd611cf74/<span class="built_in">enable</span>-bbr.sh | bash</span><br></pre></td></tr></table></figure><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><h3 id="脚本如下-1"><a href="#脚本如下-1" class="headerlink" title="脚本如下"></a>脚本如下</h3><script src="https://gist.github.com/hangox/e9fa4ff3a91840370e2974fb68c7ae07.js"></script><h3 id="或者直接执行"><a href="#或者直接执行" class="headerlink" title="或者直接执行"></a>或者直接执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://gist.githubusercontent.com/hangox/e9fa4ff3a91840370e2974fb68c7ae07/raw/18f70717bb2c486c67ad4f8e9dc21a3b125c04ef/install-docker-ce-for-centos7.sh | bash</span><br></pre></td></tr></table></figure><h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1984:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k <span class="variable">$SSPASSWORD</span> -m aes-256-cfb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分为步骤&quot;&gt;&lt;a href=&quot;#分为步骤&quot; class=&quot;headerlink&quot; title=&quot;分为步骤&quot;&gt;&lt;/a&gt;分为步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选择系统为centos7&lt;/li&gt;
&lt;li&gt;更新kernel 为4.1 以上&lt;/li&gt;
&lt;li&gt;开启bbr&lt;/li&gt;
&lt;li&gt;安装docker-ce环境&lt;/li&gt;
&lt;li&gt;使用shadowsock-docker部署ss&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;系统选择&quot;&gt;&lt;a href=&quot;#系统选择&quot; class=&quot;headerlink&quot; title=&quot;系统选择&quot;&gt;&lt;/a&gt;系统选择&lt;/h3&gt;&lt;p&gt;各大主机提供商不太一样，这段靠自己吧&lt;/p&gt;
&lt;h3 id=&quot;更新kernel&quot;&gt;&lt;a href=&quot;#更新kernel&quot; class=&quot;headerlink&quot; title=&quot;更新kernel&quot;&gt;&lt;/a&gt;更新kernel&lt;/h3&gt;&lt;p&gt;执行以下bash&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/hangox/a9b977a9c026629101c38d5e6a2b4e76.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;或者直接在命令行上敲&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -o- -L https://gist.githubusercontent.com/hangox/a9b977a9c026629101c38d5e6a2b4e76/raw/d97e16123218c068c024a12019e1a403ef47981f/update-kernel-for-centos7.sh | bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行完成脚本之后将会重启系统，耐心等候重启就好了&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://blog.47log.com/tags/docker/"/>
    
      <category term="shadowosocks" scheme="http://blog.47log.com/tags/shadowosocks/"/>
    
  </entry>
  
  <entry>
    <title>算法，两个排序数组的中位数</title>
    <link href="http://blog.47log.com/2017/10/20/2017-10-20-03:28/"/>
    <id>http://blog.47log.com/2017/10/20/2017-10-20-03:28/</id>
    <published>2017-10-20T03:28:21.000Z</published>
    <updated>2018-06-03T12:19:00.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有两个已排序的数组nums1和nums2分别为m和n大小。<br>找到两个排序数组的中位数。整体运行时间复杂度应为O（log（m + n））。</p><p>示例1：<br>nums1 = [1,3]<br>nums2 = [2]</p><p>中位数为2.0</p><p>示例2：<br>nums1 = [1,2]<br>nums2 = [3,4]</p><p>中位数为（2 + 3）/ 2 = 2.5</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个其实很简单，都是已经排序的数组了，直接重新排成一个数组，走到一半就知道哪个是中位数了</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 我的解法，时间为O(m+n)，空间也是</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nums1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nums2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> length = nums1.length + nums2.length;</span><br><span class="line">       <span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">       <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> minValue;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (p1 &gt;= nums1.length) &#123;</span><br><span class="line">               minValue = nums2[p2++];</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 &gt;= nums2.length) &#123;</span><br><span class="line">               minValue = nums1[p1++];</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class="line">                   minValue = nums1[p1++];</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   minValue = nums2[p2++];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           list[i] = minValue;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> midIndex = length / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">return</span> length % <span class="number">2</span> == <span class="number">0</span> ?(list[midIndex - <span class="number">1</span>] + list[midIndex]) / <span class="number">2F</span> : list[midIndex];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;有两个已排序的数组nums1和nums2分别为m和n大小。&lt;br&gt;找到两个排序数组的中位数。整体运行时间复杂度应为O（log（m + n））
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.47log.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>配置 Groovy 写Android JUnit</title>
    <link href="http://blog.47log.com/2017/10/16/2017-10-16-15:51/"/>
    <id>http://blog.47log.com/2017/10/16/2017-10-16-15:51/</id>
    <published>2017-10-16T15:51:40.000Z</published>
    <updated>2018-06-03T12:19:00.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用Groovy写JUnit"><a href="#为什么使用Groovy写JUnit" class="headerlink" title="为什么使用Groovy写JUnit"></a>为什么使用Groovy写JUnit</h2><p><code>Groovy</code> 是动态语言，动态语言干测试其实非常好用。比如，我要创建一个多种类型的数组，只要这样写<code>def array = [12,12,&#39;1212&#39;]</code> 这样我就很简单的创建了多种类型的数组了。如果是用java代码的话，你可以尝试一下需要多少行。groovy的优点不只是这些，详情请看Groovy的特性</p><h2 id="Android中的配置方法"><a href="#Android中的配置方法" class="headerlink" title="Android中的配置方法"></a>Android中的配置方法</h2><p>在Android中需要使用Groovy需要使用<a href="https://github.com/groovy/groovy-android-gradle-plugin" target="_blank" rel="noopener">这个开源项目</a>,里面有详细的配置说明。但是我按那个配置，老是编译不过，改了一下就可以了，就写下自己的办法吧。</p><h3 id="配置buildScript"><a href="#配置buildScript" class="headerlink" title="配置buildScript"></a>配置buildScript</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    </span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.0.0-beta7'</span></span><br><span class="line">        <span class="comment">//groovy插件依赖</span></span><br><span class="line">        classpath <span class="string">'org.codehaus.groovy:groovy-android-gradle-plugin:1.2.0'</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在需要使用的项目中，加入插件"><a href="#在需要使用的项目中，加入插件" class="headerlink" title="在需要使用的项目中，加入插件"></a>在需要使用的项目中，加入插件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'groovyx.android'</span></span><br></pre></td></tr></table></figure><h3 id="添加groovy依赖"><a href="#添加groovy依赖" class="headerlink" title="添加groovy依赖"></a>添加groovy依赖</h3><blockquote><p>我这里只是使用Groovy 作为测试使用，所以我是用的是<code>testImplementation</code>,如果要在开发中使用Groovy,请改为<code>implementation</code> 就可以了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"><span class="comment">//使用官方推荐的反而不行</span></span><br><span class="line"><span class="comment">//    testImplementation 'org.codehaus.groovy:groovy:2.4.11:grooid'</span></span><br><span class="line"><span class="comment">//我该为了java使用的Groovy就可以了</span></span><br><span class="line">    testImplementation <span class="string">'org.codehaus.groovy:groovy-all:2.4.12'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation(<span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span>, &#123;</span><br><span class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h3><p>在<code>test/groovy</code>文件夹中建立你的Groovy 脚本，开始开发吧</p><p><a href="https://github.com/hangox/AndroidTestWithGroovy.git" target="_blank" rel="noopener">示例项目</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么使用Groovy写JUnit&quot;&gt;&lt;a href=&quot;#为什么使用Groovy写JUnit&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Groovy写JUnit&quot;&gt;&lt;/a&gt;为什么使用Groovy写JUnit&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Groo
      
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.47log.com/tags/Android/"/>
    
      <category term="Groovy" scheme="http://blog.47log.com/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>算法，最长子串问题</title>
    <link href="http://blog.47log.com/2017/10/14/2017-10-14-14:54/"/>
    <id>http://blog.47log.com/2017/10/14/2017-10-14-14:54/</id>
    <published>2017-10-14T14:54:06.000Z</published>
    <updated>2018-06-03T12:19:00.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个字符串，找到最长子串的长度，而不重复字符。</p><p>例子：</p><p>给定”abcabcbb”的答案是”abc”，长度是3。<br>给定”bbbbb”的答案是”b”，长度为1。<br>给定”pwwkew”的答案是”wke”，长度为3.请注意，答案必须是子字符串，”pwke”是子序列，而不是子字符串。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>暴力破解，把每种可能都列出来，这样自然就知道最长是什么了，算法时间复杂度为<code>O(logn)</code>，空间复杂度为<code>O(n)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> maxCountInILoop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> s1 = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (list.contains(s1)) &#123;</span><br><span class="line">                maxCountInILoop = Math.max(maxCountInILoop, list.size());</span><br><span class="line">                <span class="keyword">if</span>(maxCountInILoop &gt; (s.length() - j) /<span class="number">2</span> )&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                list.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(s1);</span><br><span class="line">            maxCountInILoop = Math.max(maxCountInILoop, list.size());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        list.clear();</span><br><span class="line">        maxCount = Math.max(maxCount, maxCountInILoop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>解法一的问题是没有复用之前运算得到的结果，相当于每次都是重新来的，解法二中我们将会复用之前的结果。假设已经有一个目前最长的字符串，当遇到一个重复字符的时候，去掉前面包含重复字符的字符串，留下来的字符串再组合，才是可能出现最长字符串的那块。知道这个点之后，整个程序都变得简单很多了。</p><p>例如：<br>abadcb 是源字符串，ab是遇到的第一个最长字符串，当遇到第三个字符，也就是a的时候，我们把开头的a去掉，加入后面遇到的a，变成ba。一直重复这个操作，最后留下来的就是就是最长字符串了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run2</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">        <span class="keyword">int</span> index = list.indexOf(c);</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            list.add(c);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            list.subList(<span class="number">0</span>,index + <span class="number">1</span>).clear();</span><br><span class="line">            list.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        maxCount = Math.max(maxCount,list.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个字符串，找到最长子串的长度，而不重复字符。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;给定”abcabcbb”的答案是”abc”，长度是3
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.47log.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
