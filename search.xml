<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>React 与 SpringBoot 开发配置流程(简单版）</title>
      <link href="/2018/06/09/2018-06-09-08:19/"/>
      <url>/2018/06/09/2018-06-09-08:19/</url>
      <content type="html"><![CDATA[<h2 id="react-配置"><a href="#react-配置" class="headerlink" title="react 配置"></a>react 配置</h2><h3 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h3><p>打包js让react可以直接被浏览器运行</p><h3 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h3><p>因为使用的是JSX和ES6，低版本的浏览器可能会无法运行，需要这个开发插件翻译</p><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p>因为配置 Webpack 打包原本的 react 开发功能无法使用，需要手动配置 webpack 的热更新</p><h3 id="浏览器跨域问题"><a href="#浏览器跨域问题" class="headerlink" title="浏览器跨域问题"></a>浏览器跨域问题</h3><p>react 需要运行在独立的服务器上才能运转，也就是和 SpringBoot 不在同一个服务器上。这样会导致浏览器跨域请求问题，需要做个代理。代理SpringBoot的服务器到 react 上</p>]]></content>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ObejextBox 记录</title>
      <link href="/2018/06/03/2018-06-03-00:14/"/>
      <url>/2018/06/03/2018-06-03-00:14/</url>
      <content type="html"><![CDATA[<p>ObjextBox 其实是可以用于桌面Java客户端的<br>这个<a href="http://objectbox.io/documentation/embedded-db-for-java-desktop-apps/" target="_blank" rel="noopener">网页</a>就是教你如何集成的。<br>而且这个是支持三大桌面操作系统的。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rect 学习之路</title>
      <link href="/2018/05/07/2018-05-07-01:35/"/>
      <url>/2018/05/07/2018-05-07-01:35/</url>
      <content type="html"><![CDATA[<p>引用<a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md" target="_blank" rel="noopener">如何学习React</a></p><p>以下只是提醒我的路线，实际上作者的内容非常丰富，建议阅读原文</p><h2 id="如何踏入-React-生态圈"><a href="#如何踏入-React-生态圈" class="headerlink" title="如何踏入 React 生态圈"></a>如何踏入 React 生态圈</h2><p>所有的软件都是建立在某个技术栈之上的, 你需要对整个技术栈有足够深入的理解, 才能建造你的应用. 为什么 React 生态圈的工具似乎总让人感觉压力山大呢, 因为它总是以错误的顺序被解释:</p><p>你应该按照以下的顺序进行学习, <strong>而不是跳着学或者同时学习</strong>:</p><ul><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-react-%E6%9C%AC%E8%BA%AB" target="_blank" rel="noopener">React</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-npm" target="_blank" rel="noopener"><code>npm</code></a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-javascript-%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">JavaScript “打包工具”</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-es6" target="_blank" rel="noopener">ES6</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%94%B1-routing" target="_blank" rel="noopener">Routing</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-flux" target="_blank" rel="noopener">Flux</a></li></ul><p><strong>你不需要把这些都学完才去使用 React.</strong> 只需要在你遇到问题需要解决的时候, 才进入下一步的学习.</p><p>另外, 在 React 社区中, 有一些前沿主题是经常被提及到的, 以下的这些主题很有意思, 但也很难弄懂, 所以它们远没有上面的主题流行, <strong>大多数应用也不需要用到这些.</strong></p><ul><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F" target="_blank" rel="noopener">内联样式</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener">服务器端渲染</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-immutablejs" target="_blank" rel="noopener">Immutable.js</a></li><li><a href="https://github.com/petehunt/react-howto/blob/master/README-zh.md#user-content-%E5%AD%A6%E4%B9%A0-relay-falcor-%E7%AD%89" target="_blank" rel="noopener">Relay, Falcor 等</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>List and Keys (列表与关键词）</title>
      <link href="/2018/05/06/2018-05-06-13:47/"/>
      <url>/2018/05/06/2018-05-06-13:47/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这章主要说明怎么正确的设置列表中元素的key,作为<code>key</code>最好有具有局部唯一确定性<br>一般有两个选择，内容的id作为key，其次用次序作为key</p><h2 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h2><h3 id="渲染多个组件"><a href="#渲染多个组件" class="headerlink" title="渲染多个组件"></a>渲染多个组件</h3><p><em>例</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  &lt;li&gt;&#123;number&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/渲染</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用数据下标做key"><a href="#使用数据下标做key" class="headerlink" title="使用数据下标做key"></a>使用数据下标做key</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">      &#123;number&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="使用-Keys-展开一堆组件"><a href="#使用-Keys-展开一堆组件" class="headerlink" title="使用 Keys 展开一堆组件"></a>使用 Keys 展开一堆组件</h3><p>应该把key设置在循环的组件上，而不是组件的实际渲染上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Correct! There is no need to specify the key here:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// Correct! Key should be specified inside the array.</span></span><br><span class="line">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">              value=&#123;number&#125; /&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="key-必须在-list-中唯一"><a href="#key-必须在-list-中唯一" class="headerlink" title="key 必须在 list 中唯一"></a>key 必须在 list 中唯一</h3><p>这个不用多说，唯一不用说了才能在 list 找到</p><h3 id="在JSX中嵌入-map-表达式"><a href="#在JSX中嵌入-map-表达式" class="headerlink" title="在JSX中嵌入 map 表达式"></a>在JSX中嵌入 map 表达式</h3><p><em>例1</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">              value=&#123;number&#125; /&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>JSF 允许所有的东西写在{}中<br><em>例2</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">        &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">                  value=&#123;number&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Handle Event （处理事件）</title>
      <link href="/2018/05/05/2018-05-05-15:47/"/>
      <url>/2018/05/05/2018-05-05-15:47/</url>
      <content type="html"><![CDATA[<h2 id="React与js事件处理的同与不同"><a href="#React与js事件处理的同与不同" class="headerlink" title="React与js事件处理的同与不同"></a>React与js事件处理的同与不同</h2><ul><li>React事件使用camelCase命名，而不是小写。</li><li>使用JSX，您将传递方法引用作为事件处理函数，而不是字符串。</li></ul><p><strong>例</strong></p><p><strong>HTML</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"start()"</span>&gt;</span></span><br><span class="line">    开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>React</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&#123;this.start&#125;</span>&gt;</span></span><br><span class="line">    开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="React中的默认行为处理方式与JS不同"><a href="#React中的默认行为处理方式与JS不同" class="headerlink" title="React中的默认行为处理方式与JS不同"></a>React中的默认行为处理方式与JS不同</h1><p>无法返回false以防止React中的默认行为</p><p><strong>例</strong></p><p><em>HTML</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"console.log('The link was clicked.'); return false"</span>&gt;</span></span><br><span class="line">  Click me</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>react</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The link was clicked.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="事件绑定问题"><a href="#事件绑定问题" class="headerlink" title="事件绑定问题"></a>事件绑定问题</h2><p>事件是需要绑定才能生效的，当你把 <code>handleClick</code> 设置给<code>onClick</code> 的时候，需要思考是否已经绑定到<br><code>this</code>上</p><blockquote><p>官方说这是这是<code>js</code>的特性，为什么是这样，我也不太清楚</p></blockquote><p><em>例</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">lass Toggle extends React.Component &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      isToggleOn: !prevState.isToggleOn</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.isToggleOn ? <span class="string">'ON'</span> : <span class="string">'OFF'</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Toggle /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果你不喜欢每次都要调用bind,你可以把方法变成成员变量，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class="line">  <span class="comment">// Warning: this is *experimental* syntax.</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>其实就是创建了一<code>handleClick</code> 的成员变量，然后创建了一个方法赋值给<code>handleClick</code></p><p>还有一种办法，创建匿名内部类方法<br><em>例</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// This syntax ensures `this` is bound within handleClick</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这种问题就是每次渲染的时候都会创建不同匿名内部类，会带来一定的性能消耗问题</p><blockquote><p>官方推荐使用 <em>bind</em> 和 <em>class fields syntax</em> 两种方式</p></blockquote><h3 id="将参数传递给事件处理"><a href="#将参数传递给事件处理" class="headerlink" title="将参数传递给事件处理"></a>将参数传递给事件处理</h3><p>在列表中经常会传递id 给点击方法，需要传递参数，以下是传递参数的两种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Conditional Rendering(有条件渲染)</title>
      <link href="/2018/05/05/2018-05-05-09:44/"/>
      <url>/2018/05/05/2018-05-05-09:44/</url>
      <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>讲述 React 可以通过各种传统和简写判断方式控制元素选择显示或者不显示</p><h2 id="主要章节"><a href="#主要章节" class="headerlink" title="主要章节"></a>主要章节</h2><ol><li>通过判断返回不同的元素</li><li>不想展示某个元素可以返回null</li><li>内联逻辑&amp;&amp;运算符判断返回元素</li></ol><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="通过元素变量控制显示"><a href="#通过元素变量控制显示" class="headerlink" title="通过元素变量控制显示"></a>通过元素变量控制显示</h3><p>讲的其实就是通过变量控制渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> button = isLoggedIn ? (</span><br><span class="line">      &lt;LogoutButton onClick=&#123;<span class="keyword">this</span>.handleLogoutClick&#125; /&gt;</span><br><span class="line">    ) : (</span><br><span class="line">      &lt;LoginButton onClick=&#123;<span class="keyword">this</span>.handleLoginClick&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class="line">        &#123;button&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="内联-if-逻辑-amp-amp-操作符"><a href="#内联-if-逻辑-amp-amp-操作符" class="headerlink" title="内联 if 逻辑 &amp;&amp; 操作符"></a>内联 if 逻辑 &amp;&amp; 操作符</h3><p>其实就是将一个 判断语句&amp;&amp;组合，true输出&amp;&amp; 部分，false直接忽略</p><p><strong>模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    express &amp;&amp; </span><br><span class="line">    <span class="comment">//true 需要输出的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mailbox</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> unreadMessages = props.unreadMessages;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">      &#123;unreadMessages.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">          You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class="line">        &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p><strong>模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? <span class="literal">true</span> : <span class="literal">false</span>.</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      The user is &lt;b&gt;&#123;isLoggedIn ? <span class="string">'currently'</span> : <span class="string">'not'</span>&#125;&lt;<span class="regexp">/b&gt; logged in.</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止组件出现"><a href="#阻止组件出现" class="headerlink" title="阻止组件出现"></a>阻止组件出现</h3><p>其实就是如果不想这个组件渲染，直接返回<code>null</code>就可以了。但是这个组件的<br><code>componentWillUpdate</code> 和 <code>componentDidUpdate</code> 还是会被调用的</p><p><strong>模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">if</span>(不出现）&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (正常组件)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.warn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"warning"</span>&gt;</span><br><span class="line">      Warning!</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>State and LifeCycle</title>
      <link href="/2018/05/01/2018-05-01-07:55/"/>
      <url>/2018/05/01/2018-05-01-07:55/</url>
      <content type="html"><![CDATA[<p>这章主要是讲状态和生命周期</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>可以在组件定义一个这样的东西</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">                name: <span class="string">"test"</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>state</code> 就是一个结构体，但是有且只有在构造方法中定义这个 state 的结构体。</p><h3 id="这个结构体是可以修改的"><a href="#这个结构体是可以修改的" class="headerlink" title="这个结构体是可以修改的"></a>这个结构体是可以修改的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意必须调用<code>setState</code> 方法的修改，修改的值才能响应到界面<br><a id="more"></a></p><h3 id="自动合并"><a href="#自动合并" class="headerlink" title="自动合并"></a>自动合并</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是设置了 <code>date</code> 数据，会自动和 <code>name</code> 数据合并</p><h3 id="setState-方法可能是异步的"><a href="#setState-方法可能是异步的" class="headerlink" title="setState 方法可能是异步的"></a><code>setState</code> 方法可能是异步的</h3><p>所以这样的写法是错误的，执行的时候可能拿到是后面的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>把值传入闭包中计算可以保证是当前的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="LifeCycle-（生命周期）"><a href="#LifeCycle-（生命周期）" class="headerlink" title="LifeCycle （生命周期）"></a>LifeCycle （生命周期）</h2><p>文中介绍了两个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件加载的时候调用</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件将要离开的时候调用</span></span><br><span class="line">componentWillUnmount() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="数据流是向下"><a href="#数据流是向下" class="headerlink" title="数据流是向下"></a>数据流是向下</h2><p>数据可以设置给子组件，组件之间互相不知道各自的状态</p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> react </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Components and Props （组件与属性）</title>
      <link href="/2018/05/01/2018-05-01-07:27/"/>
      <url>/2018/05/01/2018-05-01-07:27/</url>
      <content type="html"><![CDATA[<h2 id="Functional-and-Class-Components"><a href="#Functional-and-Class-Components" class="headerlink" title="Functional and Class Components"></a>Functional and Class Components</h2><h3 id="创建一个组件"><a href="#创建一个组件" class="headerlink" title="创建一个组件"></a>创建一个组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过设定名字显示不同的名字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weclome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello ,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//把以下内容渲染到一个叫 "Root" 的元素上</span></span><br><span class="line"><span class="xml">ReactDOM.render(</span></span><br><span class="line"><span class="xml">  element,</span></span><br><span class="line"><span class="xml">  document.getElementById('root')</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Cahal"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Edite"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="要善于提取组件"><a href="#要善于提取组件" class="headerlink" title="要善于提取组件"></a>要善于提取组件</h3><p><strong> 显示一个用户评论 </strong></p><h4 id="提取前"><a href="#提取前" class="headerlink" title="提取前"></a>提取前</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"Comment"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"UserInfo"</span>&gt;</span><br><span class="line">        &lt;img className=<span class="string">"Avatar"</span></span><br><span class="line">          src=&#123;props.author.avatarUrl&#125;</span><br><span class="line">          alt=&#123;props.author.name&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;div className=<span class="string">"UserInfo-name"</span>&gt;</span><br><span class="line">          &#123;props.author.name&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div className=<span class="string">"Comment-text"</span>&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="Comment-date"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="提取后"><a href="#提取后" class="headerlink" title="提取后"></a>提取后</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化信息</span></span><br><span class="line"><span class="comment"> * @param date</span></span><br><span class="line"><span class="comment"> * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date.toLocaleDateString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示头像</span></span><br><span class="line"><span class="comment"> * @param props</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avatar</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#123;</span>"<span class="attr">Avatar</span>"&#125;</span></span></span><br><span class="line"><span class="xml">                src=&#123;props.user.avatarUrl&#125;</span></span><br><span class="line"><span class="xml">                alt=&#123;props.user.name&#125;</span></span><br><span class="line"><span class="xml">    /&gt;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 用户信息</span></span><br><span class="line"><span class="xml"> * @param props</span></span><br><span class="line"><span class="xml"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="xml"> * @constructor</span></span><br><span class="line"><span class="xml"> */</span></span><br><span class="line"><span class="xml">function UserInfo(props) &#123;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">        &lt;div className=&#123;"UserInfo"&#125;&gt;</span><br><span class="line">            &lt;Avatar user=&#123;props.user&#125;/&gt;</span><br><span class="line">            &lt;div className=&#123;"UserInfo-name"&#125;&gt;</span><br><span class="line">                &#123;props.user.name&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 评论</span><br><span class="line"> * @param props</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function Comment(props) &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&#123;"Comment"&#125;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;UserInfo user=&#123;props.author&#125;/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div className=&#123;"Comment-text"&#125;&gt;</span><br><span class="line">                &#123;props.text&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div className=&#123;"Comment-date"&#125;&gt;</span><br><span class="line">                &#123;formatDate(props.date)&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评论会变得清晰很多</p><h2 id="所有的-props-都是只读的"><a href="#所有的-props-都是只读的" class="headerlink" title="所有的 props 都是只读的"></a>所有的 <code>props</code> 都是只读的</h2><p>以下的方法是会报错<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserInfo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    props.name = <span class="string">"10086"</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=&#123;<span class="string">"UserInfo"</span>&#125;&gt;</span><br><span class="line">            &lt;Avatar user=&#123;props.user&#125;/&gt;</span><br><span class="line">            &lt;div className=&#123;<span class="string">"UserInfo-name"</span>&#125;&gt;</span><br><span class="line">                &#123;props.user.name&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> react </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>添加 Linux 公钥原理</title>
      <link href="/2018/04/29/2018-04-29-03:13/"/>
      <url>/2018/04/29/2018-04-29-03:13/</url>
      <content type="html"><![CDATA[<p>在 <code>~/.ssh/</code> 目录下，有个 <code>authorized_keys</code> 文件，这个东西就是保存着可以登录的这个服务器的public key , 只要把你的public key 添加到authorized_keys 里面就可以了。</p><p>具体操作方法可以使用 vi 打开直接粘贴上去。</p><p>如果文件原本不存在，是自己创建的，需要注意权限问题，只要和sshkey 有关的都是 600 权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p><p>最后restart ssh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service restart sshd</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>找到了当年作为产品狗的证据🤣</title>
      <link href="/2017/11/14/2017-11-14-14:15/"/>
      <url>/2017/11/14/2017-11-14-14:15/</url>
      <content type="html"><![CDATA[<p>整理文档的时候偶尔发现了这样一份文档</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-14-15106690074451.jpg" alt=""></p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-14-15106690232836.jpg" alt=""></p><p>这是当年我参与设计和研发的应用啊！！！</p>]]></content>
      
      
        <tags>
            
            <tag> 往事 </tag>
            
            <tag> 产品狗 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之禅——6大设计原则</title>
      <link href="/2017/11/08/2017-11-08-08:59/"/>
      <url>/2017/11/08/2017-11-08-08:59/</url>
      <content type="html"><![CDATA[<h2 id="6个原则"><a href="#6个原则" class="headerlink" title="6个原则"></a>6个原则</h2><ul><li>单一职责：有且仅有一个原因引起类的变更</li><li>里氏替换：所有使用基类的地方都能无缝的使用其子类</li><li>依赖倒置：所有依赖都应该依赖于抽象，细节依赖于抽象，抽象依赖于抽象，面向契约编程就是它的实现</li><li>最少知识：一个对象应该对其他对象有最少了解,又名迪米特法则</li><li>接口隔离：客户端不应该依赖他不需要的接口</li><li>开闭原则：应该对修改关闭，对扩展开放</li></ul><a id="more"></a><h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><h3 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h3><p>单一职责的定义是 &gt;= 并且&lt;= 一个原则引起类的变更，也就是多于一个职责不行，少于一个职责也不行。</p><h3 id="我的例子"><a href="#我的例子" class="headerlink" title="我的例子"></a>我的例子</h3><p>以前为了方便，我总是把Model和Gson 的解析的模板类写在一起，比如，要解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"lisa"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="string">"sex"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我会定义一个这样的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">    </span><br><span class="line">    ...Getter Setter...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便，我会同时把这个类当做SQLite的一个Model保存数据。因为大部分时候他们两个是一致的。</p><p>这时候，<code>User</code> 这个类就会有两个职责，解析Json模板和保存数据的Model。<br>这样做就会带来问题，例如，我往Json数据中加入一个<code>token</code>的字段，但是这个字段是不需要保存下来的，这样你就需要加入一个判断使<code>token</code>不保存下来，会无端端导致这个类变得复杂，复杂就容易出错，同时因为Json的变动，导致Model那边的测试也要重新跑一边，这是一个典型的反例了。</p><p>正确的做法应该是把两个分开，分别负责不同的职能。</p><h2 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h2><h3 id="我的看法-1"><a href="#我的看法-1" class="headerlink" title="我的看法"></a>我的看法</h3><p>就是子类中必须完全并且正确实现父类的方法，对，少了也不行，改了意思也不行。</p><h3 id="我的例子-1"><a href="#我的例子-1" class="headerlink" title="我的例子"></a>我的例子</h3><p>一时没想到好例子，继续沿用书中的栗子吧。<br>书中讲述的是一个枪的父类，具体调用流程如下</p><p><img src="media/15101315748986/15103055896529.jpg" alt=""></p><p>重点看枪这个父类，如果我要实现一个玩具枪的时候应该怎么办？玩具枪也是枪，是不是直接继承枪这个父类就可以了？我以前的做法会是直接继承<code>AbstractGun</code>，然后把<code>shoot</code>方法置空，也就是变成如下这样</p><p><img src="media/15101315748986/15103058000292.jpg" alt=""></p><p>但是这样做是不对的，毕竟这里的枪是用来杀人的，当<code>ToyGun</code>继承于<code>AbstractGun</code>的时候，就是表示他是一只杀人的枪，当实际上它并不是，所以应该声明一个玩具枪的父类，让玩具枪基于这个父类去实现，这样就不会导致士兵拿到这个枪去杀人。</p><p>里氏替换要求子类必须忠实的实现父类的功能，不能少，不能改。毕竟，在Java中，能使用父类的地方就能替换成任意一个子类，如果子类没有父类的功能，调用者就会出错。</p><p>总的来说就是，<strong>子类必须在忠实的实现父类的功能后这个前提下享有自己的个人</strong>。</p><h2 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h2><h3 id="我的看法-2"><a href="#我的看法-2" class="headerlink" title="我的看法"></a>我的看法</h3><p>基于抽象编程，基于契约编程。Java中有个很出名的做法，不管干啥，先定义接口，使用的都是抽象的类或者接口，具体实现不管，就是基于接口编程。这样做好处是很明显的，抽象只是定义了一种行为模式，表示我可以做这个事情，具体你怎么做不管，这样给了实现者很大的空间。比如排序这个事情，我定义了排序这个功能，你只管把排序好的数据给我，具体实现我不管。当你发现一个更好的排序算法的时候，你就可以通过替换具体实例轻松完成升级。</p><h3 id="我的例子-2"><a href="#我的例子-2" class="headerlink" title="我的例子"></a>我的例子</h3><p>我在项目GaiaLibrary 曾经定义了一个通道<code>GLink</code>，如下图<br><img src="media/15101315748986/15103880445691.jpg" alt=""><br>有一个写入接口，负责把数据写入。调用者是<code>GRequestDispatcher</code></p><p>本来实现类只有一个<code>GBLELink</code>,也就是BLE通道，但是某一天，上头要求支持传统蓝牙通道，这时候基于抽象编程的优越性就发挥出来了，调用的代码不需要改动一行，我只需要继承<code>GLink</code>，实现一个基于传统蓝牙<code>GTranditionLink</code>就可以了。对于调用者来说，这个完全是无缝的。</p><h2 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h2><h3 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h3><p>接口隔离其实就是要求接口要尽可能小，接口代表的是一种能力，能够完成完整的描述一种能力就足够了。</p><h3 id="我的例子-3"><a href="#我的例子-3" class="headerlink" title="我的例子"></a>我的例子</h3><p>我曾经对Volley 的网络请求进行封装，我对网络请求的回掉并不是像一般的网络请求那样直接封装成一个，而是三个，如图</p><p><img src="media/15101315748986/15103901889836.jpg" alt=""></p><p>这样做有什么好处呢，很多网络请求回掉其实是有共性的，比如，错误之后，根据不同的指令码，弹出不同的提示。再比如，成功的时候固定获取某部分数据，或者存入到数据库中。当我把这几个接口全部分开的时候，可以轻松的通过不同的组合来达到各种各样的目的，提高了代码的复用性。但是缺点也是有的，这是接口分细之后共有的缺点，就是会更麻烦，如果是一个回掉接口，就可以通过一次设定就可以完成了。这个需要设定三次。</p><h2 id="最少知识"><a href="#最少知识" class="headerlink" title="最少知识"></a>最少知识</h2><h3 id="定义解析"><a href="#定义解析" class="headerlink" title="定义解析"></a>定义解析</h3><p>这个定义其实有两个方面内容，我对你了解最少，还有我让你了解我最少。<br>我对你了解最少，其实就是，调用其他类的属性和方法越少越好，这样就算其他类有更改，你内部的更改风险也能降到最低。<br>我让你了解最少，就是公开的属性和方法最少，这样就能保证修改内部实现的时候没有更多的束缚，毕竟私有的都是别人不能调用的。</p><h3 id="我的例子-4"><a href="#我的例子-4" class="headerlink" title="我的例子"></a>我的例子</h3><p>这个在SpringMVC中有个很好的东西就是为了解决知道类怎么构建这个问题的。就是<strong>注入</strong>,我在安卓中的使用Dagger，一个依赖注入框架。为什么说依赖注入框架是遵循最少知识原则，因为本来创建一个对象，就必须调用构造方法，调用构造方法就是在了解这个类，把这个过程省去了，就减少了需要对这个类的了解了。</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><h3 id="定义解析-1"><a href="#定义解析-1" class="headerlink" title="定义解析"></a>定义解析</h3><p>开闭原则可以提高以下几点，测试效率，提高复用，高维护性。测试效率，不需要重新测试修改过的代码，已经引用了这段修改过代码的代码，只需要测试配置是否正确即可。提高复用，使用已有功能通过配置达到目的。</p><h3 id="个人案例"><a href="#个人案例" class="headerlink" title="个人案例"></a>个人案例</h3><p>在安卓开发中，在网络回调中以前我是这样写的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">int</span> result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(result)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        .... doSomething</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">        .... doSomething</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做有个很大的坏处，因为如果后台增加了一个码，你又需要重新加多一个<code>case</code>，假设这里有50个case，添加一个case，这个功能代码就需要所有测试重新再跑一趟，因为你修改了这个方法里的代码，正确的做法应该使用一种配置的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CodeCallback</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;Integer,CodeCallback&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加callback到 map中</span></span><br><span class="line">map.put(<span class="number">200</span>,callback200);</span><br><span class="line">map.put(<span class="number">400</span>,callback400);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">(<span class="keyword">int</span> result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(map.contains(result))&#123;</span><br><span class="line">        map.get(result).execute();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方法，很好的符合开闭原则，当有新的code时候，只需要重新实现一个<code>CodeCallback</code>,然后添加map中就可以了，对于测试来说，只需要测试新的<code>CodeCallback</code>就可以了，无需重新跑一次所有的测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>单一职责</p><p>  当一个类遵守单一职责的时候，对比多职责，涉及到的功能肯定比较少。实现起来容易，代码清晰，也更容易维护。职责的减少，导致类的调用也变少，使用到地方也相应的减少，对应修改这个类的时候涉及到的范围也减少了。</p></li><li><p>里氏替换</p><p>  当一个类遵守里氏替换原则的时候，我就可以放心的使用父类，而不管子类是怎么实现的，毕竟功能肯定是实现了父类功能的。也不用一个个看子类的实现，毕竟你只要继承了这个类，你就应该有这个类的功能。关心的底层越少，编程越轻松。</p></li><li><p>依赖倒置</p><p>  所有都依赖于抽象，抽象这个词其实不好理解。我们换一个词，契约，依赖于契约编程。契约这个东西在生活中很常见，比如，上淘宝买一公斤大米，你不需要知道大米是怎么生产的，怎么到商家手中的，你只需要你要的是一公斤大米，大米就会送上门，买一公斤大米的时候就定义了一个契约，契约让你不需要关心任何细节，只要得到结果就可以了。依赖倒置带来的也是这样的效果，契约其实定义你需要的结果，不要去关心细节的实现。</p></li><li><p>最少知识</p><p>  最少知识在生活中其实是处处体现的，比如，我知道用这个菜刀可以切菜就行了，我不需要了解这个菜刀是怎么锻造的，用的是什么材料，我只需要知道这个菜刀可以切菜就够了。在类中的提现就是，我只需要调用这个类的公有方法去实现我需要的功能就可以了。对于功能提供类来说，我只需要把我需要提供的功能暴露出去就可以了，不需要把怎么实现也让第三方知道，毕竟，菜刀只需要让用户知道我真的切菜很好用就好，不需要告诉用户我是怎么锻造的。</p></li><li><p>接口隔离</p><p>  接口，在现实生活中的其实就是代表着功能的意思。想象一下你在买一款微波炉，你只需要微波功能，但是因为微波炉没有做好接口隔离，都是带烧烤功能的，你不得不为了买个微波炉，多付了烧烤功能的费用。编程也是这样，接口实现是有成本的，无端依赖不需要的接口，之后造成实现成本的攀高。</p></li><li><p>开闭原则</p><p>  为什么支持对扩展开放和对修改关闭呢？想象一下你有一台电脑，某一天你需要一个摄像头进行视频聊天，如果是对扩展关闭对修改开放的话，你的电脑估计要回厂，然后让厂商加一个摄像头了。但是对扩展开放就不一样了，直接淘宝买个USB摄像头，插上就能用。在编程中的体现就是，提供接口去获得新的功能。</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>setElevation 无效</title>
      <link href="/2017/11/05/2017-11-05-15:14/"/>
      <url>/2017/11/05/2017-11-05-15:14/</url>
      <content type="html"><![CDATA[<h2 id="检查父布局是否开启clipChildren"><a href="#检查父布局是否开启clipChildren" class="headerlink" title="检查父布局是否开启clipChildren"></a>检查父布局是否开启clipChildren</h2><p>阴影需要把东西绘制到子布局空间以外，不开启这个无法绘制</p><h2 id="检查background是否为透明"><a href="#检查background是否为透明" class="headerlink" title="检查background是否为透明"></a>检查background是否为透明</h2><p>透明的background 哪里来的阴影不是吗</p><blockquote><p>note:以下的xml表示是一个透明的布局，因为mask表示只有点击的时候才出现这个drawable</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ripple</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"#FF666666"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@android:id/mask"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/bg_item_click_normal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ripple</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Firebase 的新功能（2017）</title>
      <link href="/2017/11/02/2017-11-02-02:45/"/>
      <url>/2017/11/02/2017-11-02-02:45/</url>
      <content type="html"><![CDATA[<h2 id="Firebase-的两个主要目标"><a href="#Firebase-的两个主要目标" class="headerlink" title="Firebase 的两个主要目标"></a>Firebase 的两个主要目标</h2><p>分别是,帮助App开发和App增长</p><p>App 开发下包括</p><ul><li>Realtime Database </li><li>Hosting</li><li>Authentication</li><li>Cloud Functions</li><li>Cloud Storage </li><li>Crash Reporting</li><li>Test Lab</li><li>Performance</li></ul><p>App增长包括</p><ul><li>Analytics</li><li>Cloud Message</li><li>Dynamic Links</li><li>Remote Config</li><li>Invites</li><li>App Indexing</li><li>AdMob</li><li>AdWords</li></ul><a id="more"></a><h2 id="Firebase-目前支持的平台"><a href="#Firebase-目前支持的平台" class="headerlink" title="Firebase 目前支持的平台"></a>Firebase 目前支持的平台</h2><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-03-15096303328484.jpg" alt=""></p><h2 id="Firebase-的改变"><a href="#Firebase-的改变" class="headerlink" title="Firebase 的改变"></a>Firebase 的改变</h2><h2 id="与Fabrice-合作"><a href="#与Fabrice-合作" class="headerlink" title="与Fabrice 合作"></a>与Fabrice 合作</h2><h3 id="Crashlytics"><a href="#Crashlytics" class="headerlink" title="Crashlytics"></a>Crashlytics</h3><p> Firebase 与 Fabric 合作，为Firebase 带来Crashlytics 分析工具</p><h3 id="Firebase-Auth"><a href="#Firebase-Auth" class="headerlink" title="Firebase Auth"></a>Firebase Auth</h3><ul><li>由Digitls 发展过来，不需要迁移</li><li>支持第三方email</li><li>支持Google sign</li><li>支持电话短信认证</li><li>支持完全的定制化，也就是提供API可以自己定制UI</li><li>10000次每个月的验证</li></ul><blockquote><p>如果用户已经在别的应用上使用过这个SDK验证，这里将不用再重新验证</p></blockquote><h2 id="更快，更容易的构建"><a href="#更快，更容易的构建" class="headerlink" title="更快，更容易的构建"></a>更快，更容易的构建</h2><h3 id="Cloud-Function"><a href="#Cloud-Function" class="headerlink" title="Cloud Function"></a>Cloud Function</h3><p>使用Javascript方法编写方法，可以通过URL直接访问方法，也能通过Firebase event 事件触发方法。例如，用户上传了图片，可以通过触发function 进行压缩</p><h3 id="Hosting"><a href="#Hosting" class="headerlink" title="Hosting"></a>Hosting</h3><p>一个静态网页托管地方（我又想到了博客。。。），自带CDN。当然可以使用Function 功能构建web App</p><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>就是Google Cloud Storage 。 搬过来之后之后选存储地点</p><h3 id="Realtime-Database"><a href="#Realtime-Database" class="headerlink" title="Realtime Database"></a>Realtime Database</h3><p>实时数据库</p><h2 id="提高应用质量"><a href="#提高应用质量" class="headerlink" title="提高应用质量"></a>提高应用质量</h2><h3 id="Crash-Reporting"><a href="#Crash-Reporting" class="headerlink" title="Crash Reporting"></a>Crash Reporting</h3><h3 id="Test-Lab"><a href="#Test-Lab" class="headerlink" title="Test Lab"></a>Test Lab</h3><p>支持实际设备和虚拟设备，仅仅需要上传自己的App上去，会有机器人自动帮你点击。完事之后会发送错误logs,同时还有视频录像帮助你定位问题。新支持设备 三星 Galaxy s7 和 Pixel</p><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>Performance 监视器支持现实响应时间，payload 大小，下载时间</p><h2 id="增长和吸引更多用户"><a href="#增长和吸引更多用户" class="headerlink" title="增长和吸引更多用户"></a>增长和吸引更多用户</h2><h3 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h3><p>可以对你的用户进行分类，并对用户打上标签，并且针对这一类用户进行发送不同的信息。</p><h4 id="StreamView"><a href="#StreamView" class="headerlink" title="StreamView"></a>StreamView</h4><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-03-15096910073609.jpg" alt=""></p><p>提供实时用户数据，并且显示到 地图上</p><h4 id="DebugView"><a href="#DebugView" class="headerlink" title="DebugView"></a>DebugView</h4><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-03-15096911688880.jpg" alt=""></p><h3 id="BigQuery"><a href="#BigQuery" class="headerlink" title="BigQuery"></a>BigQuery</h3><p>让你有能力可以使用一种类似SQL的语言导出和投出数据到各种不一样的方法</p><h3 id="Firebase-Cloud-Message"><a href="#Firebase-Cloud-Message" class="headerlink" title="Firebase Cloud Message"></a>Firebase Cloud Message</h3><p>支持三个平台， iOS ，Android 和 Web</p><h3 id="Remote-Config"><a href="#Remote-Config" class="headerlink" title="Remote Config"></a>Remote Config</h3><p>就像文字上说的那样，提供一个远程配置的功能，就是通过key，value的方式获取数据。例如，你可以制造一个开关，只是对一部分人群开始来测试。</p><h3 id="Fastline"><a href="#Fastline" class="headerlink" title="Fastline "></a><a href="https://fastlane.tools/" target="_blank" rel="noopener">Fastline </a></h3><p>一个自动帮你搞掂发布的的工具，包括帮你截图。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> firebase </tag>
            
            <tag> googleio </tag>
            
            <tag> 2017 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>提速Android Gradle 构建</title>
      <link href="/2017/10/31/2017-10-31-04:38/"/>
      <url>/2017/10/31/2017-10-31-04:38/</url>
      <content type="html"><![CDATA[<h2 id="提速法则一览"><a href="#提速法则一览" class="headerlink" title="提速法则一览"></a>提速法则一览</h2><table><thead><tr><th>手段</th><th>全量构建</th><th>Java增量构建</th><th>资源增量构建</th></tr></thead><tbody><tr><td>升级 android gradle tools 到3.0</td><td>-15s(-25%)</td><td>-10(-38%)</td><td>-2.5(-16%)</td></tr><tr><td>避免使用遗留的Multidex</td><td>-5.5s(-12%)</td><td>-8(53%)</td><td>same</td></tr><tr><td>debug 环境关闭multi-APK</td><td>-4.8s(-12%)</td><td>-0.5s(-6%)</td><td>-3s(-26%)</td></tr><tr><td>设置包含最少的资源</td><td>-6s(-17%)</td><td>-1.5s(-24%)</td><td>-2s(21%)</td></tr><tr><td>关闭 png crunching</td><td>-9s(-33%)</td><td>same</td><td>same</td></tr><tr><td>使用Instance Run</td><td>+7s(+37%)</td><td>-3s(-54%)</td><td>-3s(-42%)</td></tr><tr><td>避免不注意的改变</td><td>-</td><td>-</td><td>-</td></tr><tr><td>不要使用动态版本号</td><td>-</td><td>-</td><td>-</td></tr><tr><td>注意分配 gradle 内存</td><td>-</td><td>-</td><td>-</td></tr><tr><td>开启 Gradle Caching</td><td>-7s(-25%)</td><td>same</td><td>+0.5s(+12%)</td></tr><tr><td>使用<code>implementation</code> 或者 <code>api</code> 代替 <code>compile</code></td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>以上优化方案基于android gradle tools 3.0-alpha</p><blockquote><p>关于<a href="https://github.com/google/santa-tracker-android" target="_blank" rel="noopener">Santa Tracker Project</a></p></blockquote><blockquote><ul><li>9 个模块，包括Wear</li><li>500 多个Java文件</li><li>1700 个XML 文件，3500张PNG</li><li>Multi-dex</li><li>没有 annotation processors</li><li>APK大小接近60MB</li></ul></blockquote><p>这个项目可以在Google Github 帐号中找到</p><a id="more"></a><h2 id="优化方案详解"><a href="#优化方案详解" class="headerlink" title="优化方案详解"></a>优化方案详解</h2><h4 id="避免使用遗留的MultiDex"><a href="#避免使用遗留的MultiDex" class="headerlink" title="避免使用遗留的MultiDex"></a>避免使用遗留的MultiDex</h4><ul><li>遗留的multidex是指使用了MultiDex 并且minSDkVersion &lt; 21</li><li>遗留的multidex会导致构建的时候签名速度变慢</li><li>使用Android Studio 2.3+ IDE构建的时候，会自动避免这样的状况</li></ul><p>也就是说，使用点击AS运行的按钮，这个不需要配置。</p><h4 id="关闭-multi-APK"><a href="#关闭-multi-APK" class="headerlink" title="关闭 multi-APK"></a>关闭 multi-APK</h4><p>multi-apk 是为了根据配置生成不同的APK，以达到减少APK体积大小的问题。但是这个配置没有必要在开发的时候开启。</p><h5 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h5><ol><li>设置监测到flag 就关闭代码</li></ol><pre><code><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    android&#123;</span><br><span class="line">        <span class="keyword">if</span>(project.hasProperty(<span class="string">'devBuild'</span>))&#123;</span><br><span class="line">            splits.abi.enable = <span class="literal">false</span></span><br><span class="line">            splits.density.enable = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在AS设定中加入flag</span><br><span class="line">    ![](<span class="string">http:</span><span class="comment">//7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094320380595.jpg)</span></span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 或者使用gradlew 构建</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    ./gradlew <span class="string">app:</span>assembleDebug -PdevBuild</span><br></pre></td></tr></table></figure></code></pre><h4 id="包含最少的资源"><a href="#包含最少的资源" class="headerlink" title="包含最少的资源"></a>包含最少的资源</h4><p>如果你的app是包含多资源的，比如多语言的和多分辨率。但是在开发的时候，大部分时间都是只用一种资源，所以其他资源就会无用，导致拖慢构建速度。</p><p>以下是固定使用某种资源的办法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">productFlavors&#123;</span><br><span class="line">    development&#123;</span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        resConfigs (<span class="string">"en"</span>,<span class="string">"xxhdpi"</span>)</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭-png-压缩"><a href="#关闭-png-压缩" class="headerlink" title="关闭 png 压缩"></a>关闭 png 压缩</h4><p>png 在 android build tools 里面是默认开启的。这个功能可以使你构建更小的apk，但是在debug构建中，我们并不需要这个功能，所以，应该在debug构建的时候禁止。</p><p>禁止方法就是使用关闭multi-APK 一样的标记</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">       <span class="keyword">if</span>(project.hasProperty(<span class="string">'devBuild'</span>))&#123;</span><br><span class="line">           splits.abi.enable = <span class="literal">false</span></span><br><span class="line">           splits.density.enable = <span class="literal">false</span></span><br><span class="line">           aaptOptions.cruncherEnabled = <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>添加标记的方法同关闭 multi-APK 的一样</p><blockquote><p>当然你可以把图片转换到webp , 如果你的PNG已经压缩过的也可以完全关闭这个功能</p></blockquote><h4 id="使用-Instant-Run"><a href="#使用-Instant-Run" class="headerlink" title="使用 Instant Run"></a>使用 Instant Run</h4><p>Instant Run 已经要求最低API 为21 ，各方面的兼容性都好了很多，推荐使用。<br>当然完整编译是需要更长的时间的</p><h4 id="避免不注意的改变"><a href="#避免不注意的改变" class="headerlink" title="避免不注意的改变"></a>避免不注意的改变</h4><p><strong>栗子</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> buildDateTime = <span class="keyword">new</span> Date().format(<span class="string">'yyMMddHHmm'</span>).toInteger()</span><br><span class="line">android&#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        versionCode buildDateTime</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个操作看起来很合理，每次构建的时候都可以获得唯一的versionCode，这样每次测试就能根据versionCode 来告诉你问题所在。但是，对于debug构建来说，这不是一个好的设置。这个设置会导致 AndroidManifest 改变 , AndroidManifest 改变会导致增量编译的时间增加。</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094385826761.jpg" alt="Manifest 改变对于编译的影响"></p><h5 id="Crashlytics"><a href="#Crashlytics" class="headerlink" title="Crashlytics"></a>Crashlytics</h5><p>Crashlytics 是个很好的开发工具，如果你使用得正确的话。Crashlytics 每次构建的时候都会生成唯一的ID，关掉这个ID可以加快构建速度。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'io.fabric'</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        debug&#123;</span><br><span class="line">            ext.alwaysUpdateBuildId = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不要使用动态版本号"><a href="#不要使用动态版本号" class="headerlink" title="不要使用动态版本号"></a>不要使用动态版本号</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    dependencies&#123;</span><br><span class="line">        compile <span class="string">'com.android.suport:appcompat-v7:+'</span>        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的依赖使用了动态版本号来设置使用最新的版本号。但是这样会导致gradle每24小时就要联网检查最新的版本，增加了构建的时间。同时，这样使用会导致你的构建不稳定，可能今天还能构建成功，但是明天就失败了</p><h4 id="注意分配-Gradle-内存"><a href="#注意分配-Gradle-内存" class="headerlink" title="注意分配 Gradle 内存"></a>注意分配 Gradle 内存</h4><p>在新建一个项目的时候，默认在 gradle.properties 中设置了 gradle 使用的内存为1.5G，这可能是个好的值，也可能不是,取决你你项目的大小，越大的项目需要越大的内存</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094404747010.jpg" style="width: 100%"></p><h4 id="开启-Gradle-缓存"><a href="#开启-Gradle-缓存" class="headerlink" title="开启 Gradle 缓存"></a>开启 Gradle 缓存</h4><p>这是 Gradle 3.5的新特性 ,和 2.3 build chache 是不一样的，可以接受任何系之前的构建，任何的地点的构建。<br>开启代码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.caching = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="使用implementation-或者-api-代替-compile"><a href="#使用implementation-或者-api-代替-compile" class="headerlink" title="使用implementation 或者 api 代替 compile"></a>使用<code>implementation</code> 或者 <code>api</code> 代替 <code>compile</code></h4><p>假设你有如图这几个项目<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-01-15094467796965.jpg" style="width : 100%"></p><p>app 依赖与lib1,lib1依赖于 lib2，但是，app只使用了lib1提供的公共api。如果使用<code>compile</code> 关键字，当你更改lib2的时候，app,lib1 都要重新编译。但是，如果app 是使用<code>implementtation</code>依赖lib1的时候，lib2 就算发生更改，app也不需要重新编译。</p><blockquote><p>所以我们在编写库的时候，如果库依赖的库不想曝光给使用者，建议使用<code>implementation</code>,如果你想把自己使用的库曝光给使用者，请使用 <code>api</code> 关键字</p></blockquote><h2 id="额外提及"><a href="#额外提及" class="headerlink" title="额外提及"></a>额外提及</h2><h3 id="模块化好处"><a href="#模块化好处" class="headerlink" title="模块化好处"></a>模块化好处</h3><ul><li>Gradle 可以构建平行的构建模块</li><li>缺乏增量任务的变通方法</li><li>多模块代表着多任务,多任务代表着可以平行执行</li><li>Some parallelism within a task is provided but limited（自己看吧，我也看不懂）</li></ul><h3 id="如何调试缓慢构建"><a href="#如何调试缓慢构建" class="headerlink" title="如何调试缓慢构建"></a>如何调试缓慢构建</h3><p>Gradle 提供了工具去帮助知道哪里花了大部分时间</p><ul><li>–dry-run</li><li>–info</li><li>–profile</li><li>Gradle profile </li></ul><h5 id="–dry-run"><a href="#–dry-run" class="headerlink" title="–dry-run"></a>–dry-run</h5><p>可以让你知道花费了多少时间在 <code>configuration</code> 上,10s以内是最好的，如果配置的时间过长，你的方法gradle 已经出了问题了。</p><p>使用方法：<code>gradle yourtask --dry-run</code></p><h5 id="–info"><a href="#–info" class="headerlink" title="–info"></a>–info</h5><p>这个参数可以告诉你，当前任务执行的详细信息，包括在执行什么，还有为什么执行。</p><p>使用方法：<code>gradle yourtask --info</code></p><h5 id="–profile"><a href="#–profile" class="headerlink" title="–profile"></a>–profile</h5><p>这个参数会在 <code>you-project/build/reports/profile、</code> 中生成一个html文件，详细告诉你哪个任务花了多少时间，是个非常有用的debug工具</p><p>使用方法：<code>gradle build --profile</code></p><h5 id="Gradle-Profiler"><a href="#Gradle-Profiler" class="headerlink" title="Gradle Profiler"></a>Gradle Profiler</h5><p><a href="https://github.com/gradle/gradle-profiler" target="_blank" rel="noopener">Gradle Profiler</a> 是 Gradle 官方用于自动收集Gradle构建的分析和基准测试信息的工具。具体的使用办法在 github 上有，以后有必要再出个专题吧。这个工具是当上面的办法都无效的时候才推荐使用的。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> googleio </tag>
            
            <tag> 2017 </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Activity 启动模式</title>
      <link href="/2017/10/25/2017-10-25-15:04/"/>
      <url>/2017/10/25/2017-10-25-15:04/</url>
      <content type="html"><![CDATA[<p>启动模式分为4种，分别为</p><ol><li>Standrad </li><li>SingleTop</li><li>SingleTask</li><li>SingleIntance </li></ol><h3 id="Standrad"><a href="#Standrad" class="headerlink" title="Standrad"></a>Standrad</h3><p>就是默认的模式，启动多少个就是多少个</p><h3 id="SingleTop"><a href="#SingleTop" class="headerlink" title="SingleTop"></a>SingleTop</h3><p>SingleTop 需要这样理解，SingleOnTop,当栈顶是我的时候，就不再创建新的实例。<br>例如，ABCD，启动D，还是ABCD。如果是ABDC，启动D，最后就变成ABDCD。</p><h3 id="SingleTask"><a href="#SingleTask" class="headerlink" title="SingleTask"></a>SingleTask</h3><p>SingleOnTask的意思，我在这个任务栈是唯一的。需要注意的是，这货启动是默认自带clearTop效果的，也就是会把在它之后的Activity都清楚掉。<br>例如，任务栈中有ABDC，启动D，将会变成ABD，C将会被自动推出。</p><h3 id="SingleIntance"><a href="#SingleIntance" class="headerlink" title="SingleIntance"></a>SingleIntance</h3><p>这个可以看做是SingleTask加强版，使用这个属性的Activity，将会被单独放在一个任务栈中，然后这个Activity在进程中都是唯一个的</p><a id="more"></a><h2 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h2><p> A 属于栈1,BC 属于栈2,A 为<code>standard</code> 模式,BC都是为<code>singleTask</code>模式。启动方式为这样 A-&gt;B-&gt;C-&gt;A-&gt;B。这样启动的时候，用户按下返回键就是桌面了。问题主要是在最后启动的B上，singleTask 自带clearTop 属性，将会把CA清除出去，A 和 B 又不是在相同的任务栈上，所以就回到桌面了。</p><h2 id="启动Activity的一些常用的FLAG"><a href="#启动Activity的一些常用的FLAG" class="headerlink" title="启动Activity的一些常用的FLAG"></a>启动Activity的一些常用的FLAG</h2><h4 id="FLAG-ACTIVITY-NEW-TASK"><a href="#FLAG-ACTIVITY-NEW-TASK" class="headerlink" title="FLAG_ACTIVITY_NEW_TASK"></a>FLAG_ACTIVITY_NEW_TASK</h4><p> 其实就是<code>SingleTask</code> 模式</p><h4 id="FLAG-ACTIVITY-SINGLE-TOP"><a href="#FLAG-ACTIVITY-SINGLE-TOP" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP"></a>FLAG_ACTIVITY_SINGLE_TOP</h4><p>就是<code>singletop</code></p><h4 id="FLAG-ACTIVITY-CLEAR-TOP"><a href="#FLAG-ACTIVITY-CLEAR-TOP" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP"></a>FLAG_ACTIVITY_CLEAR_TOP</h4><p>清除在他最子上的活动，配合<code>NEW_TASK</code>使用</p><h4 id="FLAG-ACTIVITY-EXECULE-FROM-RECENTS"><a href="#FLAG-ACTIVITY-EXECULE-FROM-RECENTS" class="headerlink" title="FLAG_ACTIVITY_EXECULE_FROM_RECENTS"></a>FLAG_ACTIVITY_EXECULE_FROM_RECENTS</h4><p>不出现在最近应用列表中</p><h2 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h2><p><code>singleTop</code>的Activity，用<code>startActivityForResult</code> 启动的时候是立刻返回值的，但是是错误的result</p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bitmap.Config 一些理解</title>
      <link href="/2017/10/25/2017-10-25-14:12/"/>
      <url>/2017/10/25/2017-10-25-14:12/</url>
      <content type="html"><![CDATA[<h2 id="Bitmap-Config-解析"><a href="#Bitmap-Config-解析" class="headerlink" title="Bitmap Config 解析"></a>Bitmap Config 解析</h2><table><thead><tr><th style="text-align:left"><a href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html" target="_blank" rel="noopener">Bitmap.Config</a></th><th></th></tr></thead><tbody><tr><td style="text-align:left"><code>ALPHA_8</code></td><td>每个像素存储为单透明（alpha）通道。其实就是保存透明度而已</td></tr><tr><td style="text-align:left"><code>ARGB_4444</code></td><td>已经废弃的格式,推荐使用<code>ARGB_8888</code></td></tr><tr><td style="text-align:left"><code>ARGB_8888</code></td><td>每个像素存储在4个Byte上,其实就是ARGB分别占用8bit的意思</td></tr><tr><td style="text-align:left"><code>HARDWARE</code></td><td>特殊配置，当位图只存储在图形内存中。</td></tr><tr><td style="text-align:left"><code>RGBA_F16</code></td><td>每个像素存储在8个Byte上，这个我不太看得懂，就是RGBA 格式保存，每一个占用16bit,F并不知道是什么意思</td></tr><tr><td style="text-align:left"><code>RGBA_F16</code></td><td>每个像素存储在8个Byte上，这个我不太看得懂，就是RGBA 格式保存，每一个占用16bit,F并不知道是什么意思</td></tr><tr><td style="text-align:left"><code>RGB_565</code></td><td>每个像素存储在2个Byte上，只有RGB通道被编码：红色以5位精度（32个可能值）存储，绿色以6位精度存储（64个可能值），蓝色存储5位精确。</td></tr></tbody></table><h2 id="位图占用内存计算"><a href="#位图占用内存计算" class="headerlink" title="位图占用内存计算"></a>位图占用内存计算</h2><p>例：<br>选择的是<code>ARGB_8888</code> 分辨率为 <strong>100*100</strong> 的位图。<br>占用的内存应该是</p><pre><code>100 * 100 * 4 = 40000 Byte = 39kB</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只要记住符号上表示的是bit就很容易计算Bitmap在内存中占用的大小了</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bitmap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速配置shadowsocks主机</title>
      <link href="/2017/10/23/2017-10-23-02:03/"/>
      <url>/2017/10/23/2017-10-23-02:03/</url>
      <content type="html"><![CDATA[<h2 id="分为步骤"><a href="#分为步骤" class="headerlink" title="分为步骤"></a>分为步骤</h2><ol><li>选择系统为centos7</li><li>更新kernel 为4.1 以上</li><li>开启bbr</li><li>安装docker-ce环境</li><li>使用shadowsock-docker部署ss</li></ol><h3 id="系统选择"><a href="#系统选择" class="headerlink" title="系统选择"></a>系统选择</h3><p>各大主机提供商不太一样，这段靠自己吧</p><h3 id="更新kernel"><a href="#更新kernel" class="headerlink" title="更新kernel"></a>更新kernel</h3><p>执行以下bash</p><script src="https://gist.github.com/hangox/a9b977a9c026629101c38d5e6a2b4e76.js"></script><p>或者直接在命令行上敲</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://gist.githubusercontent.com/hangox/a9b977a9c026629101c38d5e6a2b4e76/raw/d97e16123218c068c024a12019e1a403ef47981f/update-kernel-for-centos7.sh | bash</span><br></pre></td></tr></table></figure><p>执行完成脚本之后将会重启系统，耐心等候重启就好了</p><a id="more"></a><h2 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h2><p>开启google 家的bbr会有很大提速效果，而且访问网络会更稳定</p><h3 id="脚本如下"><a href="#脚本如下" class="headerlink" title="脚本如下"></a>脚本如下</h3><script src="https://gist.github.com/hangox/1b7c6b1e675cba36e654e5d9f546085d.js"></script><h3 id="直接执行脚本"><a href="#直接执行脚本" class="headerlink" title="直接执行脚本"></a>直接执行脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://gist.githubusercontent.com/hangox/1b7c6b1e675cba36e654e5d9f546085d/raw/4e416c709187f914a919e6f6a9ba22fcd611cf74/<span class="built_in">enable</span>-bbr.sh | bash</span><br></pre></td></tr></table></figure><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><h3 id="脚本如下-1"><a href="#脚本如下-1" class="headerlink" title="脚本如下"></a>脚本如下</h3><script src="https://gist.github.com/hangox/e9fa4ff3a91840370e2974fb68c7ae07.js"></script><h3 id="或者直接执行"><a href="#或者直接执行" class="headerlink" title="或者直接执行"></a>或者直接执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://gist.githubusercontent.com/hangox/e9fa4ff3a91840370e2974fb68c7ae07/raw/18f70717bb2c486c67ad4f8e9dc21a3b125c04ef/install-docker-ce-for-centos7.sh | bash</span><br></pre></td></tr></table></figure><h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1984:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k <span class="variable">$SSPASSWORD</span> -m aes-256-cfb</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> shadowosocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法，两个排序数组的中位数</title>
      <link href="/2017/10/20/2017-10-20-03:28/"/>
      <url>/2017/10/20/2017-10-20-03:28/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有两个已排序的数组nums1和nums2分别为m和n大小。<br>找到两个排序数组的中位数。整体运行时间复杂度应为O（log（m + n））。</p><p>示例1：<br>nums1 = [1,3]<br>nums2 = [2]</p><p>中位数为2.0</p><p>示例2：<br>nums1 = [1,2]<br>nums2 = [3,4]</p><p>中位数为（2 + 3）/ 2 = 2.5</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个其实很简单，都是已经排序的数组了，直接重新排成一个数组，走到一半就知道哪个是中位数了</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 我的解法，时间为O(m+n)，空间也是</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nums1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nums2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> length = nums1.length + nums2.length;</span><br><span class="line">       <span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">       <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> minValue;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (p1 &gt;= nums1.length) &#123;</span><br><span class="line">               minValue = nums2[p2++];</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 &gt;= nums2.length) &#123;</span><br><span class="line">               minValue = nums1[p1++];</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class="line">                   minValue = nums1[p1++];</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   minValue = nums2[p2++];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           list[i] = minValue;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> midIndex = length / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">return</span> length % <span class="number">2</span> == <span class="number">0</span> ?(list[midIndex - <span class="number">1</span>] + list[midIndex]) / <span class="number">2F</span> : list[midIndex];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置 Groovy 写Android JUnit</title>
      <link href="/2017/10/16/2017-10-16-15:51/"/>
      <url>/2017/10/16/2017-10-16-15:51/</url>
      <content type="html"><![CDATA[<h2 id="为什么使用Groovy写JUnit"><a href="#为什么使用Groovy写JUnit" class="headerlink" title="为什么使用Groovy写JUnit"></a>为什么使用Groovy写JUnit</h2><p><code>Groovy</code> 是动态语言，动态语言干测试其实非常好用。比如，我要创建一个多种类型的数组，只要这样写<code>def array = [12,12,&#39;1212&#39;]</code> 这样我就很简单的创建了多种类型的数组了。如果是用java代码的话，你可以尝试一下需要多少行。groovy的优点不只是这些，详情请看Groovy的特性</p><h2 id="Android中的配置方法"><a href="#Android中的配置方法" class="headerlink" title="Android中的配置方法"></a>Android中的配置方法</h2><p>在Android中需要使用Groovy需要使用<a href="https://github.com/groovy/groovy-android-gradle-plugin" target="_blank" rel="noopener">这个开源项目</a>,里面有详细的配置说明。但是我按那个配置，老是编译不过，改了一下就可以了，就写下自己的办法吧。</p><h3 id="配置buildScript"><a href="#配置buildScript" class="headerlink" title="配置buildScript"></a>配置buildScript</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    </span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.0.0-beta7'</span></span><br><span class="line">        <span class="comment">//groovy插件依赖</span></span><br><span class="line">        classpath <span class="string">'org.codehaus.groovy:groovy-android-gradle-plugin:1.2.0'</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在需要使用的项目中，加入插件"><a href="#在需要使用的项目中，加入插件" class="headerlink" title="在需要使用的项目中，加入插件"></a>在需要使用的项目中，加入插件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'groovyx.android'</span></span><br></pre></td></tr></table></figure><h3 id="添加groovy依赖"><a href="#添加groovy依赖" class="headerlink" title="添加groovy依赖"></a>添加groovy依赖</h3><blockquote><p>我这里只是使用Groovy 作为测试使用，所以我是用的是<code>testImplementation</code>,如果要在开发中使用Groovy,请改为<code>implementation</code> 就可以了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"><span class="comment">//使用官方推荐的反而不行</span></span><br><span class="line"><span class="comment">//    testImplementation 'org.codehaus.groovy:groovy:2.4.11:grooid'</span></span><br><span class="line"><span class="comment">//我该为了java使用的Groovy就可以了</span></span><br><span class="line">    testImplementation <span class="string">'org.codehaus.groovy:groovy-all:2.4.12'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation(<span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span>, &#123;</span><br><span class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h3><p>在<code>test/groovy</code>文件夹中建立你的Groovy 脚本，开始开发吧</p><p><a href="https://github.com/hangox/AndroidTestWithGroovy.git" target="_blank" rel="noopener">示例项目</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Groovy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法，最长子串问题</title>
      <link href="/2017/10/14/2017-10-14-14:54/"/>
      <url>/2017/10/14/2017-10-14-14:54/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个字符串，找到最长子串的长度，而不重复字符。</p><p>例子：</p><p>给定”abcabcbb”的答案是”abc”，长度是3。<br>给定”bbbbb”的答案是”b”，长度为1。<br>给定”pwwkew”的答案是”wke”，长度为3.请注意，答案必须是子字符串，”pwke”是子序列，而不是子字符串。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>暴力破解，把每种可能都列出来，这样自然就知道最长是什么了，算法时间复杂度为<code>O(logn)</code>，空间复杂度为<code>O(n)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> maxCountInILoop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> s1 = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (list.contains(s1)) &#123;</span><br><span class="line">                maxCountInILoop = Math.max(maxCountInILoop, list.size());</span><br><span class="line">                <span class="keyword">if</span>(maxCountInILoop &gt; (s.length() - j) /<span class="number">2</span> )&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                list.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(s1);</span><br><span class="line">            maxCountInILoop = Math.max(maxCountInILoop, list.size());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        list.clear();</span><br><span class="line">        maxCount = Math.max(maxCount, maxCountInILoop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>解法一的问题是没有复用之前运算得到的结果，相当于每次都是重新来的，解法二中我们将会复用之前的结果。假设已经有一个目前最长的字符串，当遇到一个重复字符的时候，去掉前面包含重复字符的字符串，留下来的字符串再组合，才是可能出现最长字符串的那块。知道这个点之后，整个程序都变得简单很多了。</p><p>例如：<br>abadcb 是源字符串，ab是遇到的第一个最长字符串，当遇到第三个字符，也就是a的时候，我们把开头的a去掉，加入后面遇到的a，变成ba。一直重复这个操作，最后留下来的就是就是最长字符串了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run2</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">        <span class="keyword">int</span> index = list.indexOf(c);</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            list.add(c);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            list.subList(<span class="number">0</span>,index + <span class="number">1</span>).clear();</span><br><span class="line">            list.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        maxCount = Math.max(maxCount,list.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio 3.0 中支持的Java8 特性</title>
      <link href="/2017/10/13/2017-10-13-11:03/"/>
      <url>/2017/10/13/2017-10-13-11:03/</url>
      <content type="html"><![CDATA[<h2 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h2><p> 在Android Studio 3.0 中其实已经支持了Java8 的部分特性，其中最多人用的就是Lambda 表达式也在列。</p><p>在AS3.0中使用lambda 其实也很简单</p><ol><li>升级Android Plugin到3.0.0-alpha1 或者以上</li><li><p>在build.gradle 中加入一下代码</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// Configure only for each module that uses Java 8</span></span><br><span class="line">  <span class="comment">// language features (either in its source code or</span></span><br><span class="line">  <span class="comment">// through dependencies).</span></span><br><span class="line">  compileOptions &#123;</span><br><span class="line">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>就这样两部可以了。</p><blockquote><p>如果你以前使用了<strong>jack</strong>或者<strong>me.tatarka.retrolambda</strong>，只需要移除相关的代码就可以了.</p></blockquote><h2 id="AS3-0-中java8-支持的特性和Api等级"><a href="#AS3-0-中java8-支持的特性和Api等级" class="headerlink" title="AS3.0 中java8 支持的特性和Api等级"></a>AS3.0 中java8 支持的特性和Api等级</h2><table><thead><tr><th style="text-align:left">Java 8 Language Feature</th><th style="text-align:left">最低兼容的API等级</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener">Lambda expressions</a></td><td style="text-align:left">任意API等级。但是，只有当lambda所捕获的所有值都是可序列化的时候才支持lambda序列化。</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="noopener">Method References</a></td><td style="text-align:left">任意API等级.</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html" target="_blank" rel="noopener">Type Annotations</a></td><td style="text-align:left">任意API等级。但是，类型注释信息在编译时可用，但在运行时不可用。此外，<a href="https://developer.android.com/reference/java/lang/annotation/ElementType.html#TYPE" target="_blank" rel="noopener"><code>TYPE</code></a> 在API级别24及受以下，但不支持<code>ElementType.TYPE_USE</code>或<code>ElementType.TYPE_PARAMETER</code>。</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="noopener">Default and static interface methods</a></td><td style="text-align:left">任意API等级。</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="noopener">Repeating annotations</a></td><td style="text-align:left">任意API等级。</td></tr></tbody></table><table><thead><tr><th style="text-align:left">Java 8 Language API</th><th style="text-align:left">最低兼容的API等级</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Repeatable.html" target="_blank" rel="noopener"><code>java.lang.annotation.Repeatable</code></a></td><td style="text-align:left">API level 24 or higher.</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType-java.lang.Class-" target="_blank" rel="noopener"><code>AnnotatedElement.getAnnotationsByType(Class)</code></a></td><td style="text-align:left">API level 24 or higher.</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="noopener"><code>java.util.stream</code></a></td><td style="text-align:left">API level 24 or higher.</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html" target="_blank" rel="noopener"><code>java.lang.FunctionalInterface</code></a></td><td style="text-align:left">API level 24 or higher.</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#isDefault--" target="_blank" rel="noopener"><code>java.lang.reflect.Method.isDefault()</code></a></td><td style="text-align:left">API level 24 or higher.</td></tr><tr><td style="text-align:left"><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="noopener"><code>java.util.function</code></a></td><td style="text-align:left">API level 24 or higher.</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法，两数相加</title>
      <link href="/2017/10/12/2017-10-12-13:22/"/>
      <url>/2017/10/12/2017-10-12-13:22/</url>
      <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener">原题</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定两个非空的链表，表示两个非负整数。数字以相反的顺序存储，每个节点包含一个数字。添加两个数字并将其作为链表返回。</p><p>您可以假设两个数字不包含任何前导零，除了数字0本身。</p><p>输入：（2 - &gt; 4 - &gt; 3）+（5 - &gt; 6 - &gt; 4）<br>输出： 7 - &gt; 0 - &gt; 8</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实就是一个反方向加法算式。</p><p>原理如图<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-10-13-15078905475079.jpg" alt=""><br>就是遍历最长的那个列表，节点相加并加上进位。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="初版"><a href="#初版" class="headerlink" title="初版"></a>初版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> l2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> l1;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> val1 = <span class="number">0</span>, val2 = <span class="number">0</span>;</span><br><span class="line">      val1 = l1.val;</span><br><span class="line">      val2 = l2.val;</span><br><span class="line"></span><br><span class="line">      ListNode result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">      ListNode point = result;</span><br><span class="line"></span><br><span class="line">      ListNode p1 = l1;</span><br><span class="line">      ListNode p2 = l2;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//把最长的放在l1</span></span><br><span class="line">      ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(p1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">              temp = l1;</span><br><span class="line">              l1 = l2;</span><br><span class="line">              l2 = temp;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(p2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          p1 = p1.next;</span><br><span class="line">          p2 = p2.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//假设l1最长</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//结果等于个位相加加上进位</span></span><br><span class="line">          <span class="keyword">int</span> valr = val1 + val2 + carry;</span><br><span class="line">          carry = <span class="number">0</span>;</span><br><span class="line">          <span class="comment">//获取进位</span></span><br><span class="line">          <span class="keyword">if</span>(valr &gt; <span class="number">9</span>) &#123;</span><br><span class="line">              carry = valr / <span class="number">10</span>;</span><br><span class="line">              <span class="comment">//获取余数,也就是个位</span></span><br><span class="line">              point.val = valr % <span class="number">10</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              point.val = valr;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(l1.next == <span class="keyword">null</span> )&#123;</span><br><span class="line">              <span class="keyword">if</span>(carry != <span class="number">0</span>)&#123;</span><br><span class="line">                  point.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  point.next = <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              l1 = l1.next;</span><br><span class="line">              val1 = l1.val;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(l2.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">              val2 = <span class="number">0</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              l2 = l2.next;</span><br><span class="line">              val2 = l2.val;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          point.next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">          point = point.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="简化版本"><a href="#简化版本" class="headerlink" title="简化版本"></a>简化版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumber2</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode point = head;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> val1 = l1 == <span class="keyword">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">        <span class="keyword">int</span> val2 = l2 == <span class="keyword">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">        <span class="keyword">int</span> valr = val1 + val2 + carry;</span><br><span class="line"></span><br><span class="line">        carry = valr / <span class="number">10</span>;</span><br><span class="line">        point.next = <span class="keyword">new</span> ListNode(valr % <span class="number">10</span>);</span><br><span class="line">        point = point.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">        <span class="keyword">if</span>(l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        point.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>清理Mac上docker脚本</title>
      <link href="/2017/09/30/2017-09-30-03:16/"/>
      <url>/2017/09/30/2017-09-30-03:16/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove exited containers:</span></span><br><span class="line">docker ps --filter status=dead --filter status=exited -aq | xargs  docker rm -v</span><br><span class="line">    </span><br><span class="line"><span class="comment"># remove unused images:</span></span><br><span class="line">docker images --no-trunc  | awk <span class="string">'&#123; print $3 &#125;'</span> | xargs  docker rmi</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove unused volumes:</span></span><br><span class="line">find <span class="string">'/var/lib/docker/volumes/'</span> -mindepth 1 -maxdepth 1 -<span class="built_in">type</span> d | grep -vFf &lt;(</span><br><span class="line">  docker ps -aq | xargs docker inspect | jq -r <span class="string">'.[] | .Mounts | .[] | .Name | select(.)'</span></span><br><span class="line">) | xargs  rm -fr</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于MetaWeblog For Hexo一些问题</title>
      <link href="/2017/09/30/2017-09-30-00:55/"/>
      <url>/2017/09/30/2017-09-30-00:55/</url>
      <content type="html"><![CDATA[<ul><li>[ ] 初始化流程还不是很完善，需要做个初始化的页面。</li><li>[ ] 由于提交的时候只有拉取remote是同步的，文章生成之后就直接返回，异步的生成和deploy导致并不知道文章是否推送完成。</li><li>[ ] 文章在生成的过程中并不知道是否出错了，这个问题在Java层不知道怎么解决。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> metaweblog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MetaWeBlogApi for Hexo使用方法</title>
      <link href="/2017/09/24/2017-09-24-08:43/"/>
      <url>/2017/09/24/2017-09-24-08:43/</url>
      <content type="html"><![CDATA[<ol><li>部署镜像</li><li>初始化系统</li><li>配置使用</li></ol><h2 id="部署镜像"><a href="#部署镜像" class="headerlink" title="部署镜像"></a>部署镜像</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HexoMetaApi:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">daocloud.io/hangox/hexo-meta-api:master-43240b9</span></span><br><span class="line"><span class="attr">  privileged:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'9000'</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/hexoApp/blog:/hexo</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/hexoApp/ssh:/root/.ssh</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ACCOUNT=accout</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">PASSWORD=password</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">GIT_NAME=HexoMeta</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">GIT_EMAIL=liang.hanguang93@gmail.com</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">VIRTUAL_HOST=hexo.hangox.com</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">REPOSITORY=git@gitlab.com:hango/my-hexo.git</span></span><br></pre></td></tr></table></figure><p><strong>ACCOUNT</strong> Meta的帐号<br><strong>PASSWORD</strong> Meta的password<br><strong>GIT_NAME</strong> hexo 提交时候的git用户名<br><strong>GIT_EMAIL</strong> hexo 提交时候用的邮箱<br><strong>REPOSITORY</strong> 博客所在的GIT的地址，只是支持git模式</p><p><strong>/hexo</strong> 这个目录是用来保存hexo的项目的<br><strong>/root/.ssh</strong> 是用来保存提交用的ras key的</p><a id="more"></a><blockquote><p>目前只是支持git开头的地址，必须保证所有的源码，包括子项目都是通过这个方式访问，并且已经把publicKey添加到平台中。</p></blockquote><h2 id="初始化系统"><a href="#初始化系统" class="headerlink" title="初始化系统"></a>初始化系统</h2><ol><li>访问<code>host/getPublicKey</code> 获取公钥，并添加到git管理平台上</li><li>访问<code>host/init</code> 初始化系统</li></ol><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p> 配置你的写作软件，api地址为 <code>host/api</code> 可以用来发布文章了</p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> metaweblog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MetaWeblogApi for Hexo 开发纪录</title>
      <link href="/2017/09/23/2017-09-23-06:38/"/>
      <url>/2017/09/23/2017-09-23-06:38/</url>
      <content type="html"><![CDATA[<h2 id="为什么要开发MetaWeblogApi-for-hexo"><a href="#为什么要开发MetaWeblogApi-for-hexo" class="headerlink" title="为什么要开发MetaWeblogApi for hexo"></a>为什么要开发MetaWeblogApi for hexo</h2><ol><li>讨厌每次都要敲命令行</li><li>想在任何地方编写文章并可以提交</li><li>喜欢编辑器沉浸式的编写体验</li></ol><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><div id="sequence-0"></div><a id="more"></a><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="外部访问Api实现部分"><a href="#外部访问Api实现部分" class="headerlink" title="外部访问Api实现部分"></a>外部访问Api实现部分</h3><h4 id="使用SpringBoot"><a href="#使用SpringBoot" class="headerlink" title="使用SpringBoot"></a>使用SpringBoot</h4><ol><li>SpringMVC是目前Java最流行的框架</li><li>Java是我本来的开发语言，趁手的才是最好的</li><li>SpringBoot相对于原始的SpringMVC 更简单的配置</li></ol><h4 id="Metaweblog-的格式"><a href="#Metaweblog-的格式" class="headerlink" title="Metaweblog 的格式"></a>Metaweblog 的格式</h4><p>Metaweblog的实现主要是参考这个<a href="https://github.com/b3log/solo/blob/master/src/main/java/org/b3log/solo/api/metaweblog/MetaWeblogAPI.java" target="_blank" rel="noopener">开源项目</a>,这个源码写得很直白，非常好懂。简单一点解释Metaweblog Api(后面简称M)，和M对接的url其实只有一个，然后把访问不同的方法名封装在一个XML里面，通过解析这个xml，我们就能够知道这个请求到底需要访问什么方法。这个和我们一般的Api都不太一样，我在这个地方迷茫了好久。知道这个之后剩下的就是xml解析的问题了</p><h4 id="使用Groovy-XMLParser-解析xml"><a href="#使用Groovy-XMLParser-解析xml" class="headerlink" title="使用Groovy XMLParser 解析xml"></a>使用Groovy XMLParser 解析xml</h4><p>需要解析的xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>blogger.getUsersBlogs<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>12<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>12<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解析使用的groovy代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methodCall = <span class="keyword">new</span> XmlParser().parseText(text)</span><br><span class="line">methodName = methodCall.methodName.text()</span><br><span class="line">params = methodCall.params.param</span><br><span class="line">mUserAccount = params[<span class="number">1</span>].text()</span><br><span class="line">mUserPassword = params[<span class="number">2</span>].text()</span><br></pre></td></tr></table></figure><p>使用groovy 解析的话就好像使用js一样，直接使用xml字段名就能获取到值，非常方便</p><h4 id="Git的提交部分"><a href="#Git的提交部分" class="headerlink" title="Git的提交部分"></a>Git的提交部分</h4><p>JGit 是个Java实现的Git操作库，可以很方便的操作各种Git操作，我主要使用到以下几个方法</p><h5 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mGit = Git.cloneRepository()</span><br><span class="line">            .setURI(url)</span><br><span class="line">            .setDirectory(<span class="keyword">new</span> File(mGitConfig.repositoryLocation))</span><br><span class="line">            .setTransportConfigCallback(mTransportConfigCallback)</span><br><span class="line">            .setBranch(<span class="string">'master'</span>)</span><br><span class="line">            .setCloneSubmodules(<span class="keyword">true</span>)</span><br><span class="line">            .setTimeout(<span class="number">30000</span>)</span><br><span class="line">            .call()</span><br></pre></td></tr></table></figure><h5 id="update"><a href="#update" class="headerlink" title="update"></a>update</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> git = git()</span><br><span class="line">git.pull().setTransportConfigCallback(mTransportConfigCallback).call()</span><br><span class="line">git.submoduleUpdate().call()</span><br><span class="line"> <span class="comment">//如果不是干净的就合并</span></span><br><span class="line"><span class="keyword">if</span> (!git.status().call().clean) &#123;</span><br><span class="line">git.add().addFilepattern(<span class="string">'.'</span>).call()          </span><br><span class="line">git.commit().setMessage(buildCommitMessage(git.status().call())).call()</span><br></pre></td></tr></table></figure><h5 id="push"><a href="#push" class="headerlink" title="push"></a>push</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> pushResult = git().push()</span><br><span class="line">                .setPushAll()</span><br><span class="line">                .setTransportConfigCallback(mTransportConfigCallback)</span><br><span class="line">                .call()</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>因为使用的<code>git</code>url 提交，需要<code>ssh</code>key ,需要在<code>~/.ssh/</code>生成密钥</p><h3 id="调用Hexo-部分"><a href="#调用Hexo-部分" class="headerlink" title="调用Hexo 部分"></a>调用Hexo 部分</h3><p>我重新拓展了groovy String 中的execute，使得每次执行命令都在博客的目录下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String.metaClass.execute &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">new</span> File(mConfigBean.repositoryLocation).exists())&#123;</span><br><span class="line">               delegate.execute(<span class="literal">null</span>,<span class="keyword">new</span> File(mConfigBean.repositoryLocation))</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               delegate.execute(<span class="literal">null</span>,<span class="keyword">new</span> File(<span class="string">'/'</span>))</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>但是我不建议这样做，这样写是方便了，但是会造成在别的地方执行execute会失败。建议是重新拓展一个方法。</p><p>因为使用groovy，我就可以这样执行<code>hexo</code>的命令了</p><p><strong>初始化hexo</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'npm install '</span>.execute().text</span><br></pre></td></tr></table></figure><p><strong>生成和推送</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hexo generate -d'</span>.execute()</span><br></pre></td></tr></table></figure><h3 id="docker封装"><a href="#docker封装" class="headerlink" title="docker封装"></a>docker封装</h3><p>Docker 这个过程最蛋疼！！</p><ol><li>nodejs 要安装6版本</li><li>npm不需要安装了，安装node的时候附带了</li></ol><p>贴出构建Docker的Dockerfile</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>u111-jdk</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> &lt;Hangox,liang.hanguang93@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update -y --no-install-recommends</span></span><br><span class="line"><span class="bash">RUN apt-get install -y --no-install-recommends git-core curl</span></span><br><span class="line"><span class="bash">RUN curl -sL https://deb.nodesource.com/setup_6.x | bash -</span></span><br><span class="line"><span class="bash">RUN apt-get install -y  --no-install-recommends nodejs</span></span><br><span class="line"><span class="bash">RUN npm install hexo-cli -g</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY . /app</span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash">RUN ./gradlew assemble</span></span><br><span class="line"><span class="bash">RUN mv build/libs/MetaweblogApi-1.0.jar app.jar</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENV GIT_NAME HexoMetaApi</span></span><br><span class="line"><span class="bash">ENV GIT_EMAIL your@email.com</span></span><br><span class="line"><span class="bash">ENV ACCOUNT account</span></span><br><span class="line"><span class="bash">ENV PASSWORD password</span></span><br><span class="line"><span class="bash">ENV REPOSITORY <span class="string">''</span></span></span><br><span class="line"><span class="bash"><span class="comment">#</span></span></span><br><span class="line"><span class="bash"><span class="comment">#VOLUME ["root/.ssh", "/hexo"]</span></span></span><br><span class="line"><span class="bash"><span class="comment">#EXPOSE 9000</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD java -jar app.jar \</span></span><br><span class="line"><span class="bash">        --blog.account=<span class="variable">$ACCOUNT</span> \</span></span><br><span class="line"><span class="bash">        --blog.password=<span class="variable">$PASSWORD</span> \</span></span><br><span class="line"><span class="bash">        --git.repository=<span class="variable">$REPOSITORY</span> \</span></span><br><span class="line"><span class="bash">        --git.name=<span class="variable">$GIT_NAME</span> \</span></span><br><span class="line"><span class="bash">        --git.email=<span class="variable">$GIT_EMAIL</span></span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SpringBoot 这个框架简化了很多SpringMVC的配置，搭配Groovy开发非常舒服。<br>Metaweblog api 的实现还在于很粗糙的程度，目前也只是实现了,<code>newPost</code>和<code>editPost</code>两个简单的操作，争取实现更多的操作。Docker构建的话，还是希望自己以后不要在智商掉线了。Docker的相关信息也是时候要总结一下了。</p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">participant 编辑器 as Bparticipant MetaWeblogApi as Mparticipant 博客Git地址 as Aparticipant 博客 as EB->M: 发送Mardown格式的文本note left of M: git pull M->B: 返回BlogId确认提交成功 note right of M: 生成Hexo 的MarkdownM->A: 提交到note right of M: 调用Hexo 生成M->E: deploy 到博客地址</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux查看磁盘空间(df, du）</title>
      <link href="/2017/09/22/2017-09-22-15:19/"/>
      <url>/2017/09/22/2017-09-22-15:19/</url>
      <content type="html"><![CDATA[<h2 id="查看磁盘大小"><a href="#查看磁盘大小" class="headerlink" title="查看磁盘大小"></a>查看磁盘大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><h2 id="查看目录大小"><a href="#查看目录大小" class="headerlink" title="查看目录大小"></a>查看目录大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh &lt;dir&gt;</span><br></pre></td></tr></table></figure><h2 id="查看当前目录下所有文件夹大小"><a href="#查看当前目录下所有文件夹大小" class="headerlink" title="查看当前目录下所有文件夹大小"></a>查看当前目录下所有文件夹大小</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试HexoMetaApi</title>
      <link href="/2017/09/21/2017-09-21-14:24/"/>
      <url>/2017/09/21/2017-09-21-14:24/</url>
      <content type="html"><![CDATA[<p>如果你可以看到这篇文章，就是表示我的Metaweblog Api for Hexo 已经成功啦</p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>todo-mvvm-databinding</title>
      <link href="/2017/09/15/2017-09-15-06:24/"/>
      <url>/2017/09/15/2017-09-15-06:24/</url>
      <content type="html"><![CDATA[<p>该版本的应用程序称为todo-mvvm-databinding，并且基于todo-databinding示例，该示例使用数据绑定库来显示数据并将UI元素绑定到操作。</p><p>该示例演示了使用Model-View-ViewModel（MVVM）架构的todo-mvp示例的替代实现。</p><a id="more"></a><h2 id="你需要什么"><a href="#你需要什么" class="headerlink" title="你需要什么"></a>你需要什么</h2><p>在浏览此示例之前，您应该熟悉以下主题：</p><ul><li>该<a href="https://github.com/googlesamples/android-architecture/tree/master" target="_blank" rel="noopener">项目的自述</a></li><li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp" target="_blank" rel="noopener">待办事项-MVP</a>样品</li><li>待办事项-数据绑定 设计应用程序</li></ul><p>MVVM架构中的ViewModel与MVP架构中的Presenter类似。这两种架构与ViewModel或Presenter分别的不同之处在于：</p><ul><li>当应用程序修改MVVM体系结构中的ViewModel时，View会被库或框架自动更新。您无法直接从ViewModel更新View，因为ViewModel无法访问必要的引用。</li><li>然而，您可以从MVP架构中的Presenter更新View，因为它具有对View的必要参考。当需要进行更改时，您可以从Presenter显式调用View来进行更新。在此项目中，您可以使用布局文件将ViewModel中的可观察字段绑定到特定的UI元素，如<a href="https://developer.android.com/reference/android/widget/TextView.html" target="_blank" rel="noopener">TextView</a>或<a href="https://developer.android.com/reference/android/widget/ImageView.html" target="_blank" rel="noopener">ImageView</a>。数据绑定库可确保View和ViewModel保持双向同步，如下图所示。</li></ul><p><a href="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-27-mvvm-databinding.png" target="_blank" rel="noopener"><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-27-mvvm-databinding.png" alt="数据绑定使View和ViewModel保持同步。"></a></p><p>todo-mvvm数据绑定示例包含相对较多的新类，以及对现有类的许多更改。有关查看此版本应用程序更改的更多信息，请参阅<a href="https://github.com/googlesamples/android-architecture/wiki/How-to-compare-samples" target="_blank" rel="noopener">如何比较示例</a>。</p><h2 id="实施应用程式"><a href="#实施应用程式" class="headerlink" title="实施应用程式"></a><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding#implementing-the-app" target="_blank" rel="noopener"></a>实施应用程式</h2><p>在MVVM体系结构中，Views将对ViewModel中的更改进行反应，而不会被明确调用。然而，使用某些Android组件时，MVVM架构面临一些挑战。</p><p>例如，要显示一个<a href="https://developer.android.com/reference/android/support/design/widget/Snackbar.html" target="_blank" rel="noopener"><code>Snackbar</code></a>，您必须使用静态调用来传递视图对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Snakebar.make（View coordinatorLayout,String text,</span><br><span class="line">int length）.show();</span><br></pre></td></tr></table></figure><p>在使用MVP架构中的Presenter时，您可以调用该活动或片段来委托找到适当的视图对象的责任：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mView.showSnackbar（text）</span><br></pre></td></tr></table></figure><p>然而，ViewModel没有对活动或片段的必要引用。相反，您可以通过进行以下更改手动将<code>Snackbar</code>订阅到可观察字段：</p><ul><li><code>ObservableField&lt;String&gt;</code>在ViewModel中创建一个。</li><li>建立一个订阅，显示一个<code>snackbar</code>的<code>ObservableField</code>变化。</li></ul><p>以下代码片段说明了在可观察字段和回调之间建立一个订阅，触发该调用来显示小吃店：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mViewModel.snackbarText.addOnPropertyChangedCallback（</span><br><span class="line">      new Observable.OnPropertyChangedCallback() &#123;</span><br><span class="line">             @Override</span><br><span class="line">             public void onPropertyChanged(Observable observable, int i) &#123;</span><br><span class="line">                 showSnackBar();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><h2 id="维护应用程序"><a href="#维护应用程序" class="headerlink" title="维护应用程序"></a><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding#maintaining-the-app" target="_blank" rel="noopener"></a>维护应用程序</h2><p>对于该版本的应用程序，您可能会发现比todo-mvp更容易做出相对较小的更改。要添加新功能，可能需要使用数据绑定库的一些经验。由于数据绑定库负责通常进行单元测试的大多数接线，所以此版本中的单元测试数量较少。然而，两个版本的整体测试覆盖率应该是相似的。</p><p>数据绑定库负责某些组件之间的通信，因此在更改现有代码之前，您必须熟悉其功能。</p><p>下表总结了用于实现此版本应用程序的代码量。您可以将其作为与本项目中每个其他示例提供的类似表进行比较的基础。</p><table><thead><tr><th>语言</th><th>档案数量</th><th>空白行</th><th>评论行</th><th>代码行</th></tr></thead><tbody><tr><td><strong>Java的</strong></td><td>52</td><td>1166</td><td>1627</td><td>3655（3450 in todo-mvp）</td></tr><tr><td><strong>XML</strong></td><td>35</td><td>127</td><td>352</td><td>745</td></tr><tr><td><strong>总</strong></td><td>87</td><td>1293</td><td>1979年</td><td>4400</td></tr></tbody></table><h2 id="比较这个样本"><a href="#比较这个样本" class="headerlink" title="比较这个样本"></a><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding#comparing-this-sample" target="_blank" rel="noopener"></a>比较这个样本</h2><p>以下摘要回顾了该解决方案如何与todo-mvp基础示例进行比较：</p><ul><li><strong>使用架构框架，库或工具：</strong>开发人员必须熟悉数据绑定库。</li><li><strong>UI测试：</strong>与todo-mvp相同</li><li><strong>易于修改或添加功能：</strong>类似的努力todo-mvp</li><li><strong>需要学习努力：</strong>与todo-mvp相比，此版本需要更多的后台学习。<strong>你必须熟悉MVVM体系结构，它在概念上类似于MVP，但是更难实现。</strong>ps://github.com/googlesamples/android-architecture/tree/todo-databinding)样品</li><li>该<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="noopener">MVVM</a>架构</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> mvvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Oreo 中通知的更新</title>
      <link href="/2017/09/10/Android-Oreo-%E4%B8%AD%E9%80%9A%E7%9F%A5%E6%9B%B4%E6%96%B0/"/>
      <url>/2017/09/10/Android-Oreo-%E4%B8%AD%E9%80%9A%E7%9F%A5%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>资料来源<br><a href="https://www.youtube.com/watch?v=zGIw4MIJn5o&amp;feature=push-u&amp;attr_tag=Re0sC9vId_kC2kFm-6" target="_blank" rel="noopener">Notification Update in Android Oreo</a><br><a href="https://developer.android.com/about/versions/oreo/android-8.0.html#mm" target="_blank" rel="noopener">Android 8.0 功能和 API</a></p><h2 id="新特性一览"><a href="#新特性一览" class="headerlink" title="新特性一览"></a>新特性一览</h2><ul><li><p>通知渠道（Notification channel）：允许您为要显示的每种通知类型创建用户可自定义的渠道。总之就是通知和广告通过不同的渠道发，用户可以通过系统设置单独禁止某一个</p></li><li><p>通知标志（Notification badges）：就是iOS上那个小红点，不过不一定是红色，也没有数字，但有别的骚操作</p></li><li><p>休眠（Snoozing）：用户可以将通知置于休眠状态，以便稍后重新显示它。重新显示时通知的重要程度与首次显示时相同。应用可以移除或更新已休眠的通知，但更新休眠的通知并不会使其重新显示。其实就是<strong>稍后处理</strong>。。。</p></li><li><p>通知超时（Notification timeout）：现在，使用 setTimeoutAfter() 创建通知时您可以设置超时。您可以使用此函数指定一个持续时间，超过该持续时间后，通知应取消。如果需要，您可以在指定的超时持续时间之前取消通知。例如，如果你8点钟通知上飞机，但是现在已经12点了，这个通知已经对用户无用了，可以取消掉了。</p></li><li><p>锁屏排序（Lockscreen Ordering）。就是会根据通知的重要性排序，目前只知道ongoing通知一定是第一个的</p></li><li><p>通知设置（Notification settings）：我也不知道这个是啥，反正我没有试出来，知道的人麻烦告诉我一声。官网原文是这样的：当您使用Notification.INTENT_CATEGORY_NOTIFICATION_PREFERENCESIntent 从通知创建指向应用通知设置的链接时，您可以调用 setSettingsText() 来设置要显示的文本。此系统可以提供以下 Extra 数据和 Intent，用于过滤应用必须向用户显示的设置：EXTRA_CHANNEL_ID、NOTIFICATION_TAG 和 NOTIFICATION_ID。</p></li></ul><ul><li><p>通知清除（Notification dismissal）：新的API让你知道是用户移除了还是工具移除了通知,反正我是觉得没啥用了。。。</p></li><li><p>背景颜色（Colorized）：就是在持续通知上设置颜色。比如闹钟响的时候可以设置成自己的颜色，这样用户就能一样把你认出来</p></li><li><p>消息样式（MessageStyle）：现在，使用 MessagingStyle 类的通知可在其折叠形式中显示更多内容。</p></li></ul><a id="more"></a><h2 id="详细解析"><a href="#详细解析" class="headerlink" title="详细解析"></a>详细解析</h2><h3 id="通知渠道（Notification-channel）"><a href="#通知渠道（Notification-channel）" class="headerlink" title="通知渠道（Notification channel）"></a>通知渠道（Notification channel）</h3><p>通知渠道是<strong>Android Oreo</strong> 通知更新中最重要的一个特性，android 官方认为这是一个gift 给用户还有开发者。简单一点来说就是，以后可以把重要通知和广告通知分别设到不同的渠道散，这样当用户不想要广告通知的时候就不需要把整个通知禁止或者直接把App卸载。</p><p>例如，在android o 中，系统会有这个界面<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050326690869.jpg" alt=""><br>可以看到，用户可以选择关闭某个渠道的通知</p><p><strong>创建渠道的只需要3步</strong></p><ul><li>使用渠道唯一ID和名字创建</li><li>配置渠道</li><li>注册渠道到NotificationManager</li></ul><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用唯一的ID创建渠道对象</span></span><br><span class="line">NotificationChannel adChannel = <span class="keyword">new</span> NotificationChannel(AD_CHANNEL_ID,</span><br><span class="line">      <span class="string">"广告渠道"</span>,</span><br><span class="line">       NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line"><span class="comment">//初始化channel</span></span><br><span class="line">adChannel.setLightColor(Color.RED);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向notification manager 提交channel</span></span><br><span class="line">NotificationManager notificationManager  = (NotificationManager)</span><br><span class="line">            getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">notificationManager.createNotificationChannel(adChannel);</span><br></pre></td></tr></table></figure><blockquote><p>如果一个应用发送通知的时候没有设置channelId，将会引发崩溃</p></blockquote><h3 id="通知标志（Notification-badges）"><a href="#通知标志（Notification-badges）" class="headerlink" title="通知标志（Notification badges）"></a>通知标志（Notification badges）</h3><p>效果如图<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050363163589.jpg" alt=""><br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050365285068.gif" alt=""></p><p>如果不想使用badges，可以通过以下代码设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对，这是整个channel 控制的</span></span><br><span class="line">mChannel.setShowBadge(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>同时，你也能控制notifications的数字，也就是图片这个<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050368297090.jpg" alt=""></p><p>通过以下代码控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = <span class="keyword">new</span> </span><br><span class="line">Notification.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">    .setNumber(messageCount)</span><br></pre></td></tr></table></figure><h3 id="通知清除（Notification-dismissal）"><a href="#通知清除（Notification-dismissal）" class="headerlink" title="通知清除（Notification dismissal）"></a>通知清除（Notification dismissal）</h3><p>API 26 中添加了这个方法</p><p><strong>onNotificationRemoved</strong></p><table><thead><tr><th>Parameters</th><th></th></tr></thead><tbody><tr><td>sbn</td><td>StatusBarNotification：一种数据结构，封装至少用于发布的原始信息（标签和ID）和源（包名称）</td></tr><tr><td>rankingMap</td><td>NotificationListenerService.RankingMap：当前排名地图可用于检索活动通知排名信息。</td></tr><tr><td>reason</td><td>int：<a href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_LISTENER_CANCEL" target="_blank" rel="noopener">REASON_LISTENER_CANCEL</a>，等</td></tr></tbody></table><p>通过判断第三个参数是<code>REASON_CANCEL</code>还是<code>REASON_LISTENER_CANCEL</code>就可以知道是用户删除还是系统删除了，然而我并不知道有啥用[doge]</p><h3 id="背景颜色（Colorized）"><a href="#背景颜色（Colorized）" class="headerlink" title="背景颜色（Colorized）"></a>背景颜色（Colorized）</h3><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050369807944.jpg" alt=""></p><p>设置背景颜色需要三要素</p><ol><li>必须是ongoing notification</li><li>通过<code>setColor</code>,也就是用来设置LED灯的API设置颜色</li><li>通过<code>setColorRized(true)</code> 来开启</li></ol><p>以下是示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当然这个代码是不能创建通知</span></span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>,AD_CHANNEL_ID)</span><br><span class="line">                .setOngoing(<span class="keyword">true</span>)</span><br><span class="line">                .setColor(Color.RED)</span><br><span class="line">                .setColorized(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><h3 id="锁屏排序（Lockscreen-Ordering）"><a href="#锁屏排序（Lockscreen-Ordering）" class="headerlink" title="锁屏排序（Lockscreen Ordering）"></a>锁屏排序（Lockscreen Ordering）</h3><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050373340368.jpg" alt=""></p><p>系统自动通过<code>setCategory()</code>,<code>setPriority()</code>和<code>addPersion()</code>进行排序</p><h3 id="消息样式（MessageStyle）"><a href="#消息样式（MessageStyle）" class="headerlink" title="消息样式（MessageStyle）"></a>消息样式（MessageStyle）</h3><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050374877643.jpg" alt=""></p><p>支持在折叠中显示更多的文字</p><h2 id="求关注"><a href="#求关注" class="headerlink" title="求关注"></a>求关注</h2><p>如果我总结得不错，不妨关注一下我的微信号，每周更新安卓开发最新的资讯</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-10-15050378106834.jpg" alt="-c"></p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> notification </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android自动构建之gitlab实现 </title>
      <link href="/2017/09/08/android%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%B9%8Bgitlab%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/09/08/android%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%B9%8Bgitlab%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="为什么要使用gitlab-ci"><a href="#为什么要使用gitlab-ci" class="headerlink" title="为什么要使用gitlab.ci"></a>为什么要使用gitlab.ci</h2><p>大部分的人都是使用jenkins作为持续集成工具。jenkins作为老牌的持续集成的确有很多优势。但是，只要想想部署jenkins之后还需要一堆的配置你才能进行安卓的自动化部署就觉得害怕。而且我还要找个服务器去部署jenkins。但是，使用gitlab.ci 就方便很多。</p><p>具体特点如下</p><ol><li>gitlab.ci 基于docker，搭建构建环境非常方便.可以直接使用各种已经成熟的镜像搭建</li><li>与gitlab 无缝集成，直接支持，无需配置各种webhook</li><li>使用gitlab runner 可以轻松配置各种主机变成构建服务器</li><li>有免费的使用时间，2000分钟已经足够的一般人使用了。如果不够使用，还支持自定义gitlab runner </li></ol><p>缺点也是有的</p><ol><li>不支持tag构建</li><li>只能在代码里面放置一份gitlab.yml。根据不同的branch 构建的时候就有点麻烦了</li></ol><p>anyway,这个东西还是方便的。</p><h2 id="先放上配置一览图，下面逐个解析"><a href="#先放上配置一览图，下面逐个解析" class="headerlink" title="先放上配置一览图，下面逐个解析"></a>先放上配置一览图，下面逐个解析</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">thyrlian/android-sdk:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">sdkmanager</span> <span class="string">"build-tools;25.0.3"</span></span><br><span class="line">   <span class="string">"platforms;android-25"</span> <span class="string">"tools"</span> </span><br><span class="line">   <span class="string">"extras;google;google_play_services"</span> </span><br><span class="line">   <span class="string">"extras;google;m2repository"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./gradlew</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./gradlew</span> <span class="string">assembleDebug</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">app/build/outputs/apk</span></span><br><span class="line"></span><br><span class="line"><span class="attr">unitTests:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./gradlew</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h2 id="局部解析"><a href="#局部解析" class="headerlink" title="局部解析"></a>局部解析</h2><h3 id="1-选择镜像"><a href="#1-选择镜像" class="headerlink" title="1. 选择镜像"></a>1. 选择镜像</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">thyrlian/android-sdk:latest</span></span><br></pre></td></tr></table></figure><p>这个表示我使用<code>thyrlian/android-sdk</code>最后一个版本的镜像。这个镜像已经封装好android sdk ,java和gradle 环境，可以直接使用。gitlab.ci 好处也是体现在这里了，直接使用已经完成的镜像。</p><a id="more"></a><h3 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">before_script:</span><br><span class="line">  - sdkmanager &quot;build-tools;25.0.3&quot;</span><br><span class="line">   &quot;platforms;android-25&quot; &quot;tools&quot; </span><br><span class="line">   &quot;extras;google;google_play_services&quot; </span><br><span class="line">   &quot;extras;google;m2repository&quot;</span><br><span class="line">  - chmod +x ./gradlew</span><br></pre></td></tr></table></figure><p>尽管image已经为我们提供了运行环境和sdk包，但是只是基础的东西，具体到某个包还是要单独下载的。</p><p><code>sdkmanager &quot;build-tools...</code> 这句是使用<strong>sdkmanager</strong> 安装我使用的编译需要的sdk的包。不同的项目可能不一样，需要自己定制这一句。详细包的写法，可以直接运行本地的<code>sdkmanger --list</code>就可以看到。</p><blockquote><p> “extras;google;m2repository”,”build-tools;25.0.3” “platforms;android-25” “tools” 这几种包基本是必须的，只是项目不一样，对应的版本可能不一样</p></blockquote><p><code>chmod +x ./gradlew</code> 这个是恢复./gradlew 的运行权限，没有这句可能无法运行gradle</p><h3 id="3-定义阶段"><a href="#3-定义阶段" class="headerlink" title="3.定义阶段"></a>3.定义阶段</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>这里告诉runner，我要运行两个阶段，一个是build,一个是test</p><h3 id="4-实现阶段"><a href="#4-实现阶段" class="headerlink" title="4.实现阶段"></a>4.实现阶段</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./gradlew</span> <span class="string">assembleDebug</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">app/build/outputs/apk</span></span><br><span class="line"></span><br><span class="line"><span class="attr">unitTests:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./gradlew</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p><strong>build</strong> 这个阶段中我定义了<code>./gradlew assembleDebug</code> 这个任务，并同时把产物<code>artifacts</code>的路径标识出来，这样着，当完成<code>./gradlew assembleDebug</code>这个任务的时候，就可以在下载<code>app/build/outputs/apk</code></p><p><strong>unitTests</strong> 如名，这个阶段我运行了单元测试</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用gitlab.ci 其实就三步</p><ol><li>在项目根目录添加gitlab.yml 文件</li><li>编写gitlab.yml 文件</li><li>提交到gitlab上</li></ol><p>这三部完成之后，就能在gitlab上运行了</p><p>参考文章<br><a href="https://about.gitlab.com/2016/11/30/setting-up-gitlab-ci-for-android-projects/" target="_blank" rel="noopener">Setting up GitLab CI for Android projects</a></p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> gitlab </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安卓保存状态小结</title>
      <link href="/2017/09/08/%E5%AE%89%E5%8D%93%E4%BF%9D%E5%AD%98%E7%8A%B6%E6%80%81%E5%B0%8F%E7%BB%93/"/>
      <url>/2017/09/08/%E5%AE%89%E5%8D%93%E4%BF%9D%E5%AD%98%E7%8A%B6%E6%80%81%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h2><p>重写<code>onSaveInstanceState</code>方法，在这个方法中保存数据。</p><p><strong>注意事项</strong></p><blockquote><ol><li><code>onSaveInstanceState</code> 这个方法不属于任何的一个生命周期。只有系统检测到这个Activity会被杀死的时候调用</li><li>你可以把数据保存在<code>outState</code> 这个参数中，也可以保存在磁盘中，并不会影响数据的恢复。</li><li>View的状态会根据View的ID自动保存在里面，dump一下outState 就能看到了。如果这个View没有ID，将不会保存到里面去，所以给所有View一个ID是一个好的习惯。</li><li>RecycleView 这些状态会自动保存进去，比如滑动位置这些。但是，<code>View</code>的<code>Visibility</code> 是不会保存的（详情可以看<code>View.SaveState</code>）</li><li>如果在A中启动了一个B，A并不一定会调用onSaveInstance。</li></ol></blockquote><h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><ul><li><p>在<code>Activity.onCreate</code>中获取 <code>saveInstanceState</code>参数，不为空就可以开始拿数据。适用与不想等到View准备好获取数据，使用场景未知。<br><strong>例子：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle onSaveInstance)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(savedInstanceState != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//restore state</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写<code>Activity.onRestoreInstanceState</code>。在这个方法调用时中，所有的View已经准备好了，这个方法是最适合恢复数据的。</p></li></ul><p><strong>注意事情</strong></p><blockquote><ol><li>所有数据必须在这个方法中恢复完毕，对，不能异步，只能同步。不然View是没法恢复到保存状态前的状态的。</li></ol></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在<code>onSaveInstance</code>中<strong>保存完成</strong>数据，在<code>onRestoreInstanceState</code>中<strong>恢复完成</strong> 数据。View的ID全部都设置上，Visiblity状态单独保存，这样就可以了。</p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Support Library v26 新特性</title>
      <link href="/2017/08/30/Android-Support-Library-v26-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2017/08/30/Android-Support-Library-v26-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<h2 id="新特性一览"><a href="#新特性一览" class="headerlink" title="新特性一览"></a>新特性一览</h2><ul><li>字体，支持在xml中使用自定义字体和提供可下载字体</li><li>emojis ，提供可以直接解析emoji的三个控件</li><li>自动调整字体大小（autosize text）</li><li>物理动画 (physicis-based animation)，弹簧动画和抛物动画</li><li>向量图形（Vector Graphices)，FillType 支持和Path动画支持</li><li>Library 现在最低支持到API 14,减少了1.4k个方法</li></ul><a id="more"></a><h2 id="文本和字体"><a href="#文本和字体" class="headerlink" title="文本和字体"></a>文本和字体</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>现在可以好像使用其他资源一样使用字体了,新建一个font文件夹<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-01-15041002048842.jpg" alt=""></p><p>同时支持downloadable font ，无需把字体打包到APK中，google play service 会自动为我们下载这些字体<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-01-15041004030542.jpg" alt=""></p><h3 id="emojis-支持"><a href="#emojis-支持" class="headerlink" title="emojis 支持"></a>emojis 支持</h3><p>因为系统并不能总是有最新的unicode 编码（可以理解为最新的emoji），Library 为我们提供了3个控件去显示Emoji,<code>EmojiEditText</code> ,<code>EmojiTextView</code> ,<code>EmojiButton</code>。同时也为我们提供了控件的AppCompat版本,<code>AppCompatEmojiEditText</code>, <code>AppCompatEmojiTextView</code> ,<code>AppCompatEmojiButton</code></p><h3 id="自动调整字体大小"><a href="#自动调整字体大小" class="headerlink" title="自动调整字体大小"></a>自动调整字体大小</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height-</span>"<span class="attr">300dp</span>"</span></span><br><span class="line"><span class="tag">    <span class="attr">app:autoSizeTextType</span>=<span class="string">"uniform"</span></span></span><br><span class="line">    app:autoSizeMinTextSize="12sp" &lt;!--最小字体大小--&gt;</span><br><span class="line">    app:autoSizeMaxTextSize="100sp" <span class="comment">&lt;!--最大字体大小--&gt;</span></span><br><span class="line">    app:autoSizeStepGranularity="2sp" <span class="comment">&lt;!--步进--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="物理动画（physicis-based-animation）"><a href="#物理动画（physicis-based-animation）" class="headerlink" title="物理动画（physicis-based animation）"></a>物理动画（physicis-based animation）</h2><p>提供两种物理动画，分别是</p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>弹力动画，类似于facebook 的rebound<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-01-15041020283767.gif" alt=""></p><h3 id="Fling"><a href="#Fling" class="headerlink" title="Fling"></a>Fling</h3><p>一个扔的动画，可以自定义初始速度，摩擦力，最大最小动画值等<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-01-15041022398568.gif" alt=""></p><h2 id="矢量图形-Vector-Graphics"><a href="#矢量图形-Vector-Graphics" class="headerlink" title="矢量图形(Vector Graphics)"></a>矢量图形(Vector Graphics)</h2><p>增加了两个Vector Drawable Compat 的属性</p><h3 id="FillType"><a href="#FillType" class="headerlink" title="FillType"></a>FillType</h3><p>和SVG上的Fill-rule 是一样的，提供两个值，evenOdd和noZero<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-01-15041026143644.jpg" alt=""></p><h3 id="Path-based-interpolator"><a href="#Path-based-interpolator" class="headerlink" title="Path-based interpolator"></a>Path-based interpolator</h3><p>新加的属性可以支持path间的动画<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-09-01-15041037071497.gif" alt=""></p><h2 id="库和行为更改"><a href="#库和行为更改" class="headerlink" title="库和行为更改"></a>库和行为更改</h2><ul><li>废除 Percent Support 库，使用ConstraintLayout 代替</li><li>PrefereceDataStore Api，可以自定义settings的存储方式</li><li><code>executePendingTransaction()</code> ,<code>commitNow()</code>不在允许在FragmentManager 状态改变的时候调用</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Support Library </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TextView onSaveInstance 不恢复问题</title>
      <link href="/2017/08/25/TextView-onSaveInstance-%E4%B8%8D%E6%81%A2%E5%A4%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2017/08/25/TextView-onSaveInstance-%E4%B8%8D%E6%81%A2%E5%A4%8D%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>TextView 在调用<code>onRestoreInstanceState</code> 并没有恢复数据</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">...</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">android:freezesText</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>需要把freezesText 这个开关打开</p><p>查看<code>TextView.OnSavenInstance</code> 可以看到。freezesText这个开关不开，是不会把文字放到ss中的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (freezesText || hasSelection) &#123;</span><br><span class="line">          SavedState ss = <span class="keyword">new</span> SavedState(superState);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (freezesText) &#123;</span><br><span class="line">              <span class="keyword">if</span> (mText <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">                  <span class="keyword">final</span> Spannable sp = <span class="keyword">new</span> SpannableStringBuilder(mText);</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (mEditor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                      removeMisspelledSpans(sp);</span><br><span class="line">                      sp.removeSpan(mEditor.mSuggestionRangeSpan);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  ss.text = sp;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  ss.text = mText.toString();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 坑 </tag>
            
            <tag> TextView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio 3.0 Beta 2现已推出</title>
      <link href="/2017/08/23/Android-Studio-3-0-Beta-2%E7%8E%B0%E5%B7%B2%E6%8E%A8%E5%87%BA/"/>
      <url>/2017/08/23/Android-Studio-3-0-Beta-2%E7%8E%B0%E5%B7%B2%E6%8E%A8%E5%87%BA/</url>
      <content type="html"><![CDATA[<p>2017年8月11日，星期五</p><p> Android Studio 3.0 Beta 2现在可以在Canary，Dev和Beta版的渠道中使用。</p><p>此版本修复了一个问题，导致编译器在启用Java 8语言功能并指定<code>minSdkVersion 19</code>或更高版本时抛出<code>ClassNotFoundException</code>，这也导致一些代码分析工具（如ProGuard）失败。有关详细信息，请参阅问题<a href="https://issuetracker.google.com/64527520" target="_blank" rel="noopener">＃64527520</a>。已知问题：如果您现有的Android Studio项目使用的是Android插件3.0.0的Alpha版本（如3.0.0-alpha9），则迁移到Android插件3.0.0-beta1（或更高）并同步您的项目时可能会收到以下错误：<strong>Gradle项目刷新失败</strong>。</p><p>要解决这个问题选择从菜单栏中选择<strong>Build &gt; Clean Project</strong> - 您需要为每个项目执行一次此操作。然后，您可以通过从工具栏中单击<strong>Sync Project</strong> ，将其与Gradle对应。</p><p>想了解AndroidStudio 3.0 的新特性，可以看这篇文章:<a href="http://47log.com/2017/05/18/Android-Studio-3-0-%E6%96%B0%E7%89%B9%E6%80%A7/" target="_blank" rel="noopener">Android Studio 3.0 新特性</a></p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> android studio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ownCloud部署之docker实现</title>
      <link href="/2017/08/19/ownCloud%E9%83%A8%E7%BD%B2%E4%B9%8Bdocker%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/08/19/ownCloud%E9%83%A8%E7%BD%B2%E4%B9%8Bdocker%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="ownCloud简介"><a href="#ownCloud简介" class="headerlink" title="ownCloud简介"></a>ownCloud简介</h2><p><a href="https://owncloud.org/" target="_blank" rel="noopener">ownCloud</a> 是一个开源的云盘解决方案，用的是PHP（还不支持PHP7），性能一般也就够。支持3个数据库，本地的SQLite ，MySQL和PostgreSQL。本次部署中，将会使用MySQL。</p><h2 id="镜像选取"><a href="#镜像选取" class="headerlink" title="镜像选取"></a>镜像选取</h2><p>ownCloud 这个解决方案比较成熟，已经有<a href="https://hub.docker.com/_/owncloud/" target="_blank" rel="noopener">官方的docker镜像</a>了，我们只是需要在官方的docker镜像上修改就好了。</p><a id="more"></a><h2 id="加入Microsoft-Office-文档支持"><a href="#加入Microsoft-Office-文档支持" class="headerlink" title="加入Microsoft Office 文档支持"></a>加入Microsoft Office 文档支持</h2><p>由于我的老大要求必须要支持在线预览MS文档，所以我们还需要对官方的镜像加入一些东西。具体内容就是安装libreOffice 以支持在线预览。</p><p>具体Dockerfile如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> owncloud</span><br><span class="line"><span class="keyword">MAINTAINER</span> &lt;HangoX liang.hanguang93@gmail.com&gt;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y libreoffice</span></span><br></pre></td></tr></table></figure><p>由于使用的是Daocloud的stack，不支持在docker-compose 中build镜像，所以需要自己把owncloud的镜像先构建好才能在docker-compose使用</p><h2 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h2><h4 id="带MYSQL版本"><a href="#带MYSQL版本" class="headerlink" title="带MYSQL版本:"></a>带MYSQL版本:</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.0'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  owncloud:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">daocloud.io/hangox/owncloud:v9.1.4-2</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9999</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/data/owncloud:/var/www/html</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">    - mysql:</span><span class="string">db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">library/mysql:5.6.35</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/data/mysql:/var/lib/mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_ROOT_PASSWORD=heygears-admin</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_USER=owncloud</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_PASSWORD=heygears-owncloud</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_DATABASE=owncloud</span></span><br></pre></td></tr></table></figure><blockquote><p>owncloud 中的镜像是我自己构建的，不公开的，需要填上自己的owncloud 镜像。<br>mysql 中的 端口不公开是最好的，这里公开只是为了方便外部调试而已。<br>mysql:db 中的db名字可以随便起，但是要记得，这个东西有大用</p></blockquote><h5 id="已有MySQL-Docker容器"><a href="#已有MySQL-Docker容器" class="headerlink" title="已有MySQL Docker容器"></a>已有MySQL Docker容器</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3.0'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  owncloud:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">daocloud.io/hangox/owncloud:v9.1.4-2</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">9999</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/data/owncloud:/var/www/html</span></span><br><span class="line"><span class="attr">  external_links:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&lt;mysql容器名&gt;:db</span></span><br></pre></td></tr></table></figure><h2 id="测试与访问"><a href="#测试与访问" class="headerlink" title="测试与访问"></a>测试与访问</h2><p>打开<code>&lt;主机ip&gt;:9999</code> 将会看到以下界面<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-08-19-14914059318315.jpg" width="60%"></p><p>这个时候mysql的网址就是刚才起的别名<strong>db</strong>了(其实在env里面是大写的，只是域名不分大小写而已😂)</p>]]></content>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dockerfile命令</title>
      <link href="/2017/08/19/Dockerfile%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/08/19/Dockerfile%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>格式为 <code>FROM &lt;image&gt;</code> 或 <code>FROM &lt;image&gt;:&lt;tag&gt;</code> 。<br>第一条指令必须为 FROM 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令(每个镜像一次)。 </p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>格式为<code>MAINTAINER &lt;name&gt;</code> ，指定维护者信息。 </p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>格式为 <code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> 。<br>前者将在 shell 终端中运行命令，即 /bin/sh -c ;后者则使用 exec 执行。指定使用其它终端可以通过第二种<br>方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code> 。<br>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \ 来换行。</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>支持三种格式</p><ul><li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 exec 执行，推荐方式</li><li><code>CMD command param1 param2</code>在 /bin/sh 中执行，提供给需要交互的应用</li><li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 ENTRYPOINT 的默认参数</li></ul><p>指定启动容器时执行的命令，每个 Dockerfile 只能有<strong>一条</strong>CMD 命令。如果指定了多条命令，只有最后一条会 被执行。<br>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。 </p><a id="more"></a><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>格式为 EXPOSE <port> [<port>…] 。<br>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配<br>一个端口转发到指定的端口。 </port></port></p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>格式为 ENV <key> <value> 。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。<br>例如</value></key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV PG_MAJOR 9.3ENV PG_VERSION 9.3.4</span><br><span class="line">RUN curl -SL http://example.com/postgres-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress\ </span><br><span class="line"></span><br><span class="line"> &amp;&amp; ... ENV PATH /usr/<span class="built_in">local</span>/postgres-<span class="variable">$PG_MAJOR</span>/bin:<span class="variable">$PATH</span>`</span><br></pre></td></tr></table></figure><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code><br>该命令将复制指定的 <src> 到容器中的 <dest> 。 其中 <src> 可以是Dockerfile所在目录的一个相对路径,也可以是一个 URL,还可以是一个 tar 文件(自动解压为目录)。</src></dest></src></p><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code><br>复制本地主机的 <src> (为 Dockerfile 所在目录的相对路径)到容器中的 <dest> 。 当使用本地目录为源目录时，推荐使用 COPY 。</dest></src></p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>两种格式:</p><ul><li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> （没有Shell的时候使用这个）</li><li><code>ENTRYPOINT command param1 param2</code> (shell中执行)</li></ul><p>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。<br>每个 Dockerfile 中只能有<strong>一个 ENTRYPOINT</strong> ，当指定多个时，只有最后一个起效。</p><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>格式为 <code>VOLUME [&quot;/data&quot;]</code> </p><p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>格式为 <code>USER daemon</code> </p><p>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。<br>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如: <code>roupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code> 。要临时获取管理员权限可以使用 gosu ，而不推荐sudo 。</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>格式为 <code>WORKDIR /path/to/workdir</code> </p><p>为后续的 <code>RUN</code> 、 <code>CMD</code> 、 <code>ENTRYPOINT</code> 指令配置工作目录。<br>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。<br>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a </span><br><span class="line">WORKDIR bWORKDIR c</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>则最终路径为 <code>/a/b/c</code> </p><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>格式为 <code>ONBUILD [INSTRUCTION]</code><br>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。 例如，Dockerfile 使用如下的内容创建了镜像 <code>image-A</code> 。</p><pre><code class="bash">[...]ONBUILD ADD . /app/srcONBUILD RUN /usr/<span class="built_in">local</span>/bin/python-build --dir /app/src [...]</code></pre><p>如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 FROM image-A 指定基础镜像时，会自动执行 ONBUILD 指令内容，等价于在后面添加了两条指令。</p><pre><code class="bash">FROM image-A<span class="comment">#Automatically run the following</span>ADD . /app/srcRUN /usr/<span class="built_in">local</span>/bin/python-build --dir /app/src</code></pre><p><strong>使用 ONBUILD 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild </strong></p>]]></content>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>辅助功能和本地化</title>
      <link href="/2017/08/19/%E8%BE%85%E5%8A%A9%E5%8A%9F%E8%83%BD%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
      <url>/2017/08/19/%E8%BE%85%E5%8A%A9%E5%8A%9F%E8%83%BD%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h2><h3 id="为什么要有支持这个功能"><a href="#为什么要有支持这个功能" class="headerlink" title="为什么要有支持这个功能"></a>为什么要有支持这个功能</h3><p><strong>为了获得跟多的用户</strong> 并不是所有的用户使用设备方式都是一样的，有些人使用的是导向盘，有些人不能使用触摸屏，视力障碍人士不能看到你的屏幕。</p><h3 id="Android-提供的无障碍访问方式"><a href="#Android-提供的无障碍访问方式" class="headerlink" title="Android 提供的无障碍访问方式"></a>Android 提供的无障碍访问方式</h3><ul><li>文字转语音(Text to Speech)</li><li>震动反馈(Haptic Feekback)</li><li>手势导航(gesture navigation)</li><li>轨迹球（trackball)</li><li>方向导航（directional navigation）</li></ul><h3 id="检查清单"><a href="#检查清单" class="headerlink" title="检查清单"></a>检查清单</h3><ul><li>为没有文字的用户界面提供说明(content description)。例如checkbox ,imagebutton imageview。使用<code>android:description</code> or <code>setContentDescripton</code>设置内容访问。注意一点，装饰图像不适用这个东西，需要把desciption设置为null</li><li>焦点可导航。确保使用软件或者硬件的方向导航的人可以很好的访问软件内容。</li><li>反馈不能仅仅只有音频反馈（照顾不能听到的人）。例如，系统通知，不能只是有声音，同时也要有震动，通知栏出现</li></ul><a id="more"></a><h3 id="启用和使用Talkback"><a href="#启用和使用Talkback" class="headerlink" title="启用和使用Talkback"></a>启用和使用Talkback</h3><h4 id="测试-TalkBack"><a href="#测试-TalkBack" class="headerlink" title="测试 TalkBack"></a>测试 TalkBack</h4><p>TalkBack 辅助服务可以在用户将焦点移动到用户界面控件上时，读出控件上的内容。此服务应该启用，作为焦点导航和声音提示测试的一部分。</p><h4 id="要启用-TalkBack-辅助服务"><a href="#要启用-TalkBack-辅助服务" class="headerlink" title="要启用 TalkBack 辅助服务"></a>要启用 TalkBack 辅助服务</h4><p>启动“设置”应用。 导航至“辅助功能”类别并选择它。 选择“辅助功能”以启用它。 选择 TalkBack 以启用该功能。</p><p>注：</p><blockquote><p>尽管 TalkBack 是残障人士用户的首选 Android 辅助服务，但也有其他可用的辅助服务可供用户自行下载。</p></blockquote><p>如需启用和使用 TalkBack 的更多信息，参见 TalkBack。</p><h4 id="测试基于焦点的导航"><a href="#测试基于焦点的导航" class="headerlink" title="测试基于焦点的导航"></a>测试基于焦点的导航</h4><p>焦点导航是使用方向控件在应用的单个用户界面元素之间导航，以操控应用。v 视力或手动灵活性受限的用户通常使用此导航模式，而非触摸导航。作为辅助功能测试的一部分，您应该验证您的应用只需使用方向控件便可操控。</p><p>即使您的测试设备没有方向控件，您也可以仅使用焦点控制来测试您应用的导航功能。Android Emulator 提供模拟的方向控件，您可用来测试导航。您也可以使用基于软件的定向控制器，如 Eyes-Free Keyboard 应用就提供此类功能，用来在没有物理方向键的测试设备上模拟方向键的使用。</p><h3 id="sunshine-检查-练习"><a href="#sunshine-检查-练习" class="headerlink" title="sunshine 检查(练习)"></a>sunshine 检查(练习)</h3><h3 id="可以自定义无障碍服务和注意自定义的View需要自己实现无障碍服务"><a href="#可以自定义无障碍服务和注意自定义的View需要自己实现无障碍服务" class="headerlink" title="可以自定义无障碍服务和注意自定义的View需要自己实现无障碍服务"></a>可以自定义无障碍服务和注意自定义的View需要自己实现无障碍服务</h3><h3 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h3><h4 id="本地化检查清单"><a href="#本地化检查清单" class="headerlink" title="本地化检查清单"></a>本地化检查清单</h4><ul><li>文本（text)</li><li>数字（number)</li><li>音频 (audio)</li><li>图像（graphics）</li><li>货币（currency)</li></ul><h4 id="本地化目标的三个维度"><a href="#本地化目标的三个维度" class="headerlink" title="本地化目标的三个维度"></a>本地化目标的三个维度</h4><ul><li>国家(Country)</li><li>地理区域(locale)，例如日期，时间，货币的格式化也很重要</li><li>语言(language)</li></ul><h4 id="为本地化设置布局"><a href="#为本地化设置布局" class="headerlink" title="为本地化设置布局"></a>为本地化设置布局</h4><ul><li>预留30%的多余空间给译文</li><li>为不同的译文设计不同的布局（会增加维护成本）</li></ul><p>没有哪一种最好，取决于你使用场景</p><h4 id="支持从右往左的布局"><a href="#支持从右往左的布局" class="headerlink" title="支持从右往左的布局"></a>支持从右往左的布局</h4><p>两部走:</p><ol><li>在AndroidManifest.xml 中开启支持</li><li>更改布局中的left/right 为start/end(17+可以只是更改，&lt;=16需要两个都写)</li></ol><h5 id="AndroidManifest-开启"><a href="#AndroidManifest-开启" class="headerlink" title="AndroidManifest 开启"></a>AndroidManifest 开启</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mainfest</span>&gt;</span></span><br><span class="line">.....</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">applicatoin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mainfest</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="布局更改"><a href="#布局更改" class="headerlink" title="布局更改"></a>布局更改</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_toLeftOf</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_toStartOf</span>=<span class="string">"id"</span> </span></span><br><span class="line">    &lt;!--把所有的left换成start --&gt;</span><br><span class="line">    android:layout_alignParentRight="true"</span><br><span class="line">    android:layout_alignParentEnd="true"</span><br><span class="line">    <span class="comment">&lt;!--同理，把所有的right 换成End--&gt;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="练习，四面八方的阳光"><a href="#练习，四面八方的阳光" class="headerlink" title="练习，四面八方的阳光"></a>练习，四面八方的阳光</h4><h4 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h4><p>注意</p><ul><li><a href="http://developer.android.youdaxue.com/reference/android/text/format/DateUtils.html" target="_blank" rel="noopener">DateUtils</a>,DateFormat (日期函数)</li><li><a href="http://developer.android.youdaxue.com/reference/android/telephony/PhoneNumberUtils.html" target="_blank" rel="noopener">PhoneNumberUtils</a> (电话号码函数)</li><li>String.format()) 或 DecimalFormat(数字和货币函数)</li></ul><p>的使用</p><h4 id="练习，了解资源限定符"><a href="#练习，了解资源限定符" class="headerlink" title="练习，了解资源限定符"></a>练习，了解资源限定符</h4><h4 id="测试本地化应用"><a href="#测试本地化应用" class="headerlink" title="测试本地化应用"></a>测试本地化应用</h4><p>收到翻译的字符串和资源并放入应用之后，您需要对应用进行测试，确保应用能够向国际用户发布。</p><p>人工测试可以帮助您发现布局和字符串中的本地化问题，这些问题可能影响用户满意度，最终影响应用的用户评分。</p><h5 id="设置测试环境"><a href="#设置测试环境" class="headerlink" title="设置测试环境"></a>设置测试环境</h5><p>要测试已本地化的应用，您需要根据您的目标市场和适配机型，设置包含多种设备（或虚拟设备）和屏幕尺寸的环境。 请注意，特定地区的设备种类可能不同。 如果可能，请将您的测试设备设置为用户能够使用的实际设备。</p><h5 id="查找常见的本地化问题"><a href="#查找常见的本地化问题" class="headerlink" title="查找常见的本地化问题"></a>查找常见的本地化问题</h5><p>在每台测试设备上的 Settings 中设定语言或语言区域。安装并启动应用，然后浏览所有 UI 流程、对话框和用户互动。 在输入框中输入文本。要查找的问题包括：</p><ul><li>截断的文本，或者与 UI 元素或屏幕边缘重叠的文本</li><li>不合理的换行</li><li>错误的断句或标点</li><li>错误的字母排序</li><li>错误的布局方向或文本方向</li><li>未翻译的文本 — 如果显示的是默认字符串而不是翻译过的字符串，那么您可能忽略了这些字符串的翻译或是使用了错误的语言限定符标记了资源目录。</li></ul><p>如果翻译后的字符串变得过于臃肿，不能适应布局，建议您尝试简化默认文本、简化译文文本或调整默认布局。 如果问题仍然不能解决，请为该语言创建自定义布局。</p><h5 id="测试默认资源"><a href="#测试默认资源" class="headerlink" title="测试默认资源"></a>测试默认资源</h5><p>使用您支持的所有语言和语言区域测试应用之后，请务必使用不支持的语言和语言区域再次测试。 这有助于确保您的应用包括一整套默认字符串和资源，可供所有用户使用，不论用户设置了哪种首选语言。</p><h5 id="邀请母语使用者进行复查"><a href="#邀请母语使用者进行复查" class="headerlink" title="邀请母语使用者进行复查"></a>邀请母语使用者进行复查</h5><p>在测试过程中或之后，建议您邀请相应的母语使用者对本地化的应用进行复查。 一种方法是让目标地区的用户进行 Beta 版测试 — Google Play 可以帮助您开展这项工作。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用fuubo有感之Toolbar+Drawer</title>
      <link href="/2017/08/19/%E7%94%A8fuubo%E6%9C%89%E6%84%9F%E4%B9%8BToolbar-Drawer/"/>
      <url>/2017/08/19/%E7%94%A8fuubo%E6%9C%89%E6%84%9F%E4%B9%8BToolbar-Drawer/</url>
      <content type="html"><![CDATA[<h3 id="我的目标"><a href="#我的目标" class="headerlink" title="我的目标"></a>我的目标</h3><p>![此处输入图片的描述][1]</p><hr><a id="more"></a><h3 id="以下是步骤"><a href="#以下是步骤" class="headerlink" title="以下是步骤"></a>以下是步骤</h3><p>首先创建一个主题，如果你不想用默认的颜色的话</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--ActionBar背景颜色--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/primary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--状态栏颜色--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/primary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--去掉ActionBar下面的阴影--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"elevation"</span>&gt;</span>0dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Toolbar Activity使用的主题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Toolbar"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--隐藏ActionBar--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--改变汉堡包和返回箭头的样式--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"drawerArrowStyle"</span>&gt;</span>@style/MyAppDrawerArrowStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--改变标题样式--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"titleTextStyle"</span>&gt;</span>@style/MyTitleTextStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--汉堡包样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyAppDrawerArrowStyle"</span> <span class="attr">parent</span>=<span class="string">"Widget.AppCompat.DrawerArrowToggle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--改变汉堡包颜色为白色--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"color"</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--改变标题栏样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyTitleTextStyle"</span> <span class="attr">parent</span>=<span class="string">"TextAppearance.AppCompat.Widget.ActionBar.Title"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--把文字颜色改为白色--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">"com.hangox.respecttofuubo.MainActivity"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.Toolbar"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着看activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/drawerLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 主要显示内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--为toolbar设定主题，不然颜色会很砌块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:titleTextAppearance</span>=<span class="string">"@style/MyTitleTextStyle"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:minHeight</span>=<span class="string">"?attr/actionBarSize"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--左边菜单栏--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/leftMenu"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.hangox.respecttofuubo.LeftMenuFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"@dimen/navigation_width"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_left_menu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后我们看MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hangox.respecttofuubo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.GravityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBar;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarActivity;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"><span class="keyword">import</span> butterknife.InjectView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 47</span></span><br><span class="line"><span class="comment"> * created at February 19 2015</span></span><br><span class="line"><span class="comment"> * 主要启动Activity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectView</span>(R.id.toolbar)</span><br><span class="line">    Toolbar toolbar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectView</span>(R.id.drawerLayout)</span><br><span class="line">    DrawerLayout drawerLayout;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectView</span>(R.id.viewPager)</span><br><span class="line">    ViewPager viewPager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//要使用Support v7 的这个 不然是没有箭头效果</span></span><br><span class="line">    <span class="keyword">private</span> ActionBarDrawerToggle mDrawerToggle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ButterKnife.inject(<span class="keyword">this</span>);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">        setUpDrawerToggle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line"><span class="comment">//        int id = item.getItemId();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //noinspection SimplifiableIfStatement</span></span><br><span class="line"><span class="comment">//        if (id == R.id.action_settings) &#123;</span></span><br><span class="line"><span class="comment">//            return true;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpDrawerToggle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置drawer边缘的图片，不要用纯颜色的，要用有大小，不然无效</span></span><br><span class="line">        drawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);</span><br><span class="line">        <span class="comment">//设置drawer出来时候空白部分的颜色</span></span><br><span class="line">        drawerLayout.setScrimColor(Color.TRANSPARENT);</span><br><span class="line">        mDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>,drawerLayout,toolbar,</span><br><span class="line">                R.string.navigation_drawer_open,R.string.navigation_drawer_close)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerSlide</span><span class="params">(View drawerView, <span class="keyword">float</span> slideOffset)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onDrawerSlide(drawerView, slideOffset);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//同步View 状态</span></span><br><span class="line">        drawerLayout.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mDrawerToggle.syncState();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        drawerLayout.setDrawerListener(mDrawerToggle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后大功告成<br>  [1]: <a href="http://7vzoxp.com1.z0.glb.clouddn.com/wp-content/uploads/actionbar_toolbar.gif" target="_blank" rel="noopener">http://7vzoxp.com1.z0.glb.clouddn.com/wp-content/uploads/actionbar_toolbar.gif</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法,两数之和</title>
      <link href="/2017/08/12/%E7%AE%97%E6%B3%95-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2017/08/12/%E7%AE%97%E6%B3%95-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      <content type="html"><![CDATA[<p>问题来源:<a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener">two sum</a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个整数数组，返回<strong>两个</strong>数字的<strong>索引</strong>，使它们相加到一个特定的目标。 您可以假设每个输入都只有一个解决方案，而您可能不会使用相同的元素两次。</p><p><strong>Example:</strong></p><p>Given nums = [2, 7, 11, 15], target = 9,</p><p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p><a id="more"></a><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><h3 id="正向思维解法"><a href="#正向思维解法" class="headerlink" title="正向思维解法"></a>正向思维解法</h3><p>直接遍历所有的组合，求出问题的解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (target == nums[j] + nums[i]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析:</strong><br>这是最简单的解法。两个嵌套循环，时间复杂度为O(n^2)。空间复杂度为O(1)</p><h3 id="逆向思维解法"><a href="#逆向思维解法" class="headerlink" title="逆向思维解法"></a>逆向思维解法</h3><p>用目标减去加数1，得到加数2，再在数组中寻找。</p><h4 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target - nums[i] == nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong><br>没错，就是和第一解法时间空间复杂度都是一样的😂。没事，我们可以优化一下的。</p><h4 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h4><p>在实现一中，我们的瓶颈主要是在如何根据值去找到索引的问题上，所以这里我们使用Map去优化根据值去寻找位置的瓶颈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析:</strong><br>我们使用一个循环把数据与位置建立索引，然后获取的时候直接从map中直接获取，这样就可以避免了两个嵌套的循环了，是的时间复杂度为O(n) ,空间复杂度为O(1).</p><blockquote><blockquote><p>note: 在算法中，我们不考虑map这些数据结构具体实现使用的时间</p></blockquote></blockquote><h4 id="实现3"><a href="#实现3" class="headerlink" title="实现3"></a>实现3</h4><p>实现2中使用了两个循环，能不能把第一个循环也去掉呢？答案是可以的。一边循环，一边插入map，然后获取这个差值是否已经加入到map中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>这个复杂度和实现2是一样的，时间为O(n),空间为O(n)，但细看还是有差别的，这个算法的实际上比实现2的快了1倍</p>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio 3.0 Beta1 更新日志</title>
      <link href="/2017/08/10/Android-Studio-3-0-Beta1-%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2017/08/10/Android-Studio-3-0-Beta1-%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>翻译自<a href="https://androidstudio.googleblog.com/2017/08/android-studio-30-beta-1.html" target="_blank" rel="noopener">谷歌博客</a></p><p><strong>2017年8月9日，星期三</strong></p><p>Android Studio 3.0 Beta 1现在可以在金丝雀和开发渠道中使用。</p><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><p>如果您现有的Android Studio项目使用的是Android插件3.0.0的Alpha版本（如3.0.0-alpha9），则迁移到Android 3.0.0-beta1后<code>sync your project</code>将会遇到： <strong>Gradle project refresh failed</strong>。</p><p>解决此问题的办法就是从菜单栏中选择 <strong>Build&gt; Clean Project</strong> - 您只需对每个项目执行一次此操作。然后，您可以通过从工具栏中单击“ <strong>Sync Project</strong> ” ，将其与Gradle对应。</p><h2 id="此版本包含各种错误修复，包括以下内容："><a href="#此版本包含各种错误修复，包括以下内容：" class="headerlink" title="此版本包含各种错误修复，包括以下内容："></a>此版本包含各种错误修复，包括以下内容：</h2><p>修复了使用Kotlin插件崩溃的类加载问题。<br>修复了菜单栏不再显示的问题。（问题<a href="https://issuetracker.google.com/63743086" target="_blank" rel="noopener">＃63743086</a>）</p>]]></content>
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
            <tag> Google </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何合法的修改Git子模块远端</title>
      <link href="/2017/08/10/2017-08-10/"/>
      <url>/2017/08/10/2017-08-10/</url>
      <content type="html"><![CDATA[<h2 id="首先直接修改根目录下的-gitmoudule-文件"><a href="#首先直接修改根目录下的-gitmoudule-文件" class="headerlink" title="首先直接修改根目录下的.gitmoudule 文件"></a>首先直接修改根目录下的<code>.gitmoudule</code> 文件</h2><p>把URL 替换成自己想要修改的URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;libraries/GaiaLibrary4BLE&quot;]</span><br><span class="line">path = libraries/GaiaLibrary4BLE</span><br><span class="line">url = http://yousumodule_remote</span><br></pre></td></tr></table></figure></p><h2 id="然后同步设置"><a href="#然后同步设置" class="headerlink" title="然后同步设置"></a>然后同步设置</h2><p>使用一下命令把设置同步到.git/config 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule sync</span><br></pre></td></tr></table></figure><h2 id="最后更新远端信息"><a href="#最后更新远端信息" class="headerlink" title="最后更新远端信息"></a>最后更新远端信息</h2><p>使用以下命令更新远端信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive --remote</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>其实就是从远端递归式的初始化的意思</p></blockquote></blockquote><p>方法参考这篇<a href="http://pa1gitsolutions.blogspot.com/2015/07/changing-git-submodules-urlbranch-to.html" target="_blank" rel="noopener">文章</a></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nexus7 的长宽分别是多少dp?</title>
      <link href="/2017/06/01/nexus7-%E7%9A%84%E9%95%BF%E5%AE%BD%E5%88%86%E5%88%AB%E6%98%AF%E5%A4%9A%E5%B0%91dp/"/>
      <url>/2017/06/01/nexus7-%E7%9A%84%E9%95%BF%E5%AE%BD%E5%88%86%E5%88%AB%E6%98%AF%E5%A4%9A%E5%B0%91dp/</url>
      <content type="html"><![CDATA[<h3 id="看看dp定义"><a href="#看看dp定义" class="headerlink" title="看看dp定义"></a>看看dp定义</h3><p><strong>密度无关像素 (dp)</strong></p><p>在定义 UI 布局时应使用的虚拟像素单位，用于以密度无关方式表示布局维度 或位置。<br>密度无关像素等于 160 dpi 屏幕上的一个物理像素，这是 系统为“中”密度屏幕假设的基线密度。在运行时，系统 根据使用中屏幕的实际密度按需要以透明方式处理 dp 单位的任何缩放 。dp 单位转换为屏幕像素很简单： px = dp * (dpi / 160)。 例如，在 240 dpi 屏幕上，1 dp 等于 1.5 物理像素。在定义应用的 UI 时应始终使用 dp 单位 ，以确保在不同密度的屏幕上正常显示 UI</p><h3 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h3><p>定义中提到一个公式<br>$$\cfrac{px}{dp}=\cfrac{dpi}{160}$$<br><strong>(命名为公式一)</strong></p><p>我们可以理解成这样<br>$$\cfrac{1px}{1dp}=\cfrac{160dpi}{160}$$</p><a id="more"></a><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>我们现在有台nexus7 ,就是下面这个样子<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-06-01-14962370789825.jpg" alt=""></p><h5 id="已知："><a href="#已知：" class="headerlink" title="已知："></a>已知：</h5><p>7英寸，1280*800 的分辨率。 </p><p><strong>求：</strong><br>宽高的dp</p><h5 id="解"><a href="#解" class="headerlink" title="解"></a>解</h5><p>根据公式:<br>$$ dpi = \cfrac{\sqrt{高^2 + 宽^2}}{ 设备英寸数 }$$</p><p><strong>（命名为公式二）</strong></p><p>所以nexus的dpi为</p><p>$$\cfrac{\sqrt{1280^2 + 800^2}}{7} = 215.64 \approx 216dpi$$</p><blockquote><p>note: 因为dpi的意思就是每英寸像素点啊，7英寸就是表示斜对角线为7英寸。所以我们要用像素点数勾股定理后除以7</p></blockquote><p>我们把公式一变形一下</p><p>$$dp = \cfrac{160}{dpi} \times px$$</p><p>计算高dp，代入已知参数<br>$$高dp = \cfrac{160}{213} \times 1280 \approx 961dp$$</p><p>同理，计算宽dp<br>$$宽dp = \cfrac{160}{213} \times 800 \approx 600dp$$</p><p>总结，宽高dp分别为 600dp和961dp.</p><h3 id="走多一步"><a href="#走多一步" class="headerlink" title="走多一步"></a>走多一步</h3><p><strong>论点一:</strong> 分辨率不变的情况下，dp和英寸大小成正比。</p><p><strong>证明：</strong><br>结合公式一和公式二可以得出以下公式<br>$$dp = \cfrac{160}{\cfrac{\sqrt{宽^2+高^2}}{屏幕英寸}} \times px$$</p><p>简化可得<br>$$dp = \cfrac{160 \times px \times 屏幕英寸}{\sqrt{宽^2+高^2}}$$</p><p>可以得出，宽高不变的情况下，英寸的提高，会导致dp直接提高，符合谷歌一开始设定，同样分辨率的设备，10英寸的平板是5英寸的手机两倍dp，有更多的设计空间。</p><p><strong>论点二:</strong> 英寸不变的情况下，dp和宽高比有关系</p><p><strong>证明:</strong><br>我们可以把论点一的公式简化成这个样子</p><p><strong>当求的dp为宽时</strong></p><p>$$dp = \frac{160^2 \times 英寸^2}{1+\frac{高^2}{宽^2}}$$</p><p><strong>当求的dp为高时</strong></p><p>$$dp = \frac{160^2 \times 英寸^2}{1+\frac{宽^2}{高^2}}$$</p><p>从这两个公式可以看出来，英寸不变的情况下，<strong>dp只和宽高比有关系</strong>。<br>2k的galaxy s7 edge 和1080p的一加3 ，它们都是5.5in，他们的宽都是1440dp</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio 3.0 新特性</title>
      <link href="/2017/05/18/Android-Studio-3-0-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2017/05/18/Android-Studio-3-0-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Kotlin-集成"><a href="#Kotlin-集成" class="headerlink" title="Kotlin 集成"></a>Kotlin 集成</h3><p>创建工程界面多了 <strong>include Kotlin Support</strong><br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950853642988.jpg" alt=""><br><a id="more"></a></p><p>勾选之后后面的这个界面创建的Activity直接就是以Kotlin创建</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950856425564.jpg" alt=""></p><p>在后续创建Activity的窗口里还能选择activity的语言</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950868183922.jpg" alt=""></p><p>当然少不了直接把java类转换为Kotlin的这个插件啦</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950868986947.jpg" alt=""></p><h3 id="基于IDEA-2017-1-版本构建"><a href="#基于IDEA-2017-1-版本构建" class="headerlink" title="基于IDEA 2017.1 版本构建"></a>基于IDEA 2017.1 版本构建</h3><ul><li><p>支持方法参数hint</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950886964018.jpg" alt=""></p></li><li><p>支持按参数排列显示不同颜色<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950892822830.jpg" alt=""></p></li><li><p>开启后效果<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950892978293.jpg" alt=""></p></li><li><p>version control 加入了直接解决按钮<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950895410113.jpg" alt=""></p></li></ul><p><a href="https://blog.jetbrains.com/idea/2017/02/intellij-idea-2017-1-public-preview-java-9-debugger-vcs-search-editor-and-many-more/" target="_blank" rel="noopener">更多特性</a></p><h3 id="对Android-O-的支持"><a href="#对Android-O-的支持" class="headerlink" title="对Android O 的支持"></a>对Android O 的支持</h3><ul><li>可以直接打开字体和对字体xml的支持 <a href="https://developer.android.com/preview/features/working-with-fonts.html" target="_blank" rel="noopener">详情</a></li><li>可以直接下载谷歌提供的可下载字体</li><li>新的Launcher规则支持 <a href="https://developer.android.com/preview/features/adaptive-icons.html" target="_blank" rel="noopener">详情</a><br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950911898211.jpg" alt=""></li></ul><h3 id="对Java8的支持"><a href="#对Java8的支持" class="headerlink" title="对Java8的支持"></a>对Java8的支持</h3><p>使用新的字节码转换技术, <strong>Desugar</strong>。使一些Java8特性支持到任意API,例如</p><ul><li>Lambdas</li><li>Method references <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="noopener">详情</a></li><li>Default and static interface methods(接口默认实现和静态方法)</li><li>try-with-resouces <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" target="_blank" rel="noopener">详情</a></li><li>Type and repeating annotations（类型注解和重复注解）</li></ul><p>使用方法很简单，添加这个<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950926485361.jpg" alt=""></p><h3 id="新的Android-Gradle-插件"><a href="#新的Android-Gradle-插件" class="headerlink" title="新的Android Gradle 插件"></a>新的Android Gradle 插件</h3><p>新的Android Gradle 插件是为了解决大数量模块编译问题，有以下几个特性</p><ul><li>推迟解决依赖以达到更快的配置</li><li>变异感知（Variant-aware）依赖解决方案仅适用于您正在构建的项目和变体</li><li>对代码或资源应用简单的更改时，更快的增量构建时间</li></ul><p>为了实现这些改进，插件行为，DSL和API有一些突破性的变化。这会影响构建文件和Gradle插件。有关如何迁移自己的项目以使用此插件的说明，请看,<a href="https://developer.android.com/studio/preview/features/new-android-plugin-migration.html" target="_blank" rel="noopener">迁移到新的插件</a></p><h3 id="Google’s-Maven-repository"><a href="#Google’s-Maven-repository" class="headerlink" title="Google’s Maven repository"></a>Google’s Maven repository</h3><p>Android支持库Maven依赖关系现在可以在新的Maven存储库中的Android SDK Manager外部使用。结合命令行sdkmanager工具和Gradle，这种新的分发方法简化了使用连续集成系统的Maven依赖关系管理，要使用新的Maven存储库，请将URL添加到build.gradle文件的repository库中，如下所示：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">"https://maven.google.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详情请看<a href="https://developer.android.com/studio/build/dependencies.html#google-maven" target="_blank" rel="noopener">Google Maven and offline repositories</a>   </p><h3 id="新的Android分析器（New-Android-Profiler）"><a href="#新的Android分析器（New-Android-Profiler）" class="headerlink" title="新的Android分析器（New Android Profiler）"></a>新的Android分析器（New Android Profiler）</h3><blockquote><p>note: 这货只支持API 21 或者以上</p></blockquote><p>包括</p><ul><li><a href="https://developer.android.com/studio/profile/cpu-profiler.html" target="_blank" rel="noopener">CPU 分析器</a></li><li><a href="https://developer.android.com/studio/profile/memory-profiler.html" target="_blank" rel="noopener">内存分析器</a></li><li><a href="https://developer.android.com/studio/profile/network-profiler.html" target="_blank" rel="noopener">网路分析器</a></li></ul><p>其中网络调试器直接支持volley和okhttp<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950939330191.jpg" alt=""></p><p>作为此更新的一部分，logcat已移至单独的窗口。</p><h3 id="APK-调试器"><a href="#APK-调试器" class="headerlink" title="APK 调试器"></a>APK 调试器</h3><p>可以直接让你调试Debug APK无需项目源码。入口如下</p><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950941758409.jpg" alt=""></p><h3 id="新的设备文件浏览器"><a href="#新的设备文件浏览器" class="headerlink" title="新的设备文件浏览器"></a>新的设备文件浏览器</h3><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950951755280.jpg" alt=""></p><h3 id="Instant-Apps-support"><a href="#Instant-Apps-support" class="headerlink" title="Instant Apps support"></a>Instant Apps support</h3><p>Android Studio 3.0允许您在项目中使用两种新的模块类型即时应用模块和功能模块来创建即时应用。<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-05-18-14950952198175.jpg" alt=""><br>Android Studio 3.0还包括一个新的重构模块化操作和App Links Assistant，以帮助您实施即时应用。有关Instant Apps的详细信息，请参阅<a href="https://developer.android.com/topic/instant-apps/index.html" target="_blank" rel="noopener">Android Instant Apps</a>。</p><h3 id="布局编辑器改进"><a href="#布局编辑器改进" class="headerlink" title="布局编辑器改进"></a>布局编辑器改进</h3><p>Android Studio 3.0中的布局编辑器包含许多新的功能增强功能，其中包括</p><ul><li>更新的组件树，改进了拖放视图插入</li><li>新错误面板</li><li>对查看栅栏和组提供新的支持</li><li>增强链创造</li></ul><h3 id="新的Android-Tings-模板"><a href="#新的Android-Tings-模板" class="headerlink" title="新的Android Tings 模板"></a>新的Android Tings 模板</h3><p>Android Studio 3.0在新项目和新模块向导中包含一组新的模板，因此您可以开始使用Android Things开发物联网设备。有关更多信息，请参阅<a href="https://developer.android.com/things/index.html" target="_blank" rel="noopener">Android Things</a>。</p><h3 id="Layout-Inspector改进"><a href="#Layout-Inspector改进" class="headerlink" title="Layout Inspector改进"></a>Layout Inspector改进</h3><p>包括将属性分组为常规类别，并在“视图树”和“属性”面板中将新的搜索功能分组</p><h3 id="APK-Analyzer-改进"><a href="#APK-Analyzer-改进" class="headerlink" title="APK Analyzer 改进"></a>APK Analyzer 改进</h3><ul><li>显示以前可用的包，类和方法之外的字段</li><li>顶部显示和隐藏字段和方法的新过滤选项</li><li>在树视图中，以斜体显示的节点是未在DEX文件中定义的引用  </li><li>对于启用Proguard构建的APK，您可以加载向DEX查看器添加功能的Proguard映射文件，其中包括：<ul><li>粗体节点指示在缩小代码时不应删除节点</li><li>启用一个按钮，使得在收缩（shrinking）过程中被删除的节点可见</li><li>启用一个按钮，恢复树视图中由Proguard混淆后的节点的原始名称</li></ul></li></ul><h3 id="新的Android模拟器功能"><a href="#新的Android模拟器功能" class="headerlink" title="新的Android模拟器功能"></a>新的Android模拟器功能</h3><ul><li><p>新的API Level 24系统映像和Android O Beta系统映像，包括Google Play商店，以促进您的应用程序的端到端测试，并帮助您保持Google Play服务与您的AVDs保持同步。</p></li><li><p>支持Windows和Linux机器上的OpenGL ES 3.0系统图像API级别24及更高版本，并在较老的模拟器系统映像上对OpenGL ES 2.0图形性能进行显着改进。</p><blockquote><p>注意：我们目前正在尽力自动启用来自英特尔，NVIDIA和AMD的所有现代GPU的OpenGL ES 3.0,如果运行OpenGL ES 3.x应用程序时遇到问题，系统可能尚未自动启用.您可以通过将以下行添加到<code>〜/ .android / advancedFeatures.ini</code>文件中来手动启用OpenGL ES 3.0</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLESDynamicVersion = true</span><br></pre></td></tr></table></figure><ul><li>一种新的更简单的方法来从Android模拟器生成您的应用的错误报告。</li><li>一个新的链接，可以在Android问题跟踪器（单击模拟器工具栏&gt;扩展控件&gt;帮助&gt;仿真器帮助&gt;文件错误）上为Android团队快速提交与模拟器相关的错误。</li><li>用于配置Android模拟器使用的代理设置的新UI。要配置Android模拟器的代理设置，请单击 <strong>Extended Controls &gt; Settings &gt; Proxy</strong>.</li><li>在模拟器上支持Android Wear设备的旋钮输入的新支持<br>有关Android模拟器更新的更多信息，请参阅<a href="https://developer.android.com/studio/releases/emulator.html" target="_blank" rel="noopener">Android模拟器发行说明</a>。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简化打包到JCenter的流程</title>
      <link href="/2017/04/20/%E7%AE%80%E5%8C%96%E6%89%93%E5%8C%85%E5%88%B0JCenter%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
      <url>/2017/04/20/%E7%AE%80%E5%8C%96%E6%89%93%E5%8C%85%E5%88%B0JCenter%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="编辑gradle-properties-文件"><a href="#编辑gradle-properties-文件" class="headerlink" title="编辑gradle.properties 文件"></a>编辑gradle.properties 文件</h4><p>gradle.properties 文件有两个地方，一个在项目本身里，一个在系统里。我建议这种每次都一样的配置直接放在系统里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在Mac上，打开终端输入（把用户名替换成自己的）</span></span><br><span class="line">vi /Users/用户名/.gradle/gradle.properties</span><br></pre></td></tr></table></figure><p>加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jcenter 上的用户名和api key</span></span><br><span class="line">BINTRAY_USER=userName</span><br><span class="line">BINTRAY_KEY=apikey</span><br><span class="line"></span><br><span class="line"><span class="comment">#开发者信息</span></span><br><span class="line">DEVELOPER_ID=HANGOX</span><br><span class="line">DEVELOPER_NAME=hangox</span><br><span class="line">DEVELOPER_EMAIL=liang.hanguang93@gmail.com</span><br></pre></td></tr></table></figure><p>退出保存即可。</p><a id="more"></a><h4 id="编辑项目的build-gradle"><a href="#编辑项目的build-gradle" class="headerlink" title="编辑项目的build.gradle"></a>编辑项目的build.gradle</h4><p>加入两个插件的引用</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.2.0'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.5'</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑library-的build-gradle"><a href="#编辑library-的build-gradle" class="headerlink" title="编辑library 的build.gradle"></a>编辑library 的build.gradle</h4><p>在想要上传的module的build.gradle加入</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">    eGroup = <span class="string">'com.hangox'</span></span><br><span class="line">    eArtifactId = <span class="string">'polygon-imageview'</span></span><br><span class="line">    eName = <span class="string">"polygonImageView"</span></span><br><span class="line">    eDescription = <span class="string">''</span></span><br><span class="line">    eVersion = <span class="string">'1.0'</span></span><br><span class="line">    eVcsUrl = <span class="string">'https://github.com/hangox/PolygonImageView.git'</span></span><br><span class="line">    eVcsTag = <span class="string">'v1.0'</span> <span class="comment">//git tag的名字,可以为空</span></span><br><span class="line">    eWebsiteUrl = <span class="string">'https://github.com/hangox/PolygonImageView'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这一行不用的时候建议注释掉，因为国外DNS的原因，有时候会找不到dns的,导致编译失败</span></span><br><span class="line">apply <span class="string">from :</span> <span class="string">"https://raw.githubusercontent.com/hangox/bintray-push/v1.0/upload.gradle"</span></span><br></pre></td></tr></table></figure><p>最后的项目引用将会是这样：<code>eGroup:eArtifactId:eVersion</code><br>对于我这个项目，也就是 <code>com.hangox:polygon-imageview:1.0</code></p><h4 id="开始上传"><a href="#开始上传" class="headerlink" title="开始上传"></a>开始上传</h4><p>在项目根目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地有安装gradle</span></span><br><span class="line">gradle bintrayUpload</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用项目自带的gradle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mac</span></span><br><span class="line">./gradlew  bintrayUpload</span><br><span class="line"></span><br><span class="line"><span class="comment">#win</span></span><br><span class="line">gradlew.bat bintrayUpload</span><br></pre></td></tr></table></figure><h4 id="去jcenter-上点开申请"><a href="#去jcenter-上点开申请" class="headerlink" title="去jcenter 上点开申请"></a>去jcenter 上点开申请</h4><p>这个很多教程都有，就不说明了</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="https://github.com/msdx/gradle-publish" target="_blank" rel="noopener">gradle-publish</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>linux笔记</title>
      <link href="/2017/03/02/linux%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/03/02/linux%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Linux-笔记"><a href="#Linux-笔记" class="headerlink" title="Linux 笔记"></a>Linux 笔记</h1><h2 id="内核查看"><a href="#内核查看" class="headerlink" title="内核查看"></a>内核查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><h2 id="上传或者下载文件"><a href="#上传或者下载文件" class="headerlink" title="上传或者下载文件"></a>上传或者下载文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">scp -r -P &#123;SSH端口号&#125; &#123;用户名&#125;@&#123;主机IP地址&#125;:&#123;主机文件目录&#125;   &#123;本地文件目录&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传</span></span><br><span class="line">scp -r -P &#123;SSH端口号&#125;  &#123;本地文件目录&#125; &#123;用户名&#125;@&#123;主机IP地址&#125;:&#123;主机文件目录&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="查看当前的IP地址"><a href="#查看当前的IP地址" class="headerlink" title="查看当前的IP地址"></a>查看当前的IP地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure><h2 id="开启某个服务开机启动"><a href="#开启某个服务开机启动" class="headerlink" title="开启某个服务开机启动"></a>开启某个服务开机启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig [服务名] on</span><br><span class="line">sudo chkconfig docker on</span><br></pre></td></tr></table></figure><h2 id="Centos7-添加服务器端口"><a href="#Centos7-添加服务器端口" class="headerlink" title="Centos7 添加服务器端口"></a>Centos7 添加服务器端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><h2 id="Firewall-移除port"><a href="#Firewall-移除port" class="headerlink" title="Firewall 移除port"></a>Firewall 移除port</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public  --remove-port=19999/tcp --permanent</span><br></pre></td></tr></table></figure><h2 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h2><p>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled</p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>不要直接修改/etc/profile 文件，把需要执行的代码加入到xx.sh 文件中，移动到/etc/profile.d/中就好了</p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker配置加速</title>
      <link href="/2017/03/01/Docker%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F/"/>
      <url>/2017/03/01/Docker%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F/</url>
      <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io /daotools/set_mirror.sh | sh -s http://3cff1e8d.m.daocloud.io</span><br></pre></td></tr></table></figure><p>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 /etc/default/docker 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7，其他版本可能有细微不同。更多详情请访问文档。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在桌面右下角状态栏中右键 docker 图标，修改在 Docker Daemon 标签页中的 json ，把下面的地址:</p><p><a href="http://3cff1e8d.m.daocloud.io" target="_blank" rel="noopener">http://3cff1e8d.m.daocloud.io</a> Copy<br>加到”registry-mirrors”的数组里。点击 Apply </p><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>Docker For Mac</p><p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:</p><p><a href="http://3cff1e8d.m.daocloud.io" target="_blank" rel="noopener">http://3cff1e8d.m.daocloud.io</a><br>点击 Apply &amp; Restart 按钮使设置生效。</p>]]></content>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>layer使用</title>
      <link href="/2017/02/27/layer%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/02/27/layer%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h2><blockquote><p>如何显示不同电量的下电池的图标？</p></blockquote><h3 id="最简单的方案"><a href="#最简单的方案" class="headerlink" title="最简单的方案"></a>最简单的方案</h3><p>直接根据不同的电量，写不同的if判断来设置到不同的ImageView中。<br>这种方案简单粗暴，但是不太优雅，你将会看到一层层的if语句，同时当增加更多的区间显示的话，你又要在一堆if语句中加入更过的if语句。好的代码应该对遵循开闭原则，这明显不是一个好的办法。</p><h3 id="使用Android系统提供的layer-list"><a href="#使用Android系统提供的layer-list" class="headerlink" title="使用Android系统提供的layer-list"></a>使用Android系统提供的layer-list</h3><p>Android 系统提供使用layer-list 这种办法描绘一张可以根据值改变的drawble</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">level-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_status_battery_0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLevel</span>=<span class="string">"29"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minLevel</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_status_battery_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLevel</span>=<span class="string">"79"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minLevel</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_status_battery_2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLevel</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minLevel</span>=<span class="string">"80"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">level-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>minLevel</code> 表示最低值<br><code>maxLevel</code> 表示最高值<br><code>drawable</code> 则表示符合这个区间的时候显示的图片</p><p>而在代码中，你只需要这样设置level就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageView.getDrawable().setLevel(progress);</span><br></pre></td></tr></table></figure><p>这样就算我们增加再多的区间我们都可以只是修改配置文件xml，而不修改我们的代码来打到修改得目的，很好的符合开闭原则。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift上http服务器选择</title>
      <link href="/2017/02/16/swift%E4%B8%8Ahttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E6%8B%A9/"/>
      <url>/2017/02/16/swift%E4%B8%8Ahttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天要做一个访问本地静态文件的工具，用到http服务器。爬了几个坑。所以来记录一下</p><h2 id="都有哪些选择"><a href="#都有哪些选择" class="headerlink" title="都有哪些选择"></a>都有哪些选择</h2><ul><li><a href="https://github.com/httpswift/swifter" target="_blank" rel="noopener">swifter</a></li><li><a href="https://github.com/IBM-Swift/Kitura" target="_blank" rel="noopener">IBM-Swift/Kitura</a></li><li><a href="https://github.com/vapor/vapor" target="_blank" rel="noopener">vapor/vapor</a></li><li><a href="https://github.com/PerfectlySoft/Perfect" target="_blank" rel="noopener">PerfectlySoft/Perfect</a></li></ul><a id="more"></a><p>后面三个都是比较出名的HttpServer服务框架。我都试过，但是我并不知道怎么集成到Cocoa的项目上。Swifter是最简单可以直接集成到Cocoa的项目上的，因为支持pod。其他几个都只是支持Swift Packager Manager 貌似不支持cocoa的项目。无论我怎么折腾都无法把framework加到Cocoa服务上。</p><blockquote><p>最后选择了Swifter</p></blockquote><h2 id="Swifter的一个坑"><a href="#Swifter的一个坑" class="headerlink" title="Swifter的一个坑"></a>Swifter的一个坑</h2><p>Swifter非常清量，上手也非常快。但是有个问题，默认不是访问目录下的index.html的，但是改一下官方的<code>shareDirectory</code>就好了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">myShareFilesFromDirectory</span><span class="params">(<span class="number">_</span> directoryPath: String, defaults: [String] = [<span class="string">"index.html"</span>, <span class="string">"default.html"</span>])</span></span> -&gt; ((<span class="type">HttpRequest</span>) -&gt; <span class="type">HttpResponse</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; r <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> fileRelativePath = r.params.first <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> .notFound</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> fileRelativePath.value.isEmpty &#123;</span><br><span class="line">                <span class="keyword">for</span> path <span class="keyword">in</span> defaults &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> file = <span class="keyword">try</span>? (directoryPath + <span class="type">String</span>.pathSeparator + path).openForReading() &#123;</span><br><span class="line">                        <span class="keyword">return</span> .raw(<span class="number">200</span>, <span class="string">"OK"</span>, [:], &#123; writer <span class="keyword">in</span></span><br><span class="line">                            <span class="keyword">try</span>? writer.write(file)</span><br><span class="line">                            file.close()</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> url = <span class="type">URL</span>(string: r.path)!</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> file = <span class="keyword">try</span>? (directoryPath + <span class="type">String</span>.pathSeparator + fileRelativePath.value + (url.hasDirectoryPath ? <span class="type">String</span>.pathSeparator + <span class="string">"index.html"</span> : <span class="string">""</span>) ).openForReading() &#123;</span><br><span class="line">                <span class="keyword">return</span> .raw(<span class="number">200</span>, <span class="string">"OK"</span>, [:], &#123; writer <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">try</span>? writer.write(file)</span><br><span class="line">                    file.close()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> .notFound</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android App网络通信安全</title>
      <link href="/2017/02/01/2017-02-01-2/"/>
      <url>/2017/02/01/2017-02-01-2/</url>
      <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>没有100%的安全，我们做的只是提高破解的成本，当成本比破解得到的金钱高的时候，自然没有人愿意破解了</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>我们的接口协议被破，破解者通过程序直接刷我们的新增用户，通过邀请机制获取积分。</p><a id="more"></a><h3 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h3><p>如何保证和接口通信的就是我们的客户端，而不是别人，或者更深的一层，如何保证客户端和服务器通信的就是彼此，没有第三方。</p><h3 id="根据问题得出要做到以下几点"><a href="#根据问题得出要做到以下几点" class="headerlink" title="根据问题得出要做到以下几点"></a>根据问题得出要做到以下几点</h3><ol><li>数据不被篡改</li><li>数据只有双方才能看懂</li><li>数据具有时效性</li></ol><h4 id="如何保证数据不被篡改"><a href="#如何保证数据不被篡改" class="headerlink" title="如何保证数据不被篡改"></a>如何保证数据不被篡改</h4><p>加上数据完整性的校验签名（前提是只有客户端才能生成这个检验签名）</p><h4 id="如何使数据只有双方才能看懂"><a href="#如何使数据只有双方才能看懂" class="headerlink" title="如何使数据只有双方才能看懂"></a>如何使数据只有双方才能看懂</h4><p>使用加密算法（前提是只有客户端才能生成校验签名）</p><hr><p>能做到以上两点，网络通信就没有基本问题了。<br>但是，以上两点都有个非常重要的前提，也是一个非常困难的前提</p><blockquote><p>只有客户端能生成一些东西</p></blockquote><h4 id="数据具有时效性"><a href="#数据具有时效性" class="headerlink" title="数据具有时效性"></a>数据具有时效性</h4><p>加入加密过的时间戳（前提是只有客户端才能生成这个时间戳）</p><h3 id="如何保证客户端生成一些东西"><a href="#如何保证客户端生成一些东西" class="headerlink" title="如何保证客户端生成一些东西"></a>如何保证客户端生成一些东西</h3><h5 id="使用C写生成的逻辑，不使用Java"><a href="#使用C写生成的逻辑，不使用Java" class="headerlink" title="使用C写生成的逻辑，不使用Java"></a>使用C写生成的逻辑，不使用Java</h5><p>Java是非常容易反编译的语言，即使混淆了，一些常量也是无法混淆的，所以当反编译的时候非常容易通过搜索来找到对应的常量。但是C不一样，C写的东西反编译后是汇编代码，汇编代码并不是多少人可以看得懂的，一定程度上提高了破解的成本。</p><h5 id="对调用者进行校验"><a href="#对调用者进行校验" class="headerlink" title="对调用者进行校验"></a>对调用者进行校验</h5><p>Android的so库，如果不对使用者进行校验，使用的人可以新建一个一样包名的应用，然后调用我们的so库，一样可以知道对应的输入输出。我们这里在C库里做了对签名的校验，如果发现签名不是我们的，就会用另外一条密钥对数据进行加密。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要想网络协议不被破解，App必须要能够有一个黑匣子一样的东西，让人无法破解，最常用的办法就是把安全逻辑的代码写入到C库中，并对C库进行校验。</p><h3 id="延伸和拓展"><a href="#延伸和拓展" class="headerlink" title="延伸和拓展"></a>延伸和拓展</h3><ol><li>对C库代码进行混淆，提高反编译难度</li><li>没有100%的安全，做好行为监控才是王道，如果一个用户压根就没有点开过这个页面，却收到了这个页面的请求，这点足够怀疑这个请求的来源了。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SuondPool 使用记录</title>
      <link href="/2017/02/01/2017-02-01/"/>
      <url>/2017/02/01/2017-02-01/</url>
      <content type="html"><![CDATA[<h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>我们需要给用户赚到钱的感觉，运营说的。其实就是加个播放掉钱的声音.</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ol><li>MediaPlayer</li><li>SoundPool</li></ol><a id="more"></a><h3 id="确定方案"><a href="#确定方案" class="headerlink" title="确定方案"></a>确定方案</h3><p>MediaPlayer 第一时间就被毙掉了，毕竟时间长，耗费资源多，并不适合我们为了播放音效这个要求<br>SoundPool 就是Android 专门用来播放短声音的，果断就选它了。</p><h3 id="方案实现"><a href="#方案实现" class="headerlink" title="方案实现"></a>方案实现</h3><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p>虽然构造参数已经被Builder取缔了，但是那个是要在API21才能使用的，所以还是安静的使用构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SoundPool(int maxStreams, int streamType, int srcQuality) &#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>maxStream : 最大加载文件的个数，SoundPool 的文件是需要预先加载完成的才能使用</li><li>streamType : 流类型，其实就是从什么渠道播放，最大的体现就是调音量那里，比如我选择了STREAM_MUSIC,就会使用播放音乐的频道，音量使用的就是媒体音量了。具体取值如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The audio stream for phone calls 电话通话*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_VOICE_CALL = AudioSystem.STREAM_VOICE_CALL;</span><br><span class="line"><span class="comment">/** The audio stream for system sounds 系统声音*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_SYSTEM = AudioSystem.STREAM_SYSTEM;</span><br><span class="line"><span class="comment">/** The audio stream for the phone ring 电话铃声*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_RING = AudioSystem.STREAM_RING;</span><br><span class="line"><span class="comment">/** The audio stream for music playback 音乐*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_MUSIC = AudioSystem.STREAM_MUSIC;</span><br><span class="line"><span class="comment">/** The audio stream for alarms 闹钟*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_ALARM = AudioSystem.STREAM_ALARM;</span><br><span class="line"><span class="comment">/** The audio stream for notifications 通知 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_NOTIFICATION = AudioSystem.STREAM_NOTIFICATION;</span><br><span class="line"><span class="comment">/** The audio stream for DTMF Tones 双声道铃声*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_DTMF = AudioSystem.STREAM_DTMF;</span><br></pre></td></tr></table></figure><ul><li>srcQuality 本意是用来改变声音质量的，然后谷歌说现在还没有用</li></ul><h4 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h4><p>构建之后我们需要加载资源，load 的方法有多个，这里调我使用了的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">load</span><span class="params">(Context context, <span class="keyword">int</span> resId, <span class="keyword">int</span> priority)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>context 不解释</li><li>resId 放在raw 中的声音文件resId</li><li>priority 你先给个1，谷歌说现在是没用的</li><li>return 返回一个播放用的id.<br>load 方法是异步的，调用之后不代表已经完成了加载。</li></ul><h4 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> soundID, <span class="keyword">float</span> leftVolume, <span class="keyword">float</span> rightVolume,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> priority, <span class="keyword">int</span> loop, <span class="keyword">float</span> rate)</span> </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>soundId load的时候拿到的ID</li><li>priority 优先级，SoundPool 一次只能播放一个文件，如果你的优先级比当前的高，就会中断当前的，播放你的。</li><li>leftVolume 左声道声音,[0,1F]</li><li>rightVoluem 右声道声音[0,1F]</li><li>loop 循环次数 -1 为无限循环</li><li>rate 播放速度，1为正常，[0.5,2.0]区间</li></ul><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created With Android Studio</span></span><br><span class="line"><span class="comment"> * User hangox</span></span><br><span class="line"><span class="comment"> * Date 16/2/16</span></span><br><span class="line"><span class="comment"> * Time 下午8:19</span></span><br><span class="line"><span class="comment"> * 音效播放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundEffect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> SoundPool mSoundPool;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCompletedSoundEffectId;</span><br><span class="line">    <span class="keyword">private</span> AudioManager mAudioManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoundEffect</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadSoundEffect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mSoundPool = <span class="keyword">new</span> SoundPool(<span class="number">1</span>, AudioManager.STREAM_MUSIC,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (mSoundPool == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        mCompletedSoundEffectId = mSoundPool.load(mContext, R.raw.bing_got,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playCompletedMusic</span><span class="params">(TaskManager.OnTaskStateUpdateEvent taskStateUpdateEvent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(taskStateUpdateEvent.mTaskState == TaskManager.TaskState.COMPLETED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSoundPool == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">float</span> streamVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);</span><br><span class="line">            <span class="keyword">float</span> streamMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);</span><br><span class="line">            <span class="keyword">float</span> volume = streamVolume / streamMaxVolume;</span><br><span class="line">            mSoundPool.play(mCompletedSoundEffectId, volume, volume, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1F</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git快速入门</title>
      <link href="/2017/02/01/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2017/02/01/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><h3 id="直接clone已经有的项目"><a href="#直接clone已经有的项目" class="headerlink" title="直接clone已经有的项目"></a>直接clone已经有的项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hangox/git-use-demo.git</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="或者初始化本地项目"><a href="#或者初始化本地项目" class="headerlink" title="或者初始化本地项目"></a>或者初始化本地项目</h3><p>移动到项目的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/hangox/Desktop/AndroidWorkspace/GitUseDemo</span><br></pre></td></tr></table></figure><p>再敲入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这个时候敲入<code>git status</code> 就会看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">.gitignore</span><br><span class="line">.idea/</span><br><span class="line">app/</span><br><span class="line">build.gradle</span><br><span class="line">gradle.properties</span><br><span class="line">gradle/</span><br><span class="line">gradlew</span><br><span class="line">gradlew.bat</span><br><span class="line">settings.gradle</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure><p>这是时候就会表示成功了</p><!--more--><p>##设置代码提交者信息<br>如果不设置代码提交者信息当然也可以提交，但是谁不希望提交上去的代码有个有个牛逼的名字呢😈</p><p>设置名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"NiuBi"</span></span><br></pre></td></tr></table></figure><p>设置邮箱：（出问题了人家可以找到你😂）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.email <span class="string">"hangox.liang@gmail.com"</span></span><br></pre></td></tr></table></figure><p>如果你想所有项目都是应用这个名字和邮箱只需要加上参数<code>-- global</code><br>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"NiuBi"</span></span><br><span class="line">git config user.email <span class="string">"hangox.liang@gmail.com"</span></span><br></pre></td></tr></table></figure><p>要想查看现在的config信息可以这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>你就会看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">user.name=47</span><br><span class="line">user.email=liang.hanguang93@gmail.com</span><br><span class="line">core.autocrlf=input</span><br><span class="line">core.excludesfile=/Users/hangox/.gitignore_global</span><br><span class="line">core.ignorecase=<span class="literal">false</span></span><br><span class="line">difftool.sourcetree.cmd=opendiff <span class="string">"<span class="variable">$LOCAL</span>"</span> <span class="string">"<span class="variable">$REMOTE</span>"</span></span><br><span class="line">difftool.sourcetree.path=</span><br><span class="line">mergetool.sourcetree.cmd=/Applications/SourceTree.app/Contents/Resources/opendiff-w.sh <span class="string">"<span class="variable">$LOCAL</span>"</span> <span class="string">"<span class="variable">$REMOTE</span>"</span> -ancestor <span class="string">"<span class="variable">$BASE</span>"</span> -merge <span class="string">"<span class="variable">$MERGED</span>"</span></span><br><span class="line">mergetool.sourcetree.trustexitcode=<span class="literal">true</span></span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=<span class="literal">true</span></span><br><span class="line">core.bare=<span class="literal">false</span></span><br><span class="line">core.logallrefupdates=<span class="literal">true</span></span><br><span class="line">core.ignorecase=<span class="literal">true</span></span><br><span class="line">core.precomposeunicode=<span class="literal">true</span></span><br><span class="line">user.name=NiuBi</span><br></pre></td></tr></table></figure><p>如果你发现了两个user.name和user.email ，这是其中一个是global的，一个是项目的而已</p><p>当然<code>git config</code> 还有很多可以设置的，包括合并工具什么的，自己挖掘吧!</p><h2 id="编写-gitignore"><a href="#编写-gitignore" class="headerlink" title="编写.gitignore"></a>编写.gitignore</h2><h3 id="什么是-gitignore"><a href="#什么是-gitignore" class="headerlink" title="什么是.gitignore"></a>什么是.gitignore</h3><p><em>.gitignore</em> 就好像它的名字一样</p><blockquote><p>告诉 git忽略一些不需要的文件</p></blockquote><h3 id="gitignore-编写规则"><a href="#gitignore-编写规则" class="headerlink" title=".gitignore 编写规则"></a>.gitignore 编写规则</h3><p>项目文件结构是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── GitUseDemo.iml</span><br><span class="line">├── app</span><br><span class="line">│   ├── app.iml</span><br><span class="line">│   ├── build</span><br><span class="line">│   ├── build.gradle</span><br><span class="line">│   ├── libs</span><br><span class="line">│   ├── proguard-rules.pro</span><br><span class="line">│   └── src</span><br><span class="line">├── build</span><br><span class="line">│   └── generated</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">├── gradle.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── local.properties</span><br><span class="line">└── settings.gradle</span><br></pre></td></tr></table></figure><p>我想要忽略build文件夹，.iml 结尾文件和local.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#忽略build 文件夹</span><br><span class="line">/build</span><br><span class="line">#忽略local.properties 文件</span><br><span class="line">local.properties</span><br><span class="line">#忽略.xml 结尾的文件，使用正则</span><br><span class="line">*.iml</span><br><span class="line">#不忽略GitUseDemo.xml,这里只是为了演示，其实应该忽略的</span><br><span class="line">!GitUseDemo.iml</span><br><span class="line">#gradle 缓存文件，不需要提交</span><br><span class="line">.gradle</span><br><span class="line">#idea 的配置文件，不需要提交</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure><p>这个时候我们敲入<code>git status</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">.gitignore</span><br><span class="line">GitUseDemo.iml</span><br><span class="line">app/</span><br><span class="line">build.gradle</span><br><span class="line">gradle.properties</span><br><span class="line">gradle/</span><br><span class="line">gradlew</span><br><span class="line">gradlew.bat</span><br><span class="line">settings.gradle</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><p>可以看到不需要的东西都被忽略了</p><h2 id="添加需要提交的文件到暂存区"><a href="#添加需要提交的文件到暂存区" class="headerlink" title="添加需要提交的文件到暂存区"></a>添加需要提交的文件到暂存区</h2><h4 id="添加当前文件夹所有文件"><a href="#添加当前文件夹所有文件" class="headerlink" title="添加当前文件夹所有文件"></a>添加当前文件夹所有文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h4 id="移除追踪的文件"><a href="#移除追踪的文件" class="headerlink" title="移除追踪的文件"></a>移除追踪的文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##去掉--cached就是同时删除文件</span><br><span class="line">git rm --cached build.gradle</span><br></pre></td></tr></table></figure><h4 id="使用简单的匹配添加文件"><a href="#使用简单的匹配添加文件" class="headerlink" title="使用简单的匹配添加文件"></a>使用简单的匹配添加文件</h4><p><em>添加后缀为.gradle的文件</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add *.gradle</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>简单的提交方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;first commit&apos;</span><br></pre></td></tr></table></figure><p>如果你写的东西比较长，可以这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p>这样将会出现一个vim 编辑器来编写,像这样<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2016-06-15-14659808147172.jpg" alt=""></p><h2 id="推送到远端"><a href="#推送到远端" class="headerlink" title="推送到远端"></a>推送到远端</h2><p>以上我们做的都这是发生在本地（这也是为什么Git快的原因了），如果需要和小伙伴们合作的话，就需要推送到远端了。</p><p><em>如果你是clone下来的可以跳过以下这一步了</em></p><ul><li>添加远端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加远端，origin 只是一个名字而已，只是默认都是叫这个</span></span><br><span class="line">git remote add origin https://github.com/hangox/git-use-demo.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远端信息</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><ul><li>更新以下本地的代码(每次同步之前建议这样做，虽然我老是忘记/(ㄒoㄒ)/~~)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># pull 其实是包含了两步操作，从remote 中fetch(拿来)代码，和当前分支(也就是master)</span><br><span class="line"># merge(合并),如果你们公司使用的是rebase的话，就不能这样干了。但是大部分情况下都是</span><br><span class="line"># 使用merge的</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><ul><li>上传代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git push &lt;remote-name&gt; &lt;remote-branch-name&gt;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>等待片刻，代码就上传完毕，你就可以和小伙伴们愉快的玩耍了O(∩_∩)O~~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git Pro</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 演讲稿</title>
      <link href="/2017/01/19/Git-%E6%BC%94%E8%AE%B2/"/>
      <url>/2017/01/19/Git-%E6%BC%94%E8%AE%B2/</url>
      <content type="html"><![CDATA[<h2 id="主要目的"><a href="#主要目的" class="headerlink" title="主要目的"></a>主要目的</h2><p>理解Git的设计理念，Git的小技巧</p><h3 id="Git是否能代替SVN"><a href="#Git是否能代替SVN" class="headerlink" title="Git是否能代替SVN"></a>Git是否能代替SVN</h3><p>这是很多人第一次使用Git的时候，都会报这样的疑问。我们带着这样的疑问看看Git的设计理 念</p><h4 id="Git的设计理念"><a href="#Git的设计理念" class="headerlink" title="Git的设计理念"></a>Git的设计理念</h4><ul><li>速度 </li><li>简单的设计</li><li>对非线性开发模式的强力支持</li><li>完全分布式</li><li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li></ul><h5 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h5><ul><li>几乎所有的操作都是离线的</li><li>使用直接镜像的方式保存文件，并不是保存文件的差异</li></ul><h5 id="简单的设计"><a href="#简单的设计" class="headerlink" title="简单的设计"></a>简单的设计</h5><ul><li>Git 几乎所有的操作都是往里面添加操作,所以尽管大胆的操作</li></ul><h5 id="对于非线性开发的支持"><a href="#对于非线性开发的支持" class="headerlink" title="对于非线性开发的支持"></a>对于非线性开发的支持</h5><ul><li>也就是说你可以划分很多功能之后同时开发（这个后面会讲到非线性开发）</li></ul><h5 id="完全分布式"><a href="#完全分布式" class="headerlink" title="完全分布式"></a>完全分布式</h5><ul><li>每一个节点都是一个完整的节点，不存在主从区别</li></ul><h5 id="管理Linux-这样的项目"><a href="#管理Linux-这样的项目" class="headerlink" title="管理Linux 这样的项目"></a>管理Linux 这样的项目</h5><ul><li>这个应该是对之前bitkeeper最大的评价了吧</li></ul><blockquote><p>从Git的设计理念可以看出来，Git各方面的设计都比SVN要强大。除了多占用一点磁盘</p></blockquote><h3 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h3><h4 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h4><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2016-12-29-14827414722893.jpg" alt=""><br>已修改-&gt;已暂存-&gt;已提交</p><h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><h4 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h4><h5 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name HanGuang</span><br><span class="line">git config --global user.email liang.hanguang93@gmail.com</span><br></pre></td></tr></table></figure><h5 id="设置保存密码"><a href="#设置保存密码" class="headerlink" title="设置保存密码"></a>设置保存密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认是不会保存密码的</span></span><br><span class="line"><span class="comment">#保存密码到内存,默认为15分钟</span></span><br><span class="line">git config --global credential.helper cache --timeout &lt;second&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#明文保存密码到磁盘，默认位置为`~/.git_credential`</span></span><br><span class="line">git config --global credential.helper store --file &lt;path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#加密保存在系统敏感库</span></span><br><span class="line"><span class="comment">#for widnow</span></span><br><span class="line">git config --global credential.helper winstore</span><br><span class="line"><span class="comment">#for mac</span></span><br><span class="line">git config --global credential.helper osxkeychain</span><br></pre></td></tr></table></figure><h5 id="设置不忽略文件名大小写"><a href="#设置不忽略文件名大小写" class="headerlink" title="设置不忽略文件名大小写"></a>设置不忽略文件名大小写</h5><p>git的默认状态是不会追踪文件明的大小写变化的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="全局的-gitignore"><a href="#全局的-gitignore" class="headerlink" title="全局的.gitignore"></a>全局的.gitignore</h5><p>设置全局的<code>.gitignore</code> 位置在<code>/Users/${user}/.gitignore_global</code>。<br>主要是用来屏蔽一些系统在每个目录上都会有的文件，比如Mac上的 <code>.DS_Store</code> </p><h4 id="配置项目的第一次"><a href="#配置项目的第一次" class="headerlink" title="配置项目的第一次"></a>配置项目的第一次</h4><h5 id="编辑-gitignore"><a href="#编辑-gitignore" class="headerlink" title="编辑.gitignore"></a>编辑.gitignore</h5><p>下面我Android 项目常用的.gitignore</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#iml 是IDE生成的文件，项目下来之后会自生成，而且不一样，不需要提交</span></span><br><span class="line">*.iml</span><br><span class="line"><span class="comment">#保存IDE文件的地方，与使用者有关系，不能提交</span></span><br><span class="line">.idea</span><br><span class="line"><span class="comment">#gradle 下载的文件，不需要提交</span></span><br><span class="line">.gradle</span><br><span class="line"><span class="comment">#保存本地变量的文件，每个人逗不一样不能提交</span></span><br><span class="line">/local.properties </span><br><span class="line"><span class="comment">#构建生成的文件，没有提交的必要</span></span><br><span class="line">/build</span><br><span class="line">.externalNativeBuild</span><br><span class="line"><span class="comment">#调试时获取的截图，不需要提交</span></span><br><span class="line">/captures</span><br></pre></td></tr></table></figure><p>这只是列举了Android Studio 这边常用的规则，具体规则要和项目有关系。<br>最大的原则是：__</p><h5 id="项目的用户名和Email"><a href="#项目的用户名和Email" class="headerlink" title="项目的用户名和Email"></a>项目的用户名和Email</h5><p>当项目的用户名和email 和全局的不一样的时候，需要单独为项目设置用户明和email</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name HanGuang</span><br><span class="line">git config user.email hliang2@heygears.com</span><br></pre></td></tr></table></figure><h4 id="后悔药"><a href="#后悔药" class="headerlink" title="后悔药"></a>后悔药</h4><p>很多时候我们写了commit的时候就会发现自己提交少了文件,这个时候就可以使用下面这几个命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把相应文件add进去之后</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，而这时你想要切换到另一个分支做一点别的事情。 问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。这个时候你就可以使用<code>stash</code>命令保存你的工作了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存储操作</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment">#弹出操作</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出所有的stash</span></span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure><h4 id="分支妙用"><a href="#分支妙用" class="headerlink" title="分支妙用"></a>分支妙用</h4><h5 id="正常工作流"><a href="#正常工作流" class="headerlink" title="正常工作流"></a>正常工作流</h5><ul><li>master分支（用来保存最新的可以发布的代码）</li><li>develop分支(开发时的分支，不一定稳定，当代码稳定的时候需要合并到master 分支)</li><li>release 分支（指向最新发布的代码）</li><li>各种feature_开头的，代指各种功能特性</li><li>hot_fix 分支，专门用来修复bug</li><li>打tag（tag 其实就是一个特殊的分支。如果你完成了版本v1.0开发，可以打一个tag 名字为为v1.0 以后v1.0 版本出现问题可以直接checkout 出来修复后合并回去 ）</li></ul><h5 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h5><p>可以checkout 一个叫test 的分支，你想在里面怎么改都可以，只要不推送到远端，怎么改都是这个分支的事情。注意一点 <strong>本地控件为clean 的时候才切换分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch test_hugaoxiagao</span><br><span class="line">git checkout test_hugaoxiagao</span><br><span class="line"><span class="comment">#你现在可以在这个分支上为所欲为了</span></span><br></pre></td></tr></table></figure><h4 id="pull-分解"><a href="#pull-分解" class="headerlink" title="pull 分解"></a>pull 分解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"><span class="comment">#以上命令可以分解为</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取origin远端上的master 分支数据</span></span><br><span class="line">git fetch origin master</span><br><span class="line"><span class="comment">#合并origin/master 的数据到 本地master </span></span><br><span class="line">git merge origin/master</span><br><span class="line"><span class="comment">#其实你还有一个选择</span></span><br><span class="line">git rebase origin/master</span><br><span class="line"><span class="comment">#这样指令将会把你的提交和远端的提交重新排列</span></span><br></pre></td></tr></table></figure><h4 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h4><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2016-12-29-14829103251989.jpg" alt=""><br>当你只想合并c3 到master，并不想把ruby_client分支合并到master的时候。你就可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个命令可以把某个提交提取到当前的分支上</span></span><br><span class="line">git cherry-pick &lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="多远端"><a href="#多远端" class="headerlink" title="多远端"></a>多远端</h4><p>git 可以添加多个远端，同时和多个远端进行同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://gitlab.com/hangox.git</span><br><span class="line">git remote add mygitlab http://gitlab.47log.com/hangox.git</span><br><span class="line"><span class="comment">#这样就添加了两个不同名字的远端了，push 指定相应的远端就好了</span></span><br></pre></td></tr></table></figure><h4 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h4><p>举个栗子,我们要开发一个控制耳机的App ，大体划分为蓝牙库交互库和App界面体。<br>由于前期编写的过程中蓝牙交互库需要经常修改，并不适合把蓝牙交互库打包成一个文件导入。这个时候我们就可以引入子项目的概念，app项目中加入bluetoothLibrary 这个子项目，分别来自不同的远端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前在App项目中添加子模块</span></span><br><span class="line">git submodule add &lt;remote_url&gt;</span><br></pre></td></tr></table></figure><h4 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h4><p>请使用sourceTree 英文版本</p>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 自定义按钮状态</title>
      <link href="/2017/01/19/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%92%AE%E7%8A%B6%E6%80%81/"/>
      <url>/2017/01/19/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%92%AE%E7%8A%B6%E6%80%81/</url>
      <content type="html"><![CDATA[<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述:"></a>需求描述:</h4><p>最近做个项目，有一个按钮，有下载，安装，点击，安装中，下载中和使用这六个不同的状态，每个状态对应的按钮颜色也是不一样的，加上按下去的变色，大概有12种状态。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h4><ul><li>6种状态对应不一样的background，设置为不同的状态的时候，换上对应的背景。</li><li>自定义按钮状态<a id="more"></a><h4 id="选择方案"><a href="#选择方案" class="headerlink" title="选择方案:"></a>选择方案:</h4>其实第二种和第一种的本质区别就是把所有的状态的文件写到一个xml里，但是更优雅，果断使用第二种</li></ul><h4 id="方案实现"><a href="#方案实现" class="headerlink" title="方案实现:"></a>方案实现:</h4><ul><li>定义自己的状态</li><li>重写控件的onCreateDrawableState(int extraSpace) 告诉系统你有多少种状态</li></ul><p>就这两个步骤，非常简单</p><h5 id="定义自己的状态"><a href="#定义自己的状态" class="headerlink" title="定义自己的状态"></a>定义自己的状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;declare-styleable name=&quot;ColorStateButton&quot;&gt;</span><br><span class="line">     &lt;attr name=&quot;state_download&quot; format=&quot;boolean&quot;/&gt;</span><br><span class="line">     &lt;attr name=&quot;state_downloading&quot; format=&quot;boolean&quot;/&gt;</span><br><span class="line">     &lt;attr name=&quot;state_install&quot; format=&quot;boolean&quot;/&gt;</span><br><span class="line">     &lt;attr name=&quot;state_installing&quot; format=&quot;boolean&quot;/&gt;</span><br><span class="line">     &lt;attr name=&quot;state_open&quot; format=&quot;boolean&quot;/&gt;</span><br><span class="line"> &lt;/declare-styleable&gt;</span><br></pre></td></tr></table></figure><p>其实我想试试可不可以直接用数字类型的，当时时间比较紧急，就没试了，有兴趣的可以试试</p><h5 id="重写onCreateDrawableState"><a href="#重写onCreateDrawableState" class="headerlink" title="重写onCreateDrawableState"></a>重写onCreateDrawableState</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span>[] onCreateDrawableState(<span class="keyword">int</span> extraSpace) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mColorStatus != <span class="keyword">null</span> &amp;&amp; mColorStatus.getMergeState() != <span class="keyword">null</span> &amp;&amp; isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] drawableStatus = <span class="keyword">super</span>.onCreateDrawableState(extraSpace + mColorStatus.getMergeState().length);<span class="comment">//告诉系统你要添加拓展的状态数量</span></span><br><span class="line">            <span class="comment">//告诉系统你要合并的状态</span></span><br><span class="line">            mergeDrawableStates(drawableStatus, mColorStatus.getMergeState());</span><br><span class="line"><span class="comment">//            printList(drawableStatus);</span></span><br><span class="line">            <span class="keyword">return</span> drawableStatus;</span><br><span class="line">        &#125;¡</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateDrawableState(extraSpace);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码:"></a>详细代码:</h4><h5 id="按钮的background"><a href="#按钮的background" class="headerlink" title="按钮的background"></a>按钮的background</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">          xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</span><br><span class="line">    &lt;!-- 需要下载状态--&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/ic_color_button_download_normal&quot;</span><br><span class="line">        android:state_pressed=&quot;false&quot;</span><br><span class="line">        app:state_download=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/ic_color_button_download_pressed&quot;</span><br><span class="line">        android:state_pressed=&quot;true&quot;</span><br><span class="line">        app:state_download=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--需要安装状态--&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/ic_color_button_install&quot;</span><br><span class="line">        android:state_pressed=&quot;false&quot;</span><br><span class="line">        app:state_install=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/ic_color_button_install_pressed&quot;</span><br><span class="line">        android:state_pressed=&quot;true&quot;</span><br><span class="line">        app:state_install=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;!--按钮不可用--&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/ic_color_button_disable&quot;</span><br><span class="line">        android:state_enabled=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/ic_color_button_normal_pressed&quot;</span><br><span class="line">        android:state_pressed=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;!--正常状态--&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=&quot;@drawable/ic_color_button_normal&quot;/&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><h5 id="按钮的源码"><a href="#按钮的源码" class="headerlink" title="按钮的源码"></a>按钮的源码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">package com.bingwish.bibao.ui.fragment;</span><br><span class="line"></span><br><span class="line">import android.annotation.TargetApi;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.os.Build;</span><br><span class="line">import android.support.annotation.StringRes;</span><br><span class="line">import android.util.AttributeSet;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">import com.bingwish.bibao.R;</span><br><span class="line">import com.hangox.xlog.XLog;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created With Android Studio</span><br><span class="line"> * User hangox</span><br><span class="line"> * Date 16/1/11</span><br><span class="line"> * Time 下午8:58</span><br><span class="line"> * 下载显示按钮</span><br><span class="line"> */</span><br><span class="line">public class ColorStateButton extends Button &#123;</span><br><span class="line">    public static final int[] STATUS_DOWNLOAD = &#123;R.attr.state_download&#125;;</span><br><span class="line">    public static final int[] STATUS_INSTALL = &#123;R.attr.state_install&#125;;</span><br><span class="line">    private ColorStatus mColorStatus = ColorStatus.DOWNLOAD;</span><br><span class="line"></span><br><span class="line">    public ColorStateButton(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ColorStateButton(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ColorStateButton(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @TargetApi(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">    public ColorStateButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void init(Context context) &#123;</span><br><span class="line">        setColorState(ColorStatus.DOWNLOAD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 设置颜色类型</span><br><span class="line">     *</span><br><span class="line">     * @param colorState</span><br><span class="line">     */</span><br><span class="line">    public void setColorState(ColorStatus colorState) &#123;</span><br><span class="line">        setText(colorState.getButtonTextRes());</span><br><span class="line">        switch (colorState) &#123;</span><br><span class="line">            case DOWNLOADING:</span><br><span class="line">            case INSTALLING:</span><br><span class="line">                setEnabled(false);</span><br><span class="line">                return;</span><br><span class="line">        &#125;</span><br><span class="line">        setEnabled(true);</span><br><span class="line">        mColorStatus = colorState;</span><br><span class="line">        refreshDrawableState();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected int[] onCreateDrawableState(int extraSpace) &#123;</span><br><span class="line">        if (mColorStatus != null &amp;&amp; mColorStatus.getMergeState() != null &amp;&amp; isEnabled()) &#123;</span><br><span class="line">            final int[] drawableStatus = super.onCreateDrawableState(extraSpace + mColorStatus.getMergeState().length);</span><br><span class="line">            mergeDrawableStates(drawableStatus, mColorStatus.getMergeState());</span><br><span class="line">//            printList(drawableStatus);</span><br><span class="line">            return drawableStatus;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.onCreateDrawableState(extraSpace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void printList(int[] ints) &#123;</span><br><span class="line">        StringBuilder builder = new StringBuilder();</span><br><span class="line">        for (int state : ints) &#123;</span><br><span class="line">            builder.append(state).append(&quot;#&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XLog.i(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public enum ColorStatus &#123;</span><br><span class="line">        DOWNLOAD(STATUS_DOWNLOAD, R.string.state_download),</span><br><span class="line">        CLICK(STATUS_INSTALL, R.string.state_click),</span><br><span class="line">        OPEN(null, R.string.state_open),</span><br><span class="line">        DOWNLOADING(null, R.string.state_downloading),</span><br><span class="line">        INSTALL(STATUS_INSTALL, R.string.state_install),</span><br><span class="line">        INSTALLING(null, R.string.state_installing);</span><br><span class="line">        int[] mergeState;</span><br><span class="line">        @StringRes</span><br><span class="line">        int mButtonTextRes;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ColorStatus(int[] statusDownload, @StringRes int buttonTextRes) &#123;</span><br><span class="line">            mergeState = statusDownload;</span><br><span class="line">            mButtonTextRes = buttonTextRes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getButtonTextRes() &#123;</span><br><span class="line">            return mButtonTextRes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int[] getMergeState() &#123;</span><br><span class="line">            return mergeState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ActionBar 主题修改</title>
      <link href="/2017/01/10/ActionBar-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/"/>
      <url>/2017/01/10/ActionBar-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/</url>
      <content type="html"><![CDATA[<h2 id="下面XML演示如何在v21-appcompact上修改Actionbar-title-颜色，字体颜色"><a href="#下面XML演示如何在v21-appcompact上修改Actionbar-title-颜色，字体颜色" class="headerlink" title="下面XML演示如何在v21 appcompact上修改Actionbar title,颜色，字体颜色"></a>下面XML演示如何在v21 appcompact上修改Actionbar title,颜色，字体颜色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#FF3333<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--   darker variant for the status bar and contextual app bars --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#FF3333<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--   theme UI controls like checkboxes and text fields --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FFF<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;style name="pallte_btn"&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;item name="android:layout_width"&gt;60dp&lt;/item&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;ite name="android:layout_height"&gt;60dp&lt;/item&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/style&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;style name="tabStyle"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/style&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TestTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionBarStyle"</span>&gt;</span>@style/actionBarStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionMenuTextAppearance"</span>&gt;</span>@style/myActionMenuTextAppearance<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"myActionMenuTextAppearance"</span> <span class="attr">parent</span>=<span class="string">"@style/TextAppearance.AppCompat.Widget.ActionBar.Menu"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowRadius"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowColor"</span>&gt;</span>#000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowDx"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowDy"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"actionBarStyle"</span> <span class="attr">parent</span>=<span class="string">"@style/Widget.AppCompat.Light.ActionBar.Solid"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"titleTextStyle"</span>&gt;</span>@style/MyTitleTextStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyTitleTextStyle"</span> <span class="attr">parent</span>=<span class="string">"TextAppearance.AppCompat.Widget.ActionBar.Title"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowRadius"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowColor"</span>&gt;</span>#000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowDx"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:shadowDy"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 工作流</title>
      <link href="/2016/12/10/Git%20%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>/2016/12/10/Git%20%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>项目已经上线，有用户反馈说我们的程序有bug。同时，产品狗扔下了两个发布时间不一样的需求修复，拍照功能和美颜功能，拍照功能要下一版本发布，美颜功能要下下版本发布</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何修复Bug同时，不影响新功能的开发，并且把两次的需求隔离开来.</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h4 id="建立完善的工作流"><a href="#建立完善的工作流" class="headerlink" title="建立完善的工作流"></a>建立完善的工作流</h4><p>项目初始化的时候我们新建三个分支，分别是release ,develop和master。同时，项目发布的时候我们要建立tag,通过tag我们找回对应版本的代码。</p><h5 id="release-分支"><a href="#release-分支" class="headerlink" title="release 分支"></a>release 分支</h5><p>保存可以发布的或者已经发布的代码分支</p><h5 id="master-分支"><a href="#master-分支" class="headerlink" title="master 分支"></a>master 分支</h5><p>保存着开发好测试过的代码，每次develop上开发好的功能都可以合并到master分支</p><h5 id="develop-分支"><a href="#develop-分支" class="headerlink" title="develop 分支"></a>develop 分支</h5><p>我们的开发分支，开发过程中分享的代码</p><p>有这三个分支的前提下我们就可以从容的应对需求了。</p><h5 id="修复线上的bug"><a href="#修复线上的bug" class="headerlink" title="修复线上的bug"></a>修复线上的bug</h5><p>从v1.0.0（假设出现问题的就是v1.0.0版本） tag 中 checkout出新的分支，hotfix_xxx, 修复好之后直接合并回去发布</p><h5 id="开发拍照功能"><a href="#开发拍照功能" class="headerlink" title="开发拍照功能"></a>开发拍照功能</h5><p>直接在develop上开发，开发完成后合并到master上，测试过后就可以合并到release上了</p><h5 id="开发美颜功能"><a href="#开发美颜功能" class="headerlink" title="开发美颜功能"></a>开发美颜功能</h5><p>从master中新建一个分支，叫feature_pretty ，在这个分支上同步开发，功能要上线的时候再合并到release分支上</p><p>这样就比较好的方式解决了上面这个问题了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git Pro</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android App网络通信安全</title>
      <link href="/2016/10/11/Android%20App%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/"/>
      <url>/2016/10/11/Android%20App%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>没有100%的安全，我们做的只是提高破解的成本，当成本比破解得到的金钱高的时候，自然没有人愿意破解了</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>我们的接口协议被破，破解者通过程序直接刷我们的新增用户，通过邀请机制获取积分。</p><h2 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h2><p>如何保证和接口通信的就是我们的客户端，而不是别人，或者更深的一层，如何保证客户端和服务器通信的就是彼此，没有第三方。</p><h2 id="根据问题得出要做到以下几点"><a href="#根据问题得出要做到以下几点" class="headerlink" title="根据问题得出要做到以下几点"></a>根据问题得出要做到以下几点</h2><ol><li>数据不被篡改</li><li>数据只有双方才能看懂</li><li>数据具有时效性</li></ol><h3 id="如何保证数据不被篡改"><a href="#如何保证数据不被篡改" class="headerlink" title="如何保证数据不被篡改"></a>如何保证数据不被篡改</h3><p>加上数据完整性的校验签名（前提是只有客户端才能生成这个检验签名）</p><h3 id="如何使数据只有双方才能看懂"><a href="#如何使数据只有双方才能看懂" class="headerlink" title="如何使数据只有双方才能看懂"></a>如何使数据只有双方才能看懂</h3><p>使用加密算法（前提是只有客户端才能生成校验签名）</p><hr><p>能做到以上两点，网络通信就没有基本问题了。<br>但是，以上两点都有个非常重要的前提，也是一个非常困难的前提</p><blockquote><p>只有客户端能生成一些东西</p></blockquote><h3 id="数据具有时效性"><a href="#数据具有时效性" class="headerlink" title="数据具有时效性"></a>数据具有时效性</h3><p>加入加密过的时间戳（前提是只有客户端才能生成这个时间戳）</p><h2 id="如何保证客户端生成一些东西"><a href="#如何保证客户端生成一些东西" class="headerlink" title="如何保证客户端生成一些东西"></a>如何保证客户端生成一些东西</h2><h4 id="使用C写生成的逻辑，不使用Java"><a href="#使用C写生成的逻辑，不使用Java" class="headerlink" title="使用C写生成的逻辑，不使用Java"></a>使用C写生成的逻辑，不使用Java</h4><p>Java是非常容易反编译的语言，即使混淆了，一些常量也是无法混淆的，所以当反编译的时候非常容易通过搜索来找到对应的常量。但是C不一样，C写的东西反编译后是汇编代码，汇编代码并不是多少人可以看得懂的，一定程度上提高了破解的成本。</p><h4 id="对调用者进行校验"><a href="#对调用者进行校验" class="headerlink" title="对调用者进行校验"></a>对调用者进行校验</h4><p>Android的so库，如果不对使用者进行校验，使用的人可以新建一个一样包名的应用，然后调用我们的so库，一样可以知道对应的输入输出。我们这里在C库里做了对签名的校验，如果发现签名不是我们的，就会用另外一条密钥对数据进行加密。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要想网络协议不被破解，App必须要能够有一个黑匣子一样的东西，让人无法破解，最常用的办法就是把安全逻辑的代码写入到C库中，并对C库进行校验。</p><h2 id="延伸和拓展"><a href="#延伸和拓展" class="headerlink" title="延伸和拓展"></a>延伸和拓展</h2><ol><li>对C库代码进行混淆，提高反编译难度</li><li>没有100%的安全，做好行为监控才是王道，如果一个用户压根就没有点开过这个页面，却收到了这个页面的请求，这点足够怀疑这个请求的来源了。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sock代理转换为http 代理</title>
      <link href="/2016/08/19/Sock%E4%BB%A3%E7%90%86%E8%BD%AC%E6%8D%A2%E4%B8%BAhttp-%E4%BB%A3%E7%90%86/"/>
      <url>/2016/08/19/Sock%E4%BB%A3%E7%90%86%E8%BD%AC%E6%8D%A2%E4%B8%BAhttp-%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>为了应对日益强大的防火墙，大部分人开始专用ShadowSock 作为代理，但是ShadowSock并不支持http 代理，而很多软件非常依赖于http 代理，比如Android SDK ，终端等，所以我们需要<a href="http://www.privoxy.org/" target="_blank" rel="noopener">Privoxy</a></p><h3 id="以下以Mac系统为例演示安装过程"><a href="#以下以Mac系统为例演示安装过程" class="headerlink" title="以下以Mac系统为例演示安装过程"></a>以下以Mac系统为例演示安装过程</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install proxivy</span><br></pre></td></tr></table></figure><p>如果你看到这个了<br><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2016-05-13-14550844836881.jpg" alt=""><br>表示你已经安装成功了</p><a id="more"></a><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>配置其实很简单，上面的截图已经告诉你配置文件在哪里，就是/usr/local/etc/privoxy/的config 文件<br>敲入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/etc/privoxy/config</span><br></pre></td></tr></table></figure><p>在最下面加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 监听端口为8118，如果需要其他设备访问，则需要将ip改为路由器的IP 192.168.1.1 或 0.0.0.0 或者直接 :8118</span><br><span class="line">listen-address  0.0.0.0:8118 #如果要使用默认配置，可以不需要这行</span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br><span class="line">#forward-socks5 表示监听sock5 ，127.0.0.1:1080是本地shadowsock 地址， &quot;.&quot; 表示监听所有的URL</span><br></pre></td></tr></table></figure><p>配置完成后如图<br><img src="media/14550836668808/14550865554172.jpg" alt=""></p><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>还记得安装成功后的截图不?</p><p>这是直接运行，但是关机后就没了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">privoxy /usr/local/etc/privoxy/config</span><br></pre></td></tr></table></figure><p>下面是加入系统启动项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/privoxy/*.plist ~/Library/LaunchAgents</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.privoxy.plist</span><br></pre></td></tr></table></figure><p>如果你选择了其中一个敲入，并没有任何提示，那就是表示成功了</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><ul><li>首先验证这个进程是否已经启动了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux  | grep privoxy</span><br></pre></td></tr></table></figure><p>截图如下：<br><img src="media/14550836668808/14550934959082.jpg" alt=""></p><ul><li>验证provixy 是否在监听8118这个端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 8118</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="media/14550836668808/14550936075752.jpg" alt=""><br>这样就是表示正在监听8118端口了</p>]]></content>
      
      
        <tags>
            
            <tag> Shadowsock </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android计步传感器</title>
      <link href="/2016/08/11/2016-08-11-01:46/"/>
      <url>/2016/08/11/2016-08-11-01:46/</url>
      <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>API 19+</li><li>基于加速传感器</li><li>低功耗</li><li>硬件传感器</li></ul><h2 id="监测范围"><a href="#监测范围" class="headerlink" title="监测范围"></a>监测范围</h2><p><strong>支持</strong></p><ul><li>步行</li><li>跑步</li><li>爬楼梯</li></ul><p><strong>不支持</strong></p><ul><li>骑车</li><li>开车</li><li>坐火车等</li></ul><h2 id="两个传感器"><a href="#两个传感器" class="headerlink" title="两个传感器"></a>两个传感器</h2><ul><li>Step Detector(计步检测器）</li><li>Step Counter(计步计算）</li></ul><h3 id="Step-Detector"><a href="#Step-Detector" class="headerlink" title="Step Detector"></a>Step Detector</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>当一个步数被监测到的时候触发</li><li>一步一事件</li><li>连续或者批处理都可以(取决于你的自己的设定)</li></ul><blockquote><p>注意这个东西是统计到一步就会向你发一个信息</p></blockquote><h3 id="Step-Counter"><a href="#Step-Counter" class="headerlink" title="Step Counter"></a>Step Counter</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>计算从开始监听的实际的步数</li><li>一步一事件</li><li>更高的延迟</li><li>较少误报（比较精准）</li><li>连续或者批处理</li></ul><blockquote><p>虽然这个东西延时比较大，但是当精度是最重要的时候，首选这个传感器</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-feature android:name=&quot;android.hardware.sensor.stepcounter&quot; android:required=&quot;true&quot;/&gt;</span><br><span class="line">&lt;uses-feature android:name=&quot;android.hardware.sensor.stepdetector&quot; android:required=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><p>检查是否存在传感器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isStepCounterExits</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        PackageManager manager = context.getPackageManager();</span><br><span class="line">        <span class="keyword">return</span> manager.hasSystemFeature(PackageManager.FEATURE_SENSOR_STEP_COUNTER) </span><br><span class="line">        &amp;&amp; manager.hasSystemFeature(PackageManager.FEATURE_SENSOR_STEP_DETECTOR); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用场景区分"><a href="#使用场景区分" class="headerlink" title="使用场景区分"></a>使用场景区分</h2><ul><li>仅仅当应用运行的时候使用，需要处理activity 的生命周期</li><li>不断的监听：需要监控Sensor事件队列</li></ul><p><img src="http://7vzoxp.com1.z0.glb.clouddn.com/2017-11-05-14708800260766.jpg" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
